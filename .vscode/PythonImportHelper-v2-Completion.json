[
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "warnings",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "warnings",
        "description": "warnings",
        "detail": "warnings",
        "documentation": {}
    },
    {
        "label": "management",
        "importPath": "django.core",
        "description": "django.core",
        "isExtraImport": true,
        "detail": "django.core",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "django.core",
        "description": "django.core",
        "isExtraImport": true,
        "detail": "django.core",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "django.core",
        "description": "django.core",
        "isExtraImport": true,
        "detail": "django.core",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "django.core",
        "description": "django.core",
        "isExtraImport": true,
        "detail": "django.core",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "django.core",
        "description": "django.core",
        "isExtraImport": true,
        "detail": "django.core",
        "documentation": {}
    },
    {
        "label": "networkx",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "networkx",
        "description": "networkx",
        "detail": "networkx",
        "documentation": {}
    },
    {
        "label": "Graph",
        "importPath": "networkx",
        "description": "networkx",
        "isExtraImport": true,
        "detail": "networkx",
        "documentation": {}
    },
    {
        "label": "Graph",
        "importPath": "networkx",
        "description": "networkx",
        "isExtraImport": true,
        "detail": "networkx",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "mlab",
        "importPath": "mayavi",
        "description": "mayavi",
        "isExtraImport": true,
        "detail": "mayavi",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "Axes3D",
        "importPath": "mpl_toolkits.mplot3d",
        "description": "mpl_toolkits.mplot3d",
        "isExtraImport": true,
        "detail": "mpl_toolkits.mplot3d",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "sample",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "hierarchy",
        "importPath": "scipy.cluster",
        "description": "scipy.cluster",
        "isExtraImport": true,
        "detail": "scipy.cluster",
        "documentation": {}
    },
    {
        "label": "distance",
        "importPath": "scipy.spatial",
        "description": "scipy.spatial",
        "isExtraImport": true,
        "detail": "scipy.spatial",
        "documentation": {}
    },
    {
        "label": "networkx.algorithms.bipartite",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "networkx.algorithms.bipartite",
        "description": "networkx.algorithms.bipartite",
        "detail": "networkx.algorithms.bipartite",
        "documentation": {}
    },
    {
        "label": "Pool",
        "importPath": "multiprocessing",
        "description": "multiprocessing",
        "isExtraImport": true,
        "detail": "multiprocessing",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "itertools",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "itertools",
        "description": "itertools",
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "seaborn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "seaborn",
        "description": "seaborn",
        "detail": "seaborn",
        "documentation": {}
    },
    {
        "label": "PIL",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "PIL",
        "description": "PIL",
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "matplotlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib",
        "description": "matplotlib",
        "detail": "matplotlib",
        "documentation": {}
    },
    {
        "label": "itemgetter",
        "importPath": "operator",
        "description": "operator",
        "isExtraImport": true,
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "numpy.linalg",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy.linalg",
        "description": "numpy.linalg",
        "detail": "numpy.linalg",
        "documentation": {}
    },
    {
        "label": "gzip",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gzip",
        "description": "gzip",
        "detail": "gzip",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "zipfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "zipfile",
        "description": "zipfile",
        "detail": "zipfile",
        "documentation": {}
    },
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "getaddresses",
        "importPath": "email.utils",
        "description": "email.utils",
        "isExtraImport": true,
        "detail": "email.utils",
        "documentation": {}
    },
    {
        "label": "parseaddr",
        "importPath": "email.utils",
        "description": "email.utils",
        "isExtraImport": true,
        "detail": "email.utils",
        "documentation": {}
    },
    {
        "label": "mailbox",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "mailbox",
        "description": "mailbox",
        "detail": "mailbox",
        "documentation": {}
    },
    {
        "label": "urllib.request",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "urllib.request",
        "description": "urllib.request",
        "detail": "urllib.request",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "string",
        "description": "string",
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "ascii_lowercase",
        "importPath": "string",
        "description": "string",
        "isExtraImport": true,
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "AdminSite",
        "importPath": "django.contrib.admin.sites",
        "description": "django.contrib.admin.sites",
        "isExtraImport": true,
        "detail": "django.contrib.admin.sites",
        "documentation": {}
    },
    {
        "label": "django.contrib.auth.models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "Group",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "Permission",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "Permission",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "AbstractUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "Group",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "Permission",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "Group",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "AbstractUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "Group",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "formats",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "BureauSerializer",
        "importPath": "api.serializers",
        "description": "api.serializers",
        "isExtraImport": true,
        "detail": "api.serializers",
        "documentation": {}
    },
    {
        "label": "KeyValueDataSerializer",
        "importPath": "api.serializers",
        "description": "api.serializers",
        "isExtraImport": true,
        "detail": "api.serializers",
        "documentation": {}
    },
    {
        "label": "UserSerializer",
        "importPath": "api.serializers",
        "description": "api.serializers",
        "isExtraImport": true,
        "detail": "api.serializers",
        "documentation": {}
    },
    {
        "label": "AlimentSerializer",
        "importPath": "api.serializers",
        "description": "api.serializers",
        "isExtraImport": true,
        "detail": "api.serializers",
        "documentation": {}
    },
    {
        "label": "CreateUserSerializer",
        "importPath": "api.serializers",
        "description": "api.serializers",
        "isExtraImport": true,
        "detail": "api.serializers",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "api.serializers",
        "description": "api.serializers",
        "isExtraImport": true,
        "detail": "api.serializers",
        "documentation": {}
    },
    {
        "label": "configurations.models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "configurations.models",
        "description": "configurations.models",
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "Affection",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "Rubrique",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "Prescripteur",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "Prestataire",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "Bureau",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "TypeRemboursement",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "KeyValueData",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "TypePrestataire",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "Prestataire",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "Acte",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "Bureau",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "ModeReglement",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "Acte",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "ActeWaspito",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "Affection",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "Prescripteur",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "PrescripteurPrestataire",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "Prestataire",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "ModeReglement",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "ModeReglement",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "Banque",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "TypeRemboursement",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "Prestataire",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "Compagnie",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "Bureau",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "Bureau",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "Caution",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "Compagnie",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "MailingList",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "NatureOperation",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "Devise",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "ModeReglement",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "Banque",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "PeriodeComptable",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "Compagnie",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "NatureOperation",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "Devise",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "ModeReglement",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "Banque",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "PeriodeComptable",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "Compagnie",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "BackgroundQueryTask",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "CronLog",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "BackgroundQueryTask",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "CronLog",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "BackgroundQueryTask",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "BackgroundQueryTask",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "CronLog",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "Acte",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "Affection",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "Prestataire",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "ActionLog",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "Prescripteur",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "PrescripteurPrestataire",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "Prestataire",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "Specialite",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "Secteur",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "Profession",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "Pays",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "Civilite",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "QualiteBeneficiaire",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "Bureau",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "Civilite",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "Pays",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "Prestataire",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "PrestataireReseauSoin",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "QualiteBeneficiaire",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "CronLog",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "AlimentBaobab",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "AlimentBaobab",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "AlimentBaobab",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "AlimentBaobab",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "AlimentBaobab",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "AlimentBaobab",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "AlimentMatricule",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "AlimentBaobab",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "AlimentMatricule",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "Apporteur",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "Banque",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "Bureau",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "Civilite",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "Compagnie",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "Fractionnement",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "ModeReglement",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "Compagnie",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "MarqueVehicule",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "Pays",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "Civilite",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "QualiteBeneficiaire",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "Profession",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "Acte",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "Prestataire",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "Prescripteur",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "JourFerie",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "Periodicite",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "Tarif",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "Acte",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "Prestataire",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "Prescripteur",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "JourFerie",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "Periodicite",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "Tarif",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "AuthGroup",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "ChangementFormule",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "ComptePrestataireVeos",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "Devise",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "GroupeInter",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "NatureQuittance",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "PeriodeVeos",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "QuittanceVeos",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "TypeApporteur",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "TypeQuittance",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "Compagnie",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "ActionLog",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "BackgroundQueryTask",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "CronLog",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "Prestataire",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "Retenue",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "CompteTresorerie",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "Devise",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "Medicament",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "Compagnie",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "TypePriseencharge",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "Prestataire",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "Prescripteur",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "Acte",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "Compagnie",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "Rubrique",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "Affection",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "Acte",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "Prescripteur",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "Prestataire",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "configurations.models",
        "description": "configurations.models",
        "isExtraImport": true,
        "detail": "configurations.models",
        "documentation": {}
    },
    {
        "label": "StatutSinistre",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "Statut",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "StatutValidite",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "EtatPolice",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "Statut",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "StatutSinistre",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "StatutEnrolement",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "StatutRemboursement",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "StatutValidite",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "StatutQuittance",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "TypeEncaissementCommission",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "StatutFacture",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "StatutSinistre",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "TypeAlerte",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "MoyenPaiement",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "SatutBordereauDossierSinistres",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "StatutPaiementSinistre",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "PasswordType",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "StatutReversementCompagnie",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "StatutEncaissementCommission",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "BaseCalculTM",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "Statut",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "PasswordType",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "PasswordType",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "PasswordType",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "Statut",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "StatutValidite",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "BaseCalculTM",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "StatutPaiementSinistre",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "Statut",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "StatutValidite",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "Genre",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "StatutFamilial",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "Statut",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "StatutEnrolement",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "StatutValidite",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "Statut",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "StatutQuittance",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "Genre",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "StatutEnrolement",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "StatutValidite",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "StatutIncorporation",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "StatutValidite",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "StatutValidite",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "StatutValidite",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "Statut",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "Statut",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "StatutEnrolement",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "StatutIncorporation",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "StatutValidite",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "StatutTraitement",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "Genre",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "Statut",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "StatutRelation",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "StatutFamilial",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "OptionYesNo",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "PlacementEtGestion",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "StatutIncorporation",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "StatutValidite",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "StatutSinistre",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "StatutEnrolement",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "StatutTraitement",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "StatutSinistre",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "Statut",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "StatutValidite",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "StatutRemboursement",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "StatutSinistre",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "Statut",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "StatutValidite",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "OptionYesNo",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "Statut",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "StatutContrat",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "Etat",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "StatutQuittance",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "StatutReversementCompagnie",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "StatutValidite",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "DesignationRemboursementSinistre",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "StatutRemboursementSinistre",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "StatutValidite",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "DesignationRemboursementSinistre",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "StatutRemboursementSinistre",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "StatutReversementCompagnie",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "StatutEncaissementCommission",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "StatutValidite",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "StatutFacture",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "StatutSinistre",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "SatutBordereauDossierSinistres",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "StatutSinistreBordereau",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "StatutPolice",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "StatutSinistre",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "StatutSinistreBordereau",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "StatutSinistrePrestation",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "StatutValidite",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "shared.enum",
        "description": "shared.enum",
        "isExtraImport": true,
        "detail": "shared.enum",
        "documentation": {}
    },
    {
        "label": "sinistre.models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sinistre.models",
        "description": "sinistre.models",
        "detail": "sinistre.models",
        "documentation": {}
    },
    {
        "label": "DossierSinistre",
        "importPath": "sinistre.models",
        "description": "sinistre.models",
        "isExtraImport": true,
        "detail": "sinistre.models",
        "documentation": {}
    },
    {
        "label": "Sinistre",
        "importPath": "sinistre.models",
        "description": "sinistre.models",
        "isExtraImport": true,
        "detail": "sinistre.models",
        "documentation": {}
    },
    {
        "label": "DemandeRemboursementMobile",
        "importPath": "sinistre.models",
        "description": "sinistre.models",
        "isExtraImport": true,
        "detail": "sinistre.models",
        "documentation": {}
    },
    {
        "label": "DossierSinistre",
        "importPath": "sinistre.models",
        "description": "sinistre.models",
        "isExtraImport": true,
        "detail": "sinistre.models",
        "documentation": {}
    },
    {
        "label": "Sinistre",
        "importPath": "sinistre.models",
        "description": "sinistre.models",
        "isExtraImport": true,
        "detail": "sinistre.models",
        "documentation": {}
    },
    {
        "label": "DemandeRemboursementMobile",
        "importPath": "sinistre.models",
        "description": "sinistre.models",
        "isExtraImport": true,
        "detail": "sinistre.models",
        "documentation": {}
    },
    {
        "label": "DocumentDossierSinistre",
        "importPath": "sinistre.models",
        "description": "sinistre.models",
        "isExtraImport": true,
        "detail": "sinistre.models",
        "documentation": {}
    },
    {
        "label": "BordereauOrdonnancement",
        "importPath": "sinistre.models",
        "description": "sinistre.models",
        "isExtraImport": true,
        "detail": "sinistre.models",
        "documentation": {}
    },
    {
        "label": "FactureCompagnie",
        "importPath": "sinistre.models",
        "description": "sinistre.models",
        "isExtraImport": true,
        "detail": "sinistre.models",
        "documentation": {}
    },
    {
        "label": "FacturePrestataire",
        "importPath": "sinistre.models",
        "description": "sinistre.models",
        "isExtraImport": true,
        "detail": "sinistre.models",
        "documentation": {}
    },
    {
        "label": "ReglementCompagnie",
        "importPath": "sinistre.models",
        "description": "sinistre.models",
        "isExtraImport": true,
        "detail": "sinistre.models",
        "documentation": {}
    },
    {
        "label": "Sinistre",
        "importPath": "sinistre.models",
        "description": "sinistre.models",
        "isExtraImport": true,
        "detail": "sinistre.models",
        "documentation": {}
    },
    {
        "label": "BordereauOrdonnancement",
        "importPath": "sinistre.models",
        "description": "sinistre.models",
        "isExtraImport": true,
        "detail": "sinistre.models",
        "documentation": {}
    },
    {
        "label": "PaiementComptable",
        "importPath": "sinistre.models",
        "description": "sinistre.models",
        "isExtraImport": true,
        "detail": "sinistre.models",
        "documentation": {}
    },
    {
        "label": "FacturePrestataire",
        "importPath": "sinistre.models",
        "description": "sinistre.models",
        "isExtraImport": true,
        "detail": "sinistre.models",
        "documentation": {}
    },
    {
        "label": "Sinistre",
        "importPath": "sinistre.models",
        "description": "sinistre.models",
        "isExtraImport": true,
        "detail": "sinistre.models",
        "documentation": {}
    },
    {
        "label": "BordereauOrdonnancement",
        "importPath": "sinistre.models",
        "description": "sinistre.models",
        "isExtraImport": true,
        "detail": "sinistre.models",
        "documentation": {}
    },
    {
        "label": "PaiementComptable",
        "importPath": "sinistre.models",
        "description": "sinistre.models",
        "isExtraImport": true,
        "detail": "sinistre.models",
        "documentation": {}
    },
    {
        "label": "FactureCompagnie",
        "importPath": "sinistre.models",
        "description": "sinistre.models",
        "isExtraImport": true,
        "detail": "sinistre.models",
        "documentation": {}
    },
    {
        "label": "FacturePrestataire",
        "importPath": "sinistre.models",
        "description": "sinistre.models",
        "isExtraImport": true,
        "detail": "sinistre.models",
        "documentation": {}
    },
    {
        "label": "ReglementCompagnie",
        "importPath": "sinistre.models",
        "description": "sinistre.models",
        "isExtraImport": true,
        "detail": "sinistre.models",
        "documentation": {}
    },
    {
        "label": "Sinistre",
        "importPath": "sinistre.models",
        "description": "sinistre.models",
        "isExtraImport": true,
        "detail": "sinistre.models",
        "documentation": {}
    },
    {
        "label": "BordereauOrdonnancement",
        "importPath": "sinistre.models",
        "description": "sinistre.models",
        "isExtraImport": true,
        "detail": "sinistre.models",
        "documentation": {}
    },
    {
        "label": "PaiementComptable",
        "importPath": "sinistre.models",
        "description": "sinistre.models",
        "isExtraImport": true,
        "detail": "sinistre.models",
        "documentation": {}
    },
    {
        "label": "FacturePrestataire",
        "importPath": "sinistre.models",
        "description": "sinistre.models",
        "isExtraImport": true,
        "detail": "sinistre.models",
        "documentation": {}
    },
    {
        "label": "Sinistre",
        "importPath": "sinistre.models",
        "description": "sinistre.models",
        "isExtraImport": true,
        "detail": "sinistre.models",
        "documentation": {}
    },
    {
        "label": "BordereauOrdonnancement",
        "importPath": "sinistre.models",
        "description": "sinistre.models",
        "isExtraImport": true,
        "detail": "sinistre.models",
        "documentation": {}
    },
    {
        "label": "Sinistre",
        "importPath": "sinistre.models",
        "description": "sinistre.models",
        "isExtraImport": true,
        "detail": "sinistre.models",
        "documentation": {}
    },
    {
        "label": "PaiementComptable",
        "importPath": "sinistre.models",
        "description": "sinistre.models",
        "isExtraImport": true,
        "detail": "sinistre.models",
        "documentation": {}
    },
    {
        "label": "HistoriqueOrdonnancementSinistre",
        "importPath": "sinistre.models",
        "description": "sinistre.models",
        "isExtraImport": true,
        "detail": "sinistre.models",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "sinistre.models",
        "description": "sinistre.models",
        "isExtraImport": true,
        "detail": "sinistre.models",
        "documentation": {}
    },
    {
        "label": "Sinistre",
        "importPath": "sinistre.models",
        "description": "sinistre.models",
        "isExtraImport": true,
        "detail": "sinistre.models",
        "documentation": {}
    },
    {
        "label": "Sinistre",
        "importPath": "sinistre.models",
        "description": "sinistre.models",
        "isExtraImport": true,
        "detail": "sinistre.models",
        "documentation": {}
    },
    {
        "label": "Sinistre",
        "importPath": "sinistre.models",
        "description": "sinistre.models",
        "isExtraImport": true,
        "detail": "sinistre.models",
        "documentation": {}
    },
    {
        "label": "DossierSinistre",
        "importPath": "sinistre.models",
        "description": "sinistre.models",
        "isExtraImport": true,
        "detail": "sinistre.models",
        "documentation": {}
    },
    {
        "label": "Sinistre",
        "importPath": "sinistre.models",
        "description": "sinistre.models",
        "isExtraImport": true,
        "detail": "sinistre.models",
        "documentation": {}
    },
    {
        "label": "SinistreTemporaire",
        "importPath": "sinistre.models",
        "description": "sinistre.models",
        "isExtraImport": true,
        "detail": "sinistre.models",
        "documentation": {}
    },
    {
        "label": "Sinistre",
        "importPath": "sinistre.models",
        "description": "sinistre.models",
        "isExtraImport": true,
        "detail": "sinistre.models",
        "documentation": {}
    },
    {
        "label": "SinistreTemporaire",
        "importPath": "sinistre.models",
        "description": "sinistre.models",
        "isExtraImport": true,
        "detail": "sinistre.models",
        "documentation": {}
    },
    {
        "label": "Sinistre",
        "importPath": "sinistre.models",
        "description": "sinistre.models",
        "isExtraImport": true,
        "detail": "sinistre.models",
        "documentation": {}
    },
    {
        "label": "Sinistre",
        "importPath": "sinistre.models",
        "description": "sinistre.models",
        "isExtraImport": true,
        "detail": "sinistre.models",
        "documentation": {}
    },
    {
        "label": "PaiementComptable",
        "importPath": "sinistre.models",
        "description": "sinistre.models",
        "isExtraImport": true,
        "detail": "sinistre.models",
        "documentation": {}
    },
    {
        "label": "RemboursementSinistre",
        "importPath": "sinistre.models",
        "description": "sinistre.models",
        "isExtraImport": true,
        "detail": "sinistre.models",
        "documentation": {}
    },
    {
        "label": "Sinistre",
        "importPath": "sinistre.models",
        "description": "sinistre.models",
        "isExtraImport": true,
        "detail": "sinistre.models",
        "documentation": {}
    },
    {
        "label": "Sinistre",
        "importPath": "sinistre.models",
        "description": "sinistre.models",
        "isExtraImport": true,
        "detail": "sinistre.models",
        "documentation": {}
    },
    {
        "label": "DossierSinistre",
        "importPath": "sinistre.models",
        "description": "sinistre.models",
        "isExtraImport": true,
        "detail": "sinistre.models",
        "documentation": {}
    },
    {
        "label": "RemboursementSinistre",
        "importPath": "sinistre.models",
        "description": "sinistre.models",
        "isExtraImport": true,
        "detail": "sinistre.models",
        "documentation": {}
    },
    {
        "label": "Sinistre",
        "importPath": "sinistre.models",
        "description": "sinistre.models",
        "isExtraImport": true,
        "detail": "sinistre.models",
        "documentation": {}
    },
    {
        "label": "DossierSinistre",
        "importPath": "sinistre.models",
        "description": "sinistre.models",
        "isExtraImport": true,
        "detail": "sinistre.models",
        "documentation": {}
    },
    {
        "label": "DemandeRemboursementMobile",
        "importPath": "sinistre.models",
        "description": "sinistre.models",
        "isExtraImport": true,
        "detail": "sinistre.models",
        "documentation": {}
    },
    {
        "label": "PaiementComptable",
        "importPath": "sinistre.models",
        "description": "sinistre.models",
        "isExtraImport": true,
        "detail": "sinistre.models",
        "documentation": {}
    },
    {
        "label": "Sinistre",
        "importPath": "sinistre.models",
        "description": "sinistre.models",
        "isExtraImport": true,
        "detail": "sinistre.models",
        "documentation": {}
    },
    {
        "label": "DossierSinistre",
        "importPath": "sinistre.models",
        "description": "sinistre.models",
        "isExtraImport": true,
        "detail": "sinistre.models",
        "documentation": {}
    },
    {
        "label": "DocumentDossierSinistre",
        "importPath": "sinistre.models",
        "description": "sinistre.models",
        "isExtraImport": true,
        "detail": "sinistre.models",
        "documentation": {}
    },
    {
        "label": "ProrogationSinistre",
        "importPath": "sinistre.models",
        "description": "sinistre.models",
        "isExtraImport": true,
        "detail": "sinistre.models",
        "documentation": {}
    },
    {
        "label": "SinistreTemporaire",
        "importPath": "sinistre.models",
        "description": "sinistre.models",
        "isExtraImport": true,
        "detail": "sinistre.models",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "sinistre.models",
        "description": "sinistre.models",
        "isExtraImport": true,
        "detail": "sinistre.models",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "transaction",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "connection",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "transaction",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "transaction",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "connection",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "transaction",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "transaction",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "transaction",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "transaction",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "transaction",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "send_mail",
        "importPath": "django.core.mail",
        "description": "django.core.mail",
        "isExtraImport": true,
        "detail": "django.core.mail",
        "documentation": {}
    },
    {
        "label": "EmailMessage",
        "importPath": "django.core.mail",
        "description": "django.core.mail",
        "isExtraImport": true,
        "detail": "django.core.mail",
        "documentation": {}
    },
    {
        "label": "send_mail",
        "importPath": "django.core.mail",
        "description": "django.core.mail",
        "isExtraImport": true,
        "detail": "django.core.mail",
        "documentation": {}
    },
    {
        "label": "send_mail",
        "importPath": "django.core.mail",
        "description": "django.core.mail",
        "isExtraImport": true,
        "detail": "django.core.mail",
        "documentation": {}
    },
    {
        "label": "send_mail",
        "importPath": "django.core.mail",
        "description": "django.core.mail",
        "isExtraImport": true,
        "detail": "django.core.mail",
        "documentation": {}
    },
    {
        "label": "send_mail",
        "importPath": "django.core.mail",
        "description": "django.core.mail",
        "isExtraImport": true,
        "detail": "django.core.mail",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "PageNumberPagination",
        "importPath": "rest_framework.pagination",
        "description": "rest_framework.pagination",
        "isExtraImport": true,
        "detail": "rest_framework.pagination",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "routers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "views",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "routers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "ModelSerializer",
        "importPath": "rest_framework.serializers",
        "description": "rest_framework.serializers",
        "isExtraImport": true,
        "detail": "rest_framework.serializers",
        "documentation": {}
    },
    {
        "label": "TokenObtainPairSerializer",
        "importPath": "rest_framework_simplejwt.serializers",
        "description": "rest_framework_simplejwt.serializers",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.serializers",
        "documentation": {}
    },
    {
        "label": "InfoActe",
        "importPath": "api.models",
        "description": "api.models",
        "isExtraImport": true,
        "detail": "api.models",
        "documentation": {}
    },
    {
        "label": "production.models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "production.models",
        "description": "production.models",
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "Aliment",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "Carte",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "Client",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "FormuleGarantie",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "Bareme",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "CarteDigitalDematerialisee",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "Aliment",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "AlimentFormule",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "Bareme",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "Carte",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "FormuleGarantie",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "CarteDigitalDematerialisee",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "Reglement",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "Reglement",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "StatutReversementCompagnie",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "Aliment",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "Operation",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "Aliment",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "Reglement",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "Police",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "Quittance",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "Operation",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "OperationReglement",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "MouvementPolice",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "Quittance",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "SecteurActivite",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "TypeDocument",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "TarifPrestataireClient",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "Mouvement",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "Motif",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "Client",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "TarifPrestataireClient",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "Client",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "Aliment",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "AlimentFormule",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "Mouvement",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "MouvementAliment",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "Aliment",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "AlimentFormule",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "Police",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "Police",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "FormuleGarantie",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "Aliment",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "Mouvement",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "Aliment",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "AlimentFormule",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "Bareme",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "Document",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "FormuleGarantie",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "Mouvement",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "Carte",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "Aliment",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "AlimentFormule",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "Carte",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "Aliment",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "AlimentFormule",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "Carte",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "Aliment",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "AlimentFormule",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "Carte",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "Carte",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "Aliment",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "Carte",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "Aliment",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "AlimentFormule",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "MouvementAliment",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "Quittance",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "ApporteurPolice",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "Carte",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "Aliment",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "AlimentFormule",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "MouvementAliment",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "Quittance",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "ApporteurPolice",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "Reglement",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "Carte",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "Aliment",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "AlimentFormule",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "MouvementAliment",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "Aliment",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "Police",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "Carte",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "Aliment",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "AlimentFormule",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "Police",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "Aliment",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "Contact",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "Filiale",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "Acompte",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "Document",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "Aliment",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "Police",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "Aliment",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "AlimentFormule",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "Carte",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "Mouvement",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "MouvementAliment",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "FormuleGarantie",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "FormuleRubriquePrefinance",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "ModePrefinancement",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "Motif",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "Mouvement",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "Aliment",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "Client",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "Police",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "Aliment",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "TarifPrestataireClient",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "Bareme",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "AlimentFormule",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "Carte",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "FormuleGarantie",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "Aliment",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "TarifPrestataireClient",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "Bareme",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "AlimentFormule",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "Carte",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "Aliment",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "Client",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "Mouvement",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "Police",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "MouvementPolice",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "Motif",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "FormuleGarantie",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "AlimentFormule",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "MouvementPolice",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "Reglement",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "Quittance",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "ApporteurPolice",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "TypeDocument",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "Aliment",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "Police",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "PeriodeCouverture",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "FormuleGarantie",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "Bareme",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "Client",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "Carte",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "Aliment",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "Statut",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "TypeDocument",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "Bareme",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "Client",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "Police",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "AlimentFormule",
        "importPath": "production.models",
        "description": "production.models",
        "isExtraImport": true,
        "detail": "production.models",
        "documentation": {}
    },
    {
        "label": "Prospect",
        "importPath": "grh.models",
        "description": "grh.models",
        "isExtraImport": true,
        "detail": "grh.models",
        "documentation": {}
    },
    {
        "label": "CampagneAppmobile",
        "importPath": "grh.models",
        "description": "grh.models",
        "isExtraImport": true,
        "detail": "grh.models",
        "documentation": {}
    },
    {
        "label": "CampagneAppmobileProspect",
        "importPath": "grh.models",
        "description": "grh.models",
        "isExtraImport": true,
        "detail": "grh.models",
        "documentation": {}
    },
    {
        "label": "Campagne",
        "importPath": "grh.models",
        "description": "grh.models",
        "isExtraImport": true,
        "detail": "grh.models",
        "documentation": {}
    },
    {
        "label": "CampagneProspect",
        "importPath": "grh.models",
        "description": "grh.models",
        "isExtraImport": true,
        "detail": "grh.models",
        "documentation": {}
    },
    {
        "label": "Prospect",
        "importPath": "grh.models",
        "description": "grh.models",
        "isExtraImport": true,
        "detail": "grh.models",
        "documentation": {}
    },
    {
        "label": "CampagneAppmobileProspect",
        "importPath": "grh.models",
        "description": "grh.models",
        "isExtraImport": true,
        "detail": "grh.models",
        "documentation": {}
    },
    {
        "label": "CampagneAppmobile",
        "importPath": "grh.models",
        "description": "grh.models",
        "isExtraImport": true,
        "detail": "grh.models",
        "documentation": {}
    },
    {
        "label": "Prospect",
        "importPath": "grh.models",
        "description": "grh.models",
        "isExtraImport": true,
        "detail": "grh.models",
        "documentation": {}
    },
    {
        "label": "Campagne",
        "importPath": "grh.models",
        "description": "grh.models",
        "isExtraImport": true,
        "detail": "grh.models",
        "documentation": {}
    },
    {
        "label": "CampagneProspect",
        "importPath": "grh.models",
        "description": "grh.models",
        "isExtraImport": true,
        "detail": "grh.models",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse_lazy",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "TokenObtainPairView",
        "importPath": "rest_framework_simplejwt.views",
        "description": "rest_framework_simplejwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.views",
        "documentation": {}
    },
    {
        "label": "TokenRefreshView",
        "importPath": "rest_framework_simplejwt.views",
        "description": "rest_framework_simplejwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.views",
        "documentation": {}
    },
    {
        "label": "TokenObtainPairView",
        "importPath": "rest_framework_simplejwt.views",
        "description": "rest_framework_simplejwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.views",
        "documentation": {}
    },
    {
        "label": "TokenObtainPairView",
        "importPath": "rest_framework_simplejwt.views",
        "description": "rest_framework_simplejwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.views",
        "documentation": {}
    },
    {
        "label": "TokenRefreshView",
        "importPath": "rest_framework_simplejwt.views",
        "description": "rest_framework_simplejwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.views",
        "documentation": {}
    },
    {
        "label": "TokenVerifyView",
        "importPath": "rest_framework_simplejwt.views",
        "description": "rest_framework_simplejwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.views",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "api.views",
        "description": "api.views",
        "isExtraImport": true,
        "detail": "api.views",
        "documentation": {}
    },
    {
        "label": "pprint",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pprint",
        "description": "pprint",
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "Date",
        "importPath": "sqlite3",
        "description": "sqlite3",
        "isExtraImport": true,
        "detail": "sqlite3",
        "documentation": {}
    },
    {
        "label": "Date",
        "importPath": "sqlite3",
        "description": "sqlite3",
        "isExtraImport": true,
        "detail": "sqlite3",
        "documentation": {}
    },
    {
        "label": "Date",
        "importPath": "sqlite3",
        "description": "sqlite3",
        "isExtraImport": true,
        "detail": "sqlite3",
        "documentation": {}
    },
    {
        "label": "Date",
        "importPath": "sqlite3",
        "description": "sqlite3",
        "isExtraImport": true,
        "detail": "sqlite3",
        "documentation": {}
    },
    {
        "label": "Date",
        "importPath": "sqlite3",
        "description": "sqlite3",
        "isExtraImport": true,
        "detail": "sqlite3",
        "documentation": {}
    },
    {
        "label": "Date",
        "importPath": "sqlite3",
        "description": "sqlite3",
        "isExtraImport": true,
        "detail": "sqlite3",
        "documentation": {}
    },
    {
        "label": "Date",
        "importPath": "sqlite3",
        "description": "sqlite3",
        "isExtraImport": true,
        "detail": "sqlite3",
        "documentation": {}
    },
    {
        "label": "Date",
        "importPath": "sqlite3",
        "description": "sqlite3",
        "isExtraImport": true,
        "detail": "sqlite3",
        "documentation": {}
    },
    {
        "label": "Date",
        "importPath": "sqlite3",
        "description": "sqlite3",
        "isExtraImport": true,
        "detail": "sqlite3",
        "documentation": {}
    },
    {
        "label": "pyotp",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pyotp",
        "description": "pyotp",
        "detail": "pyotp",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "login",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "login",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "logout",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "FileSystemStorage",
        "importPath": "django.core.files.storage",
        "description": "django.core.files.storage",
        "isExtraImport": true,
        "detail": "django.core.files.storage",
        "documentation": {}
    },
    {
        "label": "FileSystemStorage",
        "importPath": "django.core.files.storage",
        "description": "django.core.files.storage",
        "isExtraImport": true,
        "detail": "django.core.files.storage",
        "documentation": {}
    },
    {
        "label": "FileSystemStorage",
        "importPath": "django.core.files.storage",
        "description": "django.core.files.storage",
        "isExtraImport": true,
        "detail": "django.core.files.storage",
        "documentation": {}
    },
    {
        "label": "FileSystemStorage",
        "importPath": "django.core.files.storage",
        "description": "django.core.files.storage",
        "isExtraImport": true,
        "detail": "django.core.files.storage",
        "documentation": {}
    },
    {
        "label": "default_storage",
        "importPath": "django.core.files.storage",
        "description": "django.core.files.storage",
        "isExtraImport": true,
        "detail": "django.core.files.storage",
        "documentation": {}
    },
    {
        "label": "FileSystemStorage",
        "importPath": "django.core.files.storage",
        "description": "django.core.files.storage",
        "isExtraImport": true,
        "detail": "django.core.files.storage",
        "documentation": {}
    },
    {
        "label": "FileSystemStorage",
        "importPath": "django.core.files.storage",
        "description": "django.core.files.storage",
        "isExtraImport": true,
        "detail": "django.core.files.storage",
        "documentation": {}
    },
    {
        "label": "Sum",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "OuterRef",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Subquery",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Sum",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Min",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Max",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Sum",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "DateTimeField",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Sum",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "ExpressionWrapper",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "F",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "DurationField",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Value",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Sum",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "F",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "ExpressionWrapper",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "DurationField",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Max",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Sum",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "OuterRef",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Subquery",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "ExpressionWrapper",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "F",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "DurationField",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "IntegerField",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Max",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Sum",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Sum",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Sum",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Sum",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Sum",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Value",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "F",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "MultiValueDictKeyError",
        "importPath": "django.utils.datastructures",
        "description": "django.utils.datastructures",
        "isExtraImport": true,
        "detail": "django.utils.datastructures",
        "documentation": {}
    },
    {
        "label": "MultiValueDictKeyError",
        "importPath": "django.utils.datastructures",
        "description": "django.utils.datastructures",
        "isExtraImport": true,
        "detail": "django.utils.datastructures",
        "documentation": {}
    },
    {
        "label": "MultiValueDictKeyError",
        "importPath": "django.utils.datastructures",
        "description": "django.utils.datastructures",
        "isExtraImport": true,
        "detail": "django.utils.datastructures",
        "documentation": {}
    },
    {
        "label": "method_decorator",
        "importPath": "django.utils.decorators",
        "description": "django.utils.decorators",
        "isExtraImport": true,
        "detail": "django.utils.decorators",
        "documentation": {}
    },
    {
        "label": "method_decorator",
        "importPath": "django.utils.decorators",
        "description": "django.utils.decorators",
        "isExtraImport": true,
        "detail": "django.utils.decorators",
        "documentation": {}
    },
    {
        "label": "method_decorator",
        "importPath": "django.utils.decorators",
        "description": "django.utils.decorators",
        "isExtraImport": true,
        "detail": "django.utils.decorators",
        "documentation": {}
    },
    {
        "label": "method_decorator",
        "importPath": "django.utils.decorators",
        "description": "django.utils.decorators",
        "isExtraImport": true,
        "detail": "django.utils.decorators",
        "documentation": {}
    },
    {
        "label": "method_decorator",
        "importPath": "django.utils.decorators",
        "description": "django.utils.decorators",
        "isExtraImport": true,
        "detail": "django.utils.decorators",
        "documentation": {}
    },
    {
        "label": "csrf_exempt",
        "importPath": "django.views.decorators.csrf",
        "description": "django.views.decorators.csrf",
        "isExtraImport": true,
        "detail": "django.views.decorators.csrf",
        "documentation": {}
    },
    {
        "label": "csrf_exempt",
        "importPath": "django.views.decorators.csrf",
        "description": "django.views.decorators.csrf",
        "isExtraImport": true,
        "detail": "django.views.decorators.csrf",
        "documentation": {}
    },
    {
        "label": "api_view",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "authentication_classes",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "permission_classes",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "rest_framework.generics",
        "description": "rest_framework.generics",
        "isExtraImport": true,
        "detail": "rest_framework.generics",
        "documentation": {}
    },
    {
        "label": "JSONParser",
        "importPath": "rest_framework.parsers",
        "description": "rest_framework.parsers",
        "isExtraImport": true,
        "detail": "rest_framework.parsers",
        "documentation": {}
    },
    {
        "label": "MultiPartParser",
        "importPath": "rest_framework.parsers",
        "description": "rest_framework.parsers",
        "isExtraImport": true,
        "detail": "rest_framework.parsers",
        "documentation": {}
    },
    {
        "label": "FormParser",
        "importPath": "rest_framework.parsers",
        "description": "rest_framework.parsers",
        "isExtraImport": true,
        "detail": "rest_framework.parsers",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "AllowAny",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "JWTAuthentication",
        "importPath": "rest_framework_simplejwt.authentication",
        "description": "rest_framework_simplejwt.authentication",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.authentication",
        "documentation": {}
    },
    {
        "label": "AccessToken",
        "importPath": "rest_framework_simplejwt.tokens",
        "description": "rest_framework_simplejwt.tokens",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.tokens",
        "documentation": {}
    },
    {
        "label": "RefreshToken",
        "importPath": "rest_framework_simplejwt.tokens",
        "description": "rest_framework_simplejwt.tokens",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.tokens",
        "documentation": {}
    },
    {
        "label": "send_otp_mail",
        "importPath": "api.api_helper",
        "description": "api.api_helper",
        "isExtraImport": true,
        "detail": "api.api_helper",
        "documentation": {}
    },
    {
        "label": "send_demande_rembours_mail",
        "importPath": "api.api_helper",
        "description": "api.api_helper",
        "isExtraImport": true,
        "detail": "api.api_helper",
        "documentation": {}
    },
    {
        "label": "send_cron_state_mail",
        "importPath": "api.api_helper",
        "description": "api.api_helper",
        "isExtraImport": true,
        "detail": "api.api_helper",
        "documentation": {}
    },
    {
        "label": "SmartResultsSetPagination",
        "importPath": "api.paginations",
        "description": "api.paginations",
        "isExtraImport": true,
        "detail": "api.paginations",
        "documentation": {}
    },
    {
        "label": "verify_sql_query",
        "importPath": "configurations.helper_config",
        "description": "configurations.helper_config",
        "isExtraImport": true,
        "detail": "configurations.helper_config",
        "documentation": {}
    },
    {
        "label": "execute_query",
        "importPath": "configurations.helper_config",
        "description": "configurations.helper_config",
        "isExtraImport": true,
        "detail": "configurations.helper_config",
        "documentation": {}
    },
    {
        "label": "create_query_background_task",
        "importPath": "configurations.helper_config",
        "description": "configurations.helper_config",
        "isExtraImport": true,
        "detail": "configurations.helper_config",
        "documentation": {}
    },
    {
        "label": "execute_query",
        "importPath": "configurations.helper_config",
        "description": "configurations.helper_config",
        "isExtraImport": true,
        "detail": "configurations.helper_config",
        "documentation": {}
    },
    {
        "label": "execute_query",
        "importPath": "configurations.helper_config",
        "description": "configurations.helper_config",
        "isExtraImport": true,
        "detail": "configurations.helper_config",
        "documentation": {}
    },
    {
        "label": "send_notification_background_task_mail",
        "importPath": "configurations.helper_config",
        "description": "configurations.helper_config",
        "isExtraImport": true,
        "detail": "configurations.helper_config",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "configurations.helper_config",
        "description": "configurations.helper_config",
        "isExtraImport": true,
        "detail": "configurations.helper_config",
        "documentation": {}
    },
    {
        "label": "execute_query",
        "importPath": "configurations.helper_config",
        "description": "configurations.helper_config",
        "isExtraImport": true,
        "detail": "configurations.helper_config",
        "documentation": {}
    },
    {
        "label": "send_notification_background_task_mail",
        "importPath": "configurations.helper_config",
        "description": "configurations.helper_config",
        "isExtraImport": true,
        "detail": "configurations.helper_config",
        "documentation": {}
    },
    {
        "label": "verify_sql_query",
        "importPath": "configurations.helper_config",
        "description": "configurations.helper_config",
        "isExtraImport": true,
        "detail": "configurations.helper_config",
        "documentation": {}
    },
    {
        "label": "send_notification_background_task_mail",
        "importPath": "configurations.helper_config",
        "description": "configurations.helper_config",
        "isExtraImport": true,
        "detail": "configurations.helper_config",
        "documentation": {}
    },
    {
        "label": "send_dev_notification_background_task_mail",
        "importPath": "configurations.helper_config",
        "description": "configurations.helper_config",
        "isExtraImport": true,
        "detail": "configurations.helper_config",
        "documentation": {}
    },
    {
        "label": "send_dev_notification_background_task_mail",
        "importPath": "configurations.helper_config",
        "description": "configurations.helper_config",
        "isExtraImport": true,
        "detail": "configurations.helper_config",
        "documentation": {}
    },
    {
        "label": "send_dev_notification_background_task_mail",
        "importPath": "configurations.helper_config",
        "description": "configurations.helper_config",
        "isExtraImport": true,
        "detail": "configurations.helper_config",
        "documentation": {}
    },
    {
        "label": "send_dev_notification_background_task_mail",
        "importPath": "configurations.helper_config",
        "description": "configurations.helper_config",
        "isExtraImport": true,
        "detail": "configurations.helper_config",
        "documentation": {}
    },
    {
        "label": "send_dev_notification_background_task_mail",
        "importPath": "configurations.helper_config",
        "description": "configurations.helper_config",
        "isExtraImport": true,
        "detail": "configurations.helper_config",
        "documentation": {}
    },
    {
        "label": "send_dev_notification_background_task_mail",
        "importPath": "configurations.helper_config",
        "description": "configurations.helper_config",
        "isExtraImport": true,
        "detail": "configurations.helper_config",
        "documentation": {}
    },
    {
        "label": "send_dev_notification_background_task_mail",
        "importPath": "configurations.helper_config",
        "description": "configurations.helper_config",
        "isExtraImport": true,
        "detail": "configurations.helper_config",
        "documentation": {}
    },
    {
        "label": "send_dev_notification_background_task_mail",
        "importPath": "configurations.helper_config",
        "description": "configurations.helper_config",
        "isExtraImport": true,
        "detail": "configurations.helper_config",
        "documentation": {}
    },
    {
        "label": "execute_query",
        "importPath": "configurations.helper_config",
        "description": "configurations.helper_config",
        "isExtraImport": true,
        "detail": "configurations.helper_config",
        "documentation": {}
    },
    {
        "label": "send_notification_background_task_mail",
        "importPath": "configurations.helper_config",
        "description": "configurations.helper_config",
        "isExtraImport": true,
        "detail": "configurations.helper_config",
        "documentation": {}
    },
    {
        "label": "execute_query",
        "importPath": "configurations.helper_config",
        "description": "configurations.helper_config",
        "isExtraImport": true,
        "detail": "configurations.helper_config",
        "documentation": {}
    },
    {
        "label": "execute_query",
        "importPath": "configurations.helper_config",
        "description": "configurations.helper_config",
        "isExtraImport": true,
        "detail": "configurations.helper_config",
        "documentation": {}
    },
    {
        "label": "create_query_background_task",
        "importPath": "configurations.helper_config",
        "description": "configurations.helper_config",
        "isExtraImport": true,
        "detail": "configurations.helper_config",
        "documentation": {}
    },
    {
        "label": "generate_uiid",
        "importPath": "grh.helper",
        "description": "grh.helper",
        "isExtraImport": true,
        "detail": "grh.helper",
        "documentation": {}
    },
    {
        "label": "get_tarif_acte_from_bareme",
        "importPath": "shared.helpers",
        "description": "shared.helpers",
        "isExtraImport": true,
        "detail": "shared.helpers",
        "documentation": {}
    },
    {
        "label": "generate_numero_carte",
        "importPath": "shared.helpers",
        "description": "shared.helpers",
        "isExtraImport": true,
        "detail": "shared.helpers",
        "documentation": {}
    },
    {
        "label": "generate_random_string",
        "importPath": "shared.helpers",
        "description": "shared.helpers",
        "isExtraImport": true,
        "detail": "shared.helpers",
        "documentation": {}
    },
    {
        "label": "render_pdf",
        "importPath": "shared.helpers",
        "description": "shared.helpers",
        "isExtraImport": true,
        "detail": "shared.helpers",
        "documentation": {}
    },
    {
        "label": "generer_qrcode_carte",
        "importPath": "shared.helpers",
        "description": "shared.helpers",
        "isExtraImport": true,
        "detail": "shared.helpers",
        "documentation": {}
    },
    {
        "label": "generer_qrcode_carte",
        "importPath": "shared.helpers",
        "description": "shared.helpers",
        "isExtraImport": true,
        "detail": "shared.helpers",
        "documentation": {}
    },
    {
        "label": "openai_complete",
        "importPath": "shared.helpers",
        "description": "shared.helpers",
        "isExtraImport": true,
        "detail": "shared.helpers",
        "documentation": {}
    },
    {
        "label": "generate_numero_famille_for_existing_aliment",
        "importPath": "shared.helpers",
        "description": "shared.helpers",
        "isExtraImport": true,
        "detail": "shared.helpers",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "shared.helpers",
        "description": "shared.helpers",
        "isExtraImport": true,
        "detail": "shared.helpers",
        "documentation": {}
    },
    {
        "label": "generate_numero_famille",
        "importPath": "shared.helpers",
        "description": "shared.helpers",
        "isExtraImport": true,
        "detail": "shared.helpers",
        "documentation": {}
    },
    {
        "label": "generer_nombre_famille_du_mois",
        "importPath": "shared.helpers",
        "description": "shared.helpers",
        "isExtraImport": true,
        "detail": "shared.helpers",
        "documentation": {}
    },
    {
        "label": "generer_qrcode_carte",
        "importPath": "shared.helpers",
        "description": "shared.helpers",
        "isExtraImport": true,
        "detail": "shared.helpers",
        "documentation": {}
    },
    {
        "label": "generer_qrcode_carte",
        "importPath": "shared.helpers",
        "description": "shared.helpers",
        "isExtraImport": true,
        "detail": "shared.helpers",
        "documentation": {}
    },
    {
        "label": "generer_qrcode_carte",
        "importPath": "shared.helpers",
        "description": "shared.helpers",
        "isExtraImport": true,
        "detail": "shared.helpers",
        "documentation": {}
    },
    {
        "label": "generer_qrcode_carte",
        "importPath": "shared.helpers",
        "description": "shared.helpers",
        "isExtraImport": true,
        "detail": "shared.helpers",
        "documentation": {}
    },
    {
        "label": "generer_qrcode_carte",
        "importPath": "shared.helpers",
        "description": "shared.helpers",
        "isExtraImport": true,
        "detail": "shared.helpers",
        "documentation": {}
    },
    {
        "label": "generer_qrcode_carte",
        "importPath": "shared.helpers",
        "description": "shared.helpers",
        "isExtraImport": true,
        "detail": "shared.helpers",
        "documentation": {}
    },
    {
        "label": "generer_qrcode_carte",
        "importPath": "shared.helpers",
        "description": "shared.helpers",
        "isExtraImport": true,
        "detail": "shared.helpers",
        "documentation": {}
    },
    {
        "label": "generer_qrcode_carte",
        "importPath": "shared.helpers",
        "description": "shared.helpers",
        "isExtraImport": true,
        "detail": "shared.helpers",
        "documentation": {}
    },
    {
        "label": "generer_qrcode_carte",
        "importPath": "shared.helpers",
        "description": "shared.helpers",
        "isExtraImport": true,
        "detail": "shared.helpers",
        "documentation": {}
    },
    {
        "label": "generate_numero_famille",
        "importPath": "shared.helpers",
        "description": "shared.helpers",
        "isExtraImport": true,
        "detail": "shared.helpers",
        "documentation": {}
    },
    {
        "label": "generer_nombre_famille_du_mois",
        "importPath": "shared.helpers",
        "description": "shared.helpers",
        "isExtraImport": true,
        "detail": "shared.helpers",
        "documentation": {}
    },
    {
        "label": "generer_numero_ordre",
        "importPath": "shared.helpers",
        "description": "shared.helpers",
        "isExtraImport": true,
        "detail": "shared.helpers",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "shared.helpers",
        "description": "shared.helpers",
        "isExtraImport": true,
        "detail": "shared.helpers",
        "documentation": {}
    },
    {
        "label": "generer_qrcode_carte",
        "importPath": "shared.helpers",
        "description": "shared.helpers",
        "isExtraImport": true,
        "detail": "shared.helpers",
        "documentation": {}
    },
    {
        "label": "generate_numero_famille",
        "importPath": "shared.helpers",
        "description": "shared.helpers",
        "isExtraImport": true,
        "detail": "shared.helpers",
        "documentation": {}
    },
    {
        "label": "generate_numero_carte",
        "importPath": "shared.helpers",
        "description": "shared.helpers",
        "isExtraImport": true,
        "detail": "shared.helpers",
        "documentation": {}
    },
    {
        "label": "render_pdf",
        "importPath": "shared.helpers",
        "description": "shared.helpers",
        "isExtraImport": true,
        "detail": "shared.helpers",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "shared.helpers",
        "description": "shared.helpers",
        "isExtraImport": true,
        "detail": "shared.helpers",
        "documentation": {}
    },
    {
        "label": "recalcule_montant_refacture_compagnie_et_client",
        "importPath": "shared.helpers",
        "description": "shared.helpers",
        "isExtraImport": true,
        "detail": "shared.helpers",
        "documentation": {}
    },
    {
        "label": "generate_random_string",
        "importPath": "shared.helpers",
        "description": "shared.helpers",
        "isExtraImport": true,
        "detail": "shared.helpers",
        "documentation": {}
    },
    {
        "label": "render_pdf",
        "importPath": "shared.helpers",
        "description": "shared.helpers",
        "isExtraImport": true,
        "detail": "shared.helpers",
        "documentation": {}
    },
    {
        "label": "bool_plafond_atteint",
        "importPath": "shared.helpers",
        "description": "shared.helpers",
        "isExtraImport": true,
        "detail": "shared.helpers",
        "documentation": {}
    },
    {
        "label": "get_tarif_acte_from_bareme",
        "importPath": "shared.helpers",
        "description": "shared.helpers",
        "isExtraImport": true,
        "detail": "shared.helpers",
        "documentation": {}
    },
    {
        "label": "api_send_sms",
        "importPath": "shared.helpers",
        "description": "shared.helpers",
        "isExtraImport": true,
        "detail": "shared.helpers",
        "documentation": {}
    },
    {
        "label": "render_pdf",
        "importPath": "shared.helpers",
        "description": "shared.helpers",
        "isExtraImport": true,
        "detail": "shared.helpers",
        "documentation": {}
    },
    {
        "label": "link_callback",
        "importPath": "shared.helpers",
        "description": "shared.helpers",
        "isExtraImport": true,
        "detail": "shared.helpers",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "shared.helpers",
        "description": "shared.helpers",
        "isExtraImport": true,
        "detail": "shared.helpers",
        "documentation": {}
    },
    {
        "label": "base_url",
        "importPath": "shared.sinistres_repository",
        "description": "shared.sinistres_repository",
        "isExtraImport": true,
        "detail": "shared.sinistres_repository",
        "documentation": {}
    },
    {
        "label": "get_retenue_selon_contexte",
        "importPath": "sinistre.helper_sinistre",
        "description": "sinistre.helper_sinistre",
        "isExtraImport": true,
        "detail": "sinistre.helper_sinistre",
        "documentation": {}
    },
    {
        "label": "requete_analyse_prime_compta",
        "importPath": "sinistre.helper_sinistre",
        "description": "sinistre.helper_sinistre",
        "isExtraImport": true,
        "detail": "sinistre.helper_sinistre",
        "documentation": {}
    },
    {
        "label": "requete_analyse_prime_compta",
        "importPath": "sinistre.helper_sinistre",
        "description": "sinistre.helper_sinistre",
        "isExtraImport": true,
        "detail": "sinistre.helper_sinistre",
        "documentation": {}
    },
    {
        "label": "requete_analyse_prime_compta_apporteur",
        "importPath": "sinistre.helper_sinistre",
        "description": "sinistre.helper_sinistre",
        "isExtraImport": true,
        "detail": "sinistre.helper_sinistre",
        "documentation": {}
    },
    {
        "label": "requete_analyse_prime_compta",
        "importPath": "sinistre.helper_sinistre",
        "description": "sinistre.helper_sinistre",
        "isExtraImport": true,
        "detail": "sinistre.helper_sinistre",
        "documentation": {}
    },
    {
        "label": "exportation_en_excel_avec_style",
        "importPath": "sinistre.helper_sinistre",
        "description": "sinistre.helper_sinistre",
        "isExtraImport": true,
        "detail": "sinistre.helper_sinistre",
        "documentation": {}
    },
    {
        "label": "requete_analyse_prime_compta",
        "importPath": "sinistre.helper_sinistre",
        "description": "sinistre.helper_sinistre",
        "isExtraImport": true,
        "detail": "sinistre.helper_sinistre",
        "documentation": {}
    },
    {
        "label": "requete_liste_paiement_sinistre_sante_entre_deux_dates",
        "importPath": "sinistre.helper_sinistre",
        "description": "sinistre.helper_sinistre",
        "isExtraImport": true,
        "detail": "sinistre.helper_sinistre",
        "documentation": {}
    },
    {
        "label": "exportation_en_excel_avec_style",
        "importPath": "sinistre.helper_sinistre",
        "description": "sinistre.helper_sinistre",
        "isExtraImport": true,
        "detail": "sinistre.helper_sinistre",
        "documentation": {}
    },
    {
        "label": "exportation_en_excel_avec_style_background_task",
        "importPath": "sinistre.helper_sinistre",
        "description": "sinistre.helper_sinistre",
        "isExtraImport": true,
        "detail": "sinistre.helper_sinistre",
        "documentation": {}
    },
    {
        "label": "exportation_en_excel_avec_style",
        "importPath": "sinistre.helper_sinistre",
        "description": "sinistre.helper_sinistre",
        "isExtraImport": true,
        "detail": "sinistre.helper_sinistre",
        "documentation": {}
    },
    {
        "label": "exportation_en_excel_avec_style_background_task",
        "importPath": "sinistre.helper_sinistre",
        "description": "sinistre.helper_sinistre",
        "isExtraImport": true,
        "detail": "sinistre.helper_sinistre",
        "documentation": {}
    },
    {
        "label": "load_backgroound_request_task",
        "importPath": "sinistre.helper_sinistre",
        "description": "sinistre.helper_sinistre",
        "isExtraImport": true,
        "detail": "sinistre.helper_sinistre",
        "documentation": {}
    },
    {
        "label": "get_retenue_selon_contexte",
        "importPath": "sinistre.helper_sinistre",
        "description": "sinistre.helper_sinistre",
        "isExtraImport": true,
        "detail": "sinistre.helper_sinistre",
        "documentation": {}
    },
    {
        "label": "get_retenue_selon_contexte",
        "importPath": "sinistre.helper_sinistre",
        "description": "sinistre.helper_sinistre",
        "isExtraImport": true,
        "detail": "sinistre.helper_sinistre",
        "documentation": {}
    },
    {
        "label": "exportation_en_excel_avec_style",
        "importPath": "sinistre.helper_sinistre",
        "description": "sinistre.helper_sinistre",
        "isExtraImport": true,
        "detail": "sinistre.helper_sinistre",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "sinistre.helper_sinistre",
        "description": "sinistre.helper_sinistre",
        "isExtraImport": true,
        "detail": "sinistre.helper_sinistre",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "custom_admin_site",
        "importPath": "admin_custom.admin",
        "description": "admin_custom.admin",
        "isExtraImport": true,
        "detail": "admin_custom.admin",
        "documentation": {}
    },
    {
        "label": "custom_admin_site",
        "importPath": "admin_custom.admin",
        "description": "admin_custom.admin",
        "isExtraImport": true,
        "detail": "admin_custom.admin",
        "documentation": {}
    },
    {
        "label": "custom_admin_site",
        "importPath": "admin_custom.admin",
        "description": "admin_custom.admin",
        "isExtraImport": true,
        "detail": "admin_custom.admin",
        "documentation": {}
    },
    {
        "label": "custom_admin_site",
        "importPath": "admin_custom.admin",
        "description": "admin_custom.admin",
        "isExtraImport": true,
        "detail": "admin_custom.admin",
        "documentation": {}
    },
    {
        "label": "BordereauOrdonnance",
        "importPath": "comptabilite.models",
        "description": "comptabilite.models",
        "isExtraImport": true,
        "detail": "comptabilite.models",
        "documentation": {}
    },
    {
        "label": "EncaissementCommission",
        "importPath": "comptabilite.models",
        "description": "comptabilite.models",
        "isExtraImport": true,
        "detail": "comptabilite.models",
        "documentation": {}
    },
    {
        "label": "ReglementApporteurs",
        "importPath": "comptabilite.models",
        "description": "comptabilite.models",
        "isExtraImport": true,
        "detail": "comptabilite.models",
        "documentation": {}
    },
    {
        "label": "BordereauOrdonnance",
        "importPath": "comptabilite.models",
        "description": "comptabilite.models",
        "isExtraImport": true,
        "detail": "comptabilite.models",
        "documentation": {}
    },
    {
        "label": "CompteComptable",
        "importPath": "comptabilite.models",
        "description": "comptabilite.models",
        "isExtraImport": true,
        "detail": "comptabilite.models",
        "documentation": {}
    },
    {
        "label": "EncaissementCommission",
        "importPath": "comptabilite.models",
        "description": "comptabilite.models",
        "isExtraImport": true,
        "detail": "comptabilite.models",
        "documentation": {}
    },
    {
        "label": "Journal",
        "importPath": "comptabilite.models",
        "description": "comptabilite.models",
        "isExtraImport": true,
        "detail": "comptabilite.models",
        "documentation": {}
    },
    {
        "label": "ReglementReverseCompagnie",
        "importPath": "comptabilite.models",
        "description": "comptabilite.models",
        "isExtraImport": true,
        "detail": "comptabilite.models",
        "documentation": {}
    },
    {
        "label": "EncaissementCommission",
        "importPath": "comptabilite.models",
        "description": "comptabilite.models",
        "isExtraImport": true,
        "detail": "comptabilite.models",
        "documentation": {}
    },
    {
        "label": "EncaissementCommission",
        "importPath": "comptabilite.models",
        "description": "comptabilite.models",
        "isExtraImport": true,
        "detail": "comptabilite.models",
        "documentation": {}
    },
    {
        "label": "literal_eval",
        "importPath": "ast",
        "description": "ast",
        "isExtraImport": true,
        "detail": "ast",
        "documentation": {}
    },
    {
        "label": "literal_eval",
        "importPath": "ast",
        "description": "ast",
        "isExtraImport": true,
        "detail": "ast",
        "documentation": {}
    },
    {
        "label": "literal_eval",
        "importPath": "ast",
        "description": "ast",
        "isExtraImport": true,
        "detail": "ast",
        "documentation": {}
    },
    {
        "label": "literal_eval",
        "importPath": "ast",
        "description": "ast",
        "isExtraImport": true,
        "detail": "ast",
        "documentation": {}
    },
    {
        "label": "calendar",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "calendar",
        "description": "calendar",
        "detail": "calendar",
        "documentation": {}
    },
    {
        "label": "decimal",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "decimal",
        "description": "decimal",
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "reduce",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "reduce",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "locale",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "locale",
        "description": "locale",
        "detail": "locale",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "PyPDF2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "PyPDF2",
        "description": "PyPDF2",
        "detail": "PyPDF2",
        "documentation": {}
    },
    {
        "label": "openpyxl",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "openpyxl",
        "description": "openpyxl",
        "detail": "openpyxl",
        "documentation": {}
    },
    {
        "label": "Workbook",
        "importPath": "openpyxl",
        "description": "openpyxl",
        "isExtraImport": true,
        "detail": "openpyxl",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "django.core.files",
        "description": "django.core.files",
        "isExtraImport": true,
        "detail": "django.core.files",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "django.core.files",
        "description": "django.core.files",
        "isExtraImport": true,
        "detail": "django.core.files",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "django.core.files",
        "description": "django.core.files",
        "isExtraImport": true,
        "detail": "django.core.files",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "django.core.files",
        "description": "django.core.files",
        "isExtraImport": true,
        "detail": "django.core.files",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "django.core.files",
        "description": "django.core.files",
        "isExtraImport": true,
        "detail": "django.core.files",
        "documentation": {}
    },
    {
        "label": "FileResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "Http404",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseForbidden",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseRedirect",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseRedirect",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseRedirect",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseRedirect",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "FileResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "format_number",
        "importPath": "babel.numbers",
        "description": "babel.numbers",
        "isExtraImport": true,
        "detail": "babel.numbers",
        "documentation": {}
    },
    {
        "label": "NumberFormatError",
        "importPath": "babel.numbers",
        "description": "babel.numbers",
        "isExtraImport": true,
        "detail": "babel.numbers",
        "documentation": {}
    },
    {
        "label": "Paginator",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "Paginator",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "Paginator",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "Paginator",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "Paginator",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "inov",
        "description": "inov",
        "isExtraImport": true,
        "detail": "inov",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "inov",
        "description": "inov",
        "isExtraImport": true,
        "detail": "inov",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "inov",
        "description": "inov",
        "isExtraImport": true,
        "detail": "inov",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "inov",
        "description": "inov",
        "isExtraImport": true,
        "detail": "inov",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "inov",
        "description": "inov",
        "isExtraImport": true,
        "detail": "inov",
        "documentation": {}
    },
    {
        "label": "cron",
        "importPath": "inov",
        "description": "inov",
        "isExtraImport": true,
        "detail": "inov",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "inov",
        "description": "inov",
        "isExtraImport": true,
        "detail": "inov",
        "documentation": {}
    },
    {
        "label": "TemplateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "TemplateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "TemplateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "TemplateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "ListView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "TemplateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "ListView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "dd",
        "importPath": "django_dump_die.middleware",
        "description": "django_dump_die.middleware",
        "isExtraImport": true,
        "detail": "django_dump_die.middleware",
        "documentation": {}
    },
    {
        "label": "dd",
        "importPath": "django_dump_die.middleware",
        "description": "django_dump_die.middleware",
        "isExtraImport": true,
        "detail": "django_dump_die.middleware",
        "documentation": {}
    },
    {
        "label": "dd",
        "importPath": "django_dump_die.middleware",
        "description": "django_dump_die.middleware",
        "isExtraImport": true,
        "detail": "django_dump_die.middleware",
        "documentation": {}
    },
    {
        "label": "dd",
        "importPath": "django_dump_die.middleware",
        "description": "django_dump_die.middleware",
        "isExtraImport": true,
        "detail": "django_dump_die.middleware",
        "documentation": {}
    },
    {
        "label": "dd",
        "importPath": "django_dump_die.middleware",
        "description": "django_dump_die.middleware",
        "isExtraImport": true,
        "detail": "django_dump_die.middleware",
        "documentation": {}
    },
    {
        "label": "dd",
        "importPath": "django_dump_die.middleware",
        "description": "django_dump_die.middleware",
        "isExtraImport": true,
        "detail": "django_dump_die.middleware",
        "documentation": {}
    },
    {
        "label": "dd",
        "importPath": "django_dump_die.middleware",
        "description": "django_dump_die.middleware",
        "isExtraImport": true,
        "detail": "django_dump_die.middleware",
        "documentation": {}
    },
    {
        "label": "dd",
        "importPath": "django_dump_die.middleware",
        "description": "django_dump_die.middleware",
        "isExtraImport": true,
        "detail": "django_dump_die.middleware",
        "documentation": {}
    },
    {
        "label": "dd",
        "importPath": "django_dump_die.middleware",
        "description": "django_dump_die.middleware",
        "isExtraImport": true,
        "detail": "django_dump_die.middleware",
        "documentation": {}
    },
    {
        "label": "dd",
        "importPath": "django_dump_die.middleware",
        "description": "django_dump_die.middleware",
        "isExtraImport": true,
        "detail": "django_dump_die.middleware",
        "documentation": {}
    },
    {
        "label": "dd",
        "importPath": "django_dump_die.middleware",
        "description": "django_dump_die.middleware",
        "isExtraImport": true,
        "detail": "django_dump_die.middleware",
        "documentation": {}
    },
    {
        "label": "money_field",
        "importPath": "production.templatetags.my_filters",
        "description": "production.templatetags.my_filters",
        "isExtraImport": true,
        "detail": "production.templatetags.my_filters",
        "documentation": {}
    },
    {
        "label": "money_field",
        "importPath": "production.templatetags.my_filters",
        "description": "production.templatetags.my_filters",
        "isExtraImport": true,
        "detail": "production.templatetags.my_filters",
        "documentation": {}
    },
    {
        "label": "money_field",
        "importPath": "production.templatetags.my_filters",
        "description": "production.templatetags.my_filters",
        "isExtraImport": true,
        "detail": "production.templatetags.my_filters",
        "documentation": {}
    },
    {
        "label": "money_field",
        "importPath": "production.templatetags.my_filters",
        "description": "production.templatetags.my_filters",
        "isExtraImport": true,
        "detail": "production.templatetags.my_filters",
        "documentation": {}
    },
    {
        "label": "get_taux_euro_by_devise",
        "importPath": "shared.veos",
        "description": "shared.veos",
        "isExtraImport": true,
        "detail": "shared.veos",
        "documentation": {}
    },
    {
        "label": "import_sinistre_manuellement_cron",
        "importPath": "shared.veos",
        "description": "shared.veos",
        "isExtraImport": true,
        "detail": "shared.veos",
        "documentation": {}
    },
    {
        "label": "get_aliment_id_adoc",
        "importPath": "shared.veos",
        "description": "shared.veos",
        "isExtraImport": true,
        "detail": "shared.veos",
        "documentation": {}
    },
    {
        "label": "get_document",
        "importPath": "shared.veos",
        "description": "shared.veos",
        "isExtraImport": true,
        "detail": "shared.veos",
        "documentation": {}
    },
    {
        "label": "get_taux_euro_by_devise",
        "importPath": "shared.veos",
        "description": "shared.veos",
        "isExtraImport": true,
        "detail": "shared.veos",
        "documentation": {}
    },
    {
        "label": "get_taux_usd_by_devise",
        "importPath": "shared.veos",
        "description": "shared.veos",
        "isExtraImport": true,
        "detail": "shared.veos",
        "documentation": {}
    },
    {
        "label": "send_client_to_veos",
        "importPath": "shared.veos",
        "description": "shared.veos",
        "isExtraImport": true,
        "detail": "shared.veos",
        "documentation": {}
    },
    {
        "label": "get_taux_euro_by_devise",
        "importPath": "shared.veos",
        "description": "shared.veos",
        "isExtraImport": true,
        "detail": "shared.veos",
        "documentation": {}
    },
    {
        "label": "TruncMonth",
        "importPath": "django.db.models.functions",
        "description": "django.db.models.functions",
        "isExtraImport": true,
        "detail": "django.db.models.functions",
        "documentation": {}
    },
    {
        "label": "Concat",
        "importPath": "django.db.models.functions",
        "description": "django.db.models.functions",
        "isExtraImport": true,
        "detail": "django.db.models.functions",
        "documentation": {}
    },
    {
        "label": "Concat",
        "importPath": "django.db.models.functions",
        "description": "django.db.models.functions",
        "isExtraImport": true,
        "detail": "django.db.models.functions",
        "documentation": {}
    },
    {
        "label": "letter",
        "importPath": "reportlab.lib.pagesizes",
        "description": "reportlab.lib.pagesizes",
        "isExtraImport": true,
        "detail": "reportlab.lib.pagesizes",
        "documentation": {}
    },
    {
        "label": "canvas",
        "importPath": "reportlab.pdfgen",
        "description": "reportlab.pdfgen",
        "isExtraImport": true,
        "detail": "reportlab.pdfgen",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "CommandError",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "CommandError",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "CommandError",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "CommandError",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "CommandError",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "CommandError",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "CommandError",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "CommandError",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "CommandError",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "CommandError",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "CommandError",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "CommandError",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "CommandError",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "CommandError",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "CommandError",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "django.contrib.auth.validators",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.auth.validators",
        "description": "django.contrib.auth.validators",
        "detail": "django.contrib.auth.validators",
        "documentation": {}
    },
    {
        "label": "django.core.validators",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "MinValueValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "django.utils.timezone",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "make_aware",
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "isExtraImport": true,
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "UserAdmin",
        "importPath": "django.contrib.auth.admin",
        "description": "django.contrib.auth.admin",
        "isExtraImport": true,
        "detail": "django.contrib.auth.admin",
        "documentation": {}
    },
    {
        "label": "JSONEditorWidget",
        "importPath": "django_json_widget.widgets",
        "description": "django_json_widget.widgets",
        "isExtraImport": true,
        "detail": "django_json_widget.widgets",
        "documentation": {}
    },
    {
        "label": "ImportExportModelAdmin",
        "importPath": "import_export.admin",
        "description": "import_export.admin",
        "isExtraImport": true,
        "detail": "import_export.admin",
        "documentation": {}
    },
    {
        "label": "ImportExportModelAdmin",
        "importPath": "import_export.admin",
        "description": "import_export.admin",
        "isExtraImport": true,
        "detail": "import_export.admin",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "template",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "template",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "ActionLogForm",
        "importPath": "configurations.forms",
        "description": "configurations.forms",
        "isExtraImport": true,
        "detail": "configurations.forms",
        "documentation": {}
    },
    {
        "label": "PermissionForm",
        "importPath": "configurations.forms",
        "description": "configurations.forms",
        "isExtraImport": true,
        "detail": "configurations.forms",
        "documentation": {}
    },
    {
        "label": "RegroupementActeForm",
        "importPath": "configurations.forms",
        "description": "configurations.forms",
        "isExtraImport": true,
        "detail": "configurations.forms",
        "documentation": {}
    },
    {
        "label": "SousRubriqueForm",
        "importPath": "configurations.forms",
        "description": "configurations.forms",
        "isExtraImport": true,
        "detail": "configurations.forms",
        "documentation": {}
    },
    {
        "label": "StatExcelWsBobyForm",
        "importPath": "configurations.forms",
        "description": "configurations.forms",
        "isExtraImport": true,
        "detail": "configurations.forms",
        "documentation": {}
    },
    {
        "label": "TarifForm",
        "importPath": "configurations.forms",
        "description": "configurations.forms",
        "isExtraImport": true,
        "detail": "configurations.forms",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "configurations.forms",
        "description": "configurations.forms",
        "isExtraImport": true,
        "detail": "configurations.forms",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "django.core.files.base",
        "description": "django.core.files.base",
        "isExtraImport": true,
        "detail": "django.core.files.base",
        "documentation": {}
    },
    {
        "label": "ContentFile",
        "importPath": "django.core.files.base",
        "description": "django.core.files.base",
        "isExtraImport": true,
        "detail": "django.core.files.base",
        "documentation": {}
    },
    {
        "label": "ContentFile",
        "importPath": "django.core.files.base",
        "description": "django.core.files.base",
        "isExtraImport": true,
        "detail": "django.core.files.base",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "django.core.files.base",
        "description": "django.core.files.base",
        "isExtraImport": true,
        "detail": "django.core.files.base",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "django.core.files.base",
        "description": "django.core.files.base",
        "isExtraImport": true,
        "detail": "django.core.files.base",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "django.core.files.base",
        "description": "django.core.files.base",
        "isExtraImport": true,
        "detail": "django.core.files.base",
        "documentation": {}
    },
    {
        "label": "ContentFile",
        "importPath": "django.core.files.base",
        "description": "django.core.files.base",
        "isExtraImport": true,
        "detail": "django.core.files.base",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "django.core.files.base",
        "description": "django.core.files.base",
        "isExtraImport": true,
        "detail": "django.core.files.base",
        "documentation": {}
    },
    {
        "label": "MiddlewareMixin",
        "importPath": "django.utils.deprecation",
        "description": "django.utils.deprecation",
        "isExtraImport": true,
        "detail": "django.utils.deprecation",
        "documentation": {}
    },
    {
        "label": "mark_safe",
        "importPath": "django.utils.safestring",
        "description": "django.utils.safestring",
        "isExtraImport": true,
        "detail": "django.utils.safestring",
        "documentation": {}
    },
    {
        "label": "mark_safe",
        "importPath": "django.utils.safestring",
        "description": "django.utils.safestring",
        "isExtraImport": true,
        "detail": "django.utils.safestring",
        "documentation": {}
    },
    {
        "label": "slugify",
        "importPath": "django.utils.text",
        "description": "django.utils.text",
        "isExtraImport": true,
        "detail": "django.utils.text",
        "documentation": {}
    },
    {
        "label": "slugify",
        "importPath": "django.utils.text",
        "description": "django.utils.text",
        "isExtraImport": true,
        "detail": "django.utils.text",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "django_currentuser.middleware",
        "description": "django_currentuser.middleware",
        "isExtraImport": true,
        "detail": "django_currentuser.middleware",
        "documentation": {}
    },
    {
        "label": "get_current_authenticated_user",
        "importPath": "django_currentuser.middleware",
        "description": "django_currentuser.middleware",
        "isExtraImport": true,
        "detail": "django_currentuser.middleware",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ObjectDoesNotExist",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ObjectDoesNotExist",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ObjectDoesNotExist",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "resources",
        "importPath": "import_export",
        "description": "import_export",
        "isExtraImport": true,
        "detail": "import_export",
        "documentation": {}
    },
    {
        "label": "user_logged_in",
        "importPath": "django.contrib.auth.signals",
        "description": "django.contrib.auth.signals",
        "isExtraImport": true,
        "detail": "django.contrib.auth.signals",
        "documentation": {}
    },
    {
        "label": "receiver",
        "importPath": "django.dispatch",
        "description": "django.dispatch",
        "isExtraImport": true,
        "detail": "django.dispatch",
        "documentation": {}
    },
    {
        "label": "Signal",
        "importPath": "django.dispatch",
        "description": "django.dispatch",
        "isExtraImport": true,
        "detail": "django.dispatch",
        "documentation": {}
    },
    {
        "label": "veos",
        "importPath": "shared",
        "description": "shared",
        "isExtraImport": true,
        "detail": "shared",
        "documentation": {}
    },
    {
        "label": "veos",
        "importPath": "shared",
        "description": "shared",
        "isExtraImport": true,
        "detail": "shared",
        "documentation": {}
    },
    {
        "label": "PasswordChangeForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "PermissionRequiredMixin",
        "importPath": "django.contrib.auth.mixins",
        "description": "django.contrib.auth.mixins",
        "isExtraImport": true,
        "detail": "django.contrib.auth.mixins",
        "documentation": {}
    },
    {
        "label": "PermissionRequiredMixin",
        "importPath": "django.contrib.auth.mixins",
        "description": "django.contrib.auth.mixins",
        "isExtraImport": true,
        "detail": "django.contrib.auth.mixins",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "django.contrib.sessions.models",
        "description": "django.contrib.sessions.models",
        "isExtraImport": true,
        "detail": "django.contrib.sessions.models",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "django.core.cache",
        "description": "django.core.cache",
        "isExtraImport": true,
        "detail": "django.core.cache",
        "documentation": {}
    },
    {
        "label": "model_to_dict",
        "importPath": "django.forms",
        "description": "django.forms",
        "isExtraImport": true,
        "detail": "django.forms",
        "documentation": {}
    },
    {
        "label": "model_to_dict",
        "importPath": "django.forms",
        "description": "django.forms",
        "isExtraImport": true,
        "detail": "django.forms",
        "documentation": {}
    },
    {
        "label": "model_to_dict",
        "importPath": "django.forms",
        "description": "django.forms",
        "isExtraImport": true,
        "detail": "django.forms",
        "documentation": {}
    },
    {
        "label": "gettext",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "Font",
        "importPath": "openpyxl.styles",
        "description": "openpyxl.styles",
        "isExtraImport": true,
        "detail": "openpyxl.styles",
        "documentation": {}
    },
    {
        "label": "PatternFill",
        "importPath": "openpyxl.styles",
        "description": "openpyxl.styles",
        "isExtraImport": true,
        "detail": "openpyxl.styles",
        "documentation": {}
    },
    {
        "label": "Font",
        "importPath": "openpyxl.styles",
        "description": "openpyxl.styles",
        "isExtraImport": true,
        "detail": "openpyxl.styles",
        "documentation": {}
    },
    {
        "label": "PatternFill",
        "importPath": "openpyxl.styles",
        "description": "openpyxl.styles",
        "isExtraImport": true,
        "detail": "openpyxl.styles",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "secrets",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "secrets",
        "description": "secrets",
        "detail": "secrets",
        "documentation": {}
    },
    {
        "label": "get_template",
        "importPath": "django.template.loader",
        "description": "django.template.loader",
        "isExtraImport": true,
        "detail": "django.template.loader",
        "documentation": {}
    },
    {
        "label": "get_template",
        "importPath": "django.template.loader",
        "description": "django.template.loader",
        "isExtraImport": true,
        "detail": "django.template.loader",
        "documentation": {}
    },
    {
        "label": "get_template",
        "importPath": "django.template.loader",
        "description": "django.template.loader",
        "isExtraImport": true,
        "detail": "django.template.loader",
        "documentation": {}
    },
    {
        "label": "get_template",
        "importPath": "django.template.loader",
        "description": "django.template.loader",
        "isExtraImport": true,
        "detail": "django.template.loader",
        "documentation": {}
    },
    {
        "label": "get_template",
        "importPath": "django.template.loader",
        "description": "django.template.loader",
        "isExtraImport": true,
        "detail": "django.template.loader",
        "documentation": {}
    },
    {
        "label": "strip_tags",
        "importPath": "django.utils.html",
        "description": "django.utils.html",
        "isExtraImport": true,
        "detail": "django.utils.html",
        "documentation": {}
    },
    {
        "label": "format_html",
        "importPath": "django.utils.html",
        "description": "django.utils.html",
        "isExtraImport": true,
        "detail": "django.utils.html",
        "documentation": {}
    },
    {
        "label": "View",
        "importPath": "django.views",
        "description": "django.views",
        "isExtraImport": true,
        "detail": "django.views",
        "documentation": {}
    },
    {
        "label": "View",
        "importPath": "django.views",
        "description": "django.views",
        "isExtraImport": true,
        "detail": "django.views",
        "documentation": {}
    },
    {
        "label": "create_alimet_helper",
        "importPath": "production.helper_production",
        "description": "production.helper_production",
        "isExtraImport": true,
        "detail": "production.helper_production",
        "documentation": {}
    },
    {
        "label": "create_alimet_helper",
        "importPath": "production.helper_production",
        "description": "production.helper_production",
        "isExtraImport": true,
        "detail": "production.helper_production",
        "documentation": {}
    },
    {
        "label": "getAdherentsPrincipaux",
        "importPath": "production.views",
        "description": "production.views",
        "isExtraImport": true,
        "detail": "production.views",
        "documentation": {}
    },
    {
        "label": "PasswordResetView",
        "importPath": "django.contrib.auth.views",
        "description": "django.contrib.auth.views",
        "isExtraImport": true,
        "detail": "django.contrib.auth.views",
        "documentation": {}
    },
    {
        "label": "PasswordResetConfirmView",
        "importPath": "django.contrib.auth.views",
        "description": "django.contrib.auth.views",
        "isExtraImport": true,
        "detail": "django.contrib.auth.views",
        "documentation": {}
    },
    {
        "label": "PasswordResetCompleteView",
        "importPath": "django.contrib.auth.views",
        "description": "django.contrib.auth.views",
        "isExtraImport": true,
        "detail": "django.contrib.auth.views",
        "documentation": {}
    },
    {
        "label": "random_number_token",
        "importPath": "django_otp.util",
        "description": "django_otp.util",
        "isExtraImport": true,
        "detail": "django_otp.util",
        "documentation": {}
    },
    {
        "label": "intcomma",
        "importPath": "django.contrib.humanize.templatetags.humanize",
        "description": "django.contrib.humanize.templatetags.humanize",
        "isExtraImport": true,
        "detail": "django.contrib.humanize.templatetags.humanize",
        "documentation": {}
    },
    {
        "label": "intcomma",
        "importPath": "django.contrib.humanize.templatetags.humanize",
        "description": "django.contrib.humanize.templatetags.humanize",
        "isExtraImport": true,
        "detail": "django.contrib.humanize.templatetags.humanize",
        "documentation": {}
    },
    {
        "label": "intcomma",
        "importPath": "django.contrib.humanize.templatetags.humanize",
        "description": "django.contrib.humanize.templatetags.humanize",
        "isExtraImport": true,
        "detail": "django.contrib.humanize.templatetags.humanize",
        "documentation": {}
    },
    {
        "label": "intcomma",
        "importPath": "django.contrib.humanize.templatetags.humanize",
        "description": "django.contrib.humanize.templatetags.humanize",
        "isExtraImport": true,
        "detail": "django.contrib.humanize.templatetags.humanize",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "alert_consumption",
        "importPath": "comptabilite.views",
        "description": "comptabilite.views",
        "isExtraImport": true,
        "detail": "comptabilite.views",
        "documentation": {}
    },
    {
        "label": "create_periode_comptable",
        "importPath": "comptabilite.views",
        "description": "comptabilite.views",
        "isExtraImport": true,
        "detail": "comptabilite.views",
        "documentation": {}
    },
    {
        "label": "BordereauxOrdonnancesView",
        "importPath": "comptabilite.views",
        "description": "comptabilite.views",
        "isExtraImport": true,
        "detail": "comptabilite.views",
        "documentation": {}
    },
    {
        "label": "BordereauxPayesView",
        "importPath": "comptabilite.views",
        "description": "comptabilite.views",
        "isExtraImport": true,
        "detail": "comptabilite.views",
        "documentation": {}
    },
    {
        "label": "detail_bordereau_ordonnancement_datatable",
        "importPath": "comptabilite.views",
        "description": "comptabilite.views",
        "isExtraImport": true,
        "detail": "comptabilite.views",
        "documentation": {}
    },
    {
        "label": "environ",
        "importPath": "environ",
        "description": "environ",
        "isExtraImport": true,
        "detail": "environ",
        "documentation": {}
    },
    {
        "label": "environ",
        "importPath": "environ",
        "description": "environ",
        "isExtraImport": true,
        "detail": "environ",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "api",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "api",
        "description": "api",
        "detail": "api",
        "documentation": {}
    },
    {
        "label": "views",
        "importPath": "api",
        "description": "api",
        "isExtraImport": true,
        "detail": "api",
        "documentation": {}
    },
    {
        "label": "views",
        "importPath": "configurations",
        "description": "configurations",
        "isExtraImport": true,
        "detail": "configurations",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "base64",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "base64",
        "description": "base64",
        "detail": "base64",
        "documentation": {}
    },
    {
        "label": "num2words",
        "importPath": "num2words",
        "description": "num2words",
        "isExtraImport": true,
        "detail": "num2words",
        "documentation": {}
    },
    {
        "label": "num2words",
        "importPath": "num2words",
        "description": "num2words",
        "isExtraImport": true,
        "detail": "num2words",
        "documentation": {}
    },
    {
        "label": "ngettext",
        "importPath": "gettext",
        "description": "gettext",
        "isExtraImport": true,
        "detail": "gettext",
        "documentation": {}
    },
    {
        "label": "slugify",
        "importPath": "slugify",
        "description": "slugify",
        "isExtraImport": true,
        "detail": "slugify",
        "documentation": {}
    },
    {
        "label": "ClientForm",
        "importPath": "production.forms",
        "description": "production.forms",
        "isExtraImport": true,
        "detail": "production.forms",
        "documentation": {}
    },
    {
        "label": "PoliceForm",
        "importPath": "production.forms",
        "description": "production.forms",
        "isExtraImport": true,
        "detail": "production.forms",
        "documentation": {}
    },
    {
        "label": "ApporteurAdminForm",
        "importPath": "production.forms",
        "description": "production.forms",
        "isExtraImport": true,
        "detail": "production.forms",
        "documentation": {}
    },
    {
        "label": "ContactForm",
        "importPath": "production.forms",
        "description": "production.forms",
        "isExtraImport": true,
        "detail": "production.forms",
        "documentation": {}
    },
    {
        "label": "FilialeForm",
        "importPath": "production.forms",
        "description": "production.forms",
        "isExtraImport": true,
        "detail": "production.forms",
        "documentation": {}
    },
    {
        "label": "AcompteForm",
        "importPath": "production.forms",
        "description": "production.forms",
        "isExtraImport": true,
        "detail": "production.forms",
        "documentation": {}
    },
    {
        "label": "DocumentForm",
        "importPath": "production.forms",
        "description": "production.forms",
        "isExtraImport": true,
        "detail": "production.forms",
        "documentation": {}
    },
    {
        "label": "PoliceForm",
        "importPath": "production.forms",
        "description": "production.forms",
        "isExtraImport": true,
        "detail": "production.forms",
        "documentation": {}
    },
    {
        "label": "PhotoUploadForm",
        "importPath": "production.forms",
        "description": "production.forms",
        "isExtraImport": true,
        "detail": "production.forms",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "never_cache",
        "importPath": "django.views.decorators.cache",
        "description": "django.views.decorators.cache",
        "isExtraImport": true,
        "detail": "django.views.decorators.cache",
        "documentation": {}
    },
    {
        "label": "never_cache",
        "importPath": "django.views.decorators.cache",
        "description": "django.views.decorators.cache",
        "isExtraImport": true,
        "detail": "django.views.decorators.cache",
        "documentation": {}
    },
    {
        "label": "FPDF",
        "importPath": "fpdf",
        "description": "fpdf",
        "isExtraImport": true,
        "detail": "fpdf",
        "documentation": {}
    },
    {
        "label": "pisa",
        "importPath": "xhtml2pdf",
        "description": "xhtml2pdf",
        "isExtraImport": true,
        "detail": "xhtml2pdf",
        "documentation": {}
    },
    {
        "label": "pisa",
        "importPath": "xhtml2pdf",
        "description": "xhtml2pdf",
        "isExtraImport": true,
        "detail": "xhtml2pdf",
        "documentation": {}
    },
    {
        "label": "pisa",
        "importPath": "xhtml2pdf",
        "description": "xhtml2pdf",
        "isExtraImport": true,
        "detail": "xhtml2pdf",
        "documentation": {}
    },
    {
        "label": "pisa",
        "importPath": "xhtml2pdf",
        "description": "xhtml2pdf",
        "isExtraImport": true,
        "detail": "xhtml2pdf",
        "documentation": {}
    },
    {
        "label": "traceback",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "traceback",
        "description": "traceback",
        "detail": "traceback",
        "documentation": {}
    },
    {
        "label": "qrcode",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "qrcode",
        "description": "qrcode",
        "detail": "qrcode",
        "documentation": {}
    },
    {
        "label": "qrcode.image.svg",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "qrcode.image.svg",
        "description": "qrcode.image.svg",
        "detail": "qrcode.image.svg",
        "documentation": {}
    },
    {
        "label": "requests",
        "importPath": "django.contrib.sites",
        "description": "django.contrib.sites",
        "isExtraImport": true,
        "detail": "django.contrib.sites",
        "documentation": {}
    },
    {
        "label": "requests",
        "importPath": "django.contrib.sites",
        "description": "django.contrib.sites",
        "isExtraImport": true,
        "detail": "django.contrib.sites",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "finders",
        "importPath": "django.contrib.staticfiles",
        "description": "django.contrib.staticfiles",
        "isExtraImport": true,
        "detail": "django.contrib.staticfiles",
        "documentation": {}
    },
    {
        "label": "finders",
        "importPath": "django.contrib.staticfiles",
        "description": "django.contrib.staticfiles",
        "isExtraImport": true,
        "detail": "django.contrib.staticfiles",
        "documentation": {}
    },
    {
        "label": "unidecode",
        "importPath": "unidecode",
        "description": "unidecode",
        "isExtraImport": true,
        "detail": "unidecode",
        "documentation": {}
    },
    {
        "label": "deepcopy",
        "importPath": "copy",
        "description": "copy",
        "isExtraImport": true,
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "pymysql",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pymysql",
        "description": "pymysql",
        "detail": "pymysql",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len(\"bin\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.9/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "base = bin_dir[: -len(\"bin\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.9/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.9/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.9/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV_PROMPT\"]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.9/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in \"../lib/python3.9/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "cmd_doc",
        "kind": 5,
        "importPath": ".venv.bin.runxlrd",
        "description": ".venv.bin.runxlrd",
        "peekOfCode": "cmd_doc = \"\"\"\nCommands:\n2rows           Print the contents of first and last row in each sheet\n3rows           Print the contents of first, second and last row in each sheet\nbench           Same as \"show\", but doesn't print -- for profiling\nbiff_count[1]   Print a count of each type of BIFF record in the file\nbiff_dump[1]    Print a dump (char and hex) of the BIFF records in the file\nfonts           hdr + print a dump of all font objects\nhdr             Mini-overview of file (no per-sheet information)\nhotshot         Do a hotshot profile run e.g. ... -f1 hotshot bench bigfile*.xls",
        "detail": ".venv.bin.runxlrd",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": ".venv.bin.runxlrd",
        "description": ".venv.bin.runxlrd",
        "peekOfCode": "options = None\nif __name__ == \"__main__\":\n    import xlrd\n    import sys\n    import time\n    import glob\n    import traceback\n    import gc\n    from xlrd.timemachine import xrange, REPR\n    class LogHandler(object):",
        "detail": ".venv.bin.runxlrd",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.3d_drawing.mayavi2_spring",
        "description": ".venv.share.doc.networkx-2.6.3.examples.3d_drawing.mayavi2_spring",
        "peekOfCode": "H = nx.cycle_graph(20)\n# reorder nodes from 0,len(G)-1\nG = nx.convert_node_labels_to_integers(H)\n# 3d spring layout\npos = nx.spring_layout(G, dim=3, seed=1001)\n# numpy array of x,y,z positions in sorted node order\nxyz = np.array([pos[v] for v in sorted(G)])\n# scalar colors\nscalars = np.array(list(G.nodes())) + 5\nmlab.figure()",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.3d_drawing.mayavi2_spring",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.3d_drawing.mayavi2_spring",
        "description": ".venv.share.doc.networkx-2.6.3.examples.3d_drawing.mayavi2_spring",
        "peekOfCode": "G = nx.convert_node_labels_to_integers(H)\n# 3d spring layout\npos = nx.spring_layout(G, dim=3, seed=1001)\n# numpy array of x,y,z positions in sorted node order\nxyz = np.array([pos[v] for v in sorted(G)])\n# scalar colors\nscalars = np.array(list(G.nodes())) + 5\nmlab.figure()\npts = mlab.points3d(\n    xyz[:, 0],",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.3d_drawing.mayavi2_spring",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.3d_drawing.mayavi2_spring",
        "description": ".venv.share.doc.networkx-2.6.3.examples.3d_drawing.mayavi2_spring",
        "peekOfCode": "pos = nx.spring_layout(G, dim=3, seed=1001)\n# numpy array of x,y,z positions in sorted node order\nxyz = np.array([pos[v] for v in sorted(G)])\n# scalar colors\nscalars = np.array(list(G.nodes())) + 5\nmlab.figure()\npts = mlab.points3d(\n    xyz[:, 0],\n    xyz[:, 1],\n    xyz[:, 2],",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.3d_drawing.mayavi2_spring",
        "documentation": {}
    },
    {
        "label": "xyz",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.3d_drawing.mayavi2_spring",
        "description": ".venv.share.doc.networkx-2.6.3.examples.3d_drawing.mayavi2_spring",
        "peekOfCode": "xyz = np.array([pos[v] for v in sorted(G)])\n# scalar colors\nscalars = np.array(list(G.nodes())) + 5\nmlab.figure()\npts = mlab.points3d(\n    xyz[:, 0],\n    xyz[:, 1],\n    xyz[:, 2],\n    scalars,\n    scale_factor=0.1,",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.3d_drawing.mayavi2_spring",
        "documentation": {}
    },
    {
        "label": "scalars",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.3d_drawing.mayavi2_spring",
        "description": ".venv.share.doc.networkx-2.6.3.examples.3d_drawing.mayavi2_spring",
        "peekOfCode": "scalars = np.array(list(G.nodes())) + 5\nmlab.figure()\npts = mlab.points3d(\n    xyz[:, 0],\n    xyz[:, 1],\n    xyz[:, 2],\n    scalars,\n    scale_factor=0.1,\n    scale_mode=\"none\",\n    colormap=\"Blues\",",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.3d_drawing.mayavi2_spring",
        "documentation": {}
    },
    {
        "label": "pts",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.3d_drawing.mayavi2_spring",
        "description": ".venv.share.doc.networkx-2.6.3.examples.3d_drawing.mayavi2_spring",
        "peekOfCode": "pts = mlab.points3d(\n    xyz[:, 0],\n    xyz[:, 1],\n    xyz[:, 2],\n    scalars,\n    scale_factor=0.1,\n    scale_mode=\"none\",\n    colormap=\"Blues\",\n    resolution=20,\n)",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.3d_drawing.mayavi2_spring",
        "documentation": {}
    },
    {
        "label": "pts.mlab_source.dataset.lines",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.3d_drawing.mayavi2_spring",
        "description": ".venv.share.doc.networkx-2.6.3.examples.3d_drawing.mayavi2_spring",
        "peekOfCode": "pts.mlab_source.dataset.lines = np.array(list(G.edges()))\ntube = mlab.pipeline.tube(pts, tube_radius=0.01)\nmlab.pipeline.surface(tube, color=(0.8, 0.8, 0.8))\nmlab.orientation_axes()",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.3d_drawing.mayavi2_spring",
        "documentation": {}
    },
    {
        "label": "tube",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.3d_drawing.mayavi2_spring",
        "description": ".venv.share.doc.networkx-2.6.3.examples.3d_drawing.mayavi2_spring",
        "peekOfCode": "tube = mlab.pipeline.tube(pts, tube_radius=0.01)\nmlab.pipeline.surface(tube, color=(0.8, 0.8, 0.8))\nmlab.orientation_axes()",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.3d_drawing.mayavi2_spring",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.3d_drawing.plot_basic",
        "description": ".venv.share.doc.networkx-2.6.3.examples.3d_drawing.plot_basic",
        "peekOfCode": "G = nx.cycle_graph(20)\n# 3d spring layout\npos = nx.spring_layout(G, dim=3, seed=779)\n# Extract node and edge positions from the layout\nnode_xyz = np.array([pos[v] for v in sorted(G)])\nedge_xyz = np.array([(pos[u], pos[v]) for u, v in G.edges()])\n# Create the 3D figure\nfig = plt.figure()\nax = fig.add_subplot(111, projection=\"3d\")\n# Plot the nodes - alpha is scaled by \"depth\" automatically",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.3d_drawing.plot_basic",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.3d_drawing.plot_basic",
        "description": ".venv.share.doc.networkx-2.6.3.examples.3d_drawing.plot_basic",
        "peekOfCode": "pos = nx.spring_layout(G, dim=3, seed=779)\n# Extract node and edge positions from the layout\nnode_xyz = np.array([pos[v] for v in sorted(G)])\nedge_xyz = np.array([(pos[u], pos[v]) for u, v in G.edges()])\n# Create the 3D figure\nfig = plt.figure()\nax = fig.add_subplot(111, projection=\"3d\")\n# Plot the nodes - alpha is scaled by \"depth\" automatically\nax.scatter(*node_xyz.T, s=100, ec=\"w\")\n# Plot the edges",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.3d_drawing.plot_basic",
        "documentation": {}
    },
    {
        "label": "node_xyz",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.3d_drawing.plot_basic",
        "description": ".venv.share.doc.networkx-2.6.3.examples.3d_drawing.plot_basic",
        "peekOfCode": "node_xyz = np.array([pos[v] for v in sorted(G)])\nedge_xyz = np.array([(pos[u], pos[v]) for u, v in G.edges()])\n# Create the 3D figure\nfig = plt.figure()\nax = fig.add_subplot(111, projection=\"3d\")\n# Plot the nodes - alpha is scaled by \"depth\" automatically\nax.scatter(*node_xyz.T, s=100, ec=\"w\")\n# Plot the edges\nfor vizedge in edge_xyz:\n    ax.plot(*vizedge.T, color=\"tab:gray\")",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.3d_drawing.plot_basic",
        "documentation": {}
    },
    {
        "label": "edge_xyz",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.3d_drawing.plot_basic",
        "description": ".venv.share.doc.networkx-2.6.3.examples.3d_drawing.plot_basic",
        "peekOfCode": "edge_xyz = np.array([(pos[u], pos[v]) for u, v in G.edges()])\n# Create the 3D figure\nfig = plt.figure()\nax = fig.add_subplot(111, projection=\"3d\")\n# Plot the nodes - alpha is scaled by \"depth\" automatically\nax.scatter(*node_xyz.T, s=100, ec=\"w\")\n# Plot the edges\nfor vizedge in edge_xyz:\n    ax.plot(*vizedge.T, color=\"tab:gray\")\ndef _format_axes(ax):",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.3d_drawing.plot_basic",
        "documentation": {}
    },
    {
        "label": "fig",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.3d_drawing.plot_basic",
        "description": ".venv.share.doc.networkx-2.6.3.examples.3d_drawing.plot_basic",
        "peekOfCode": "fig = plt.figure()\nax = fig.add_subplot(111, projection=\"3d\")\n# Plot the nodes - alpha is scaled by \"depth\" automatically\nax.scatter(*node_xyz.T, s=100, ec=\"w\")\n# Plot the edges\nfor vizedge in edge_xyz:\n    ax.plot(*vizedge.T, color=\"tab:gray\")\ndef _format_axes(ax):\n    \"\"\"Visualization options for the 3D axes.\"\"\"\n    # Turn gridlines off",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.3d_drawing.plot_basic",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.3d_drawing.plot_basic",
        "description": ".venv.share.doc.networkx-2.6.3.examples.3d_drawing.plot_basic",
        "peekOfCode": "ax = fig.add_subplot(111, projection=\"3d\")\n# Plot the nodes - alpha is scaled by \"depth\" automatically\nax.scatter(*node_xyz.T, s=100, ec=\"w\")\n# Plot the edges\nfor vizedge in edge_xyz:\n    ax.plot(*vizedge.T, color=\"tab:gray\")\ndef _format_axes(ax):\n    \"\"\"Visualization options for the 3D axes.\"\"\"\n    # Turn gridlines off\n    ax.grid(False)",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.3d_drawing.plot_basic",
        "documentation": {}
    },
    {
        "label": "progressive_widening_search",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_beam_search",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_beam_search",
        "peekOfCode": "def progressive_widening_search(G, source, value, condition, initial_width=1):\n    \"\"\"Progressive widening beam search to find a node.\n    The progressive widening beam search involves a repeated beam\n    search, starting with a small beam width then extending to\n    progressively larger beam widths if the target node is not\n    found. This implementation simply returns the first node found that\n    matches the termination condition.\n    `G` is a NetworkX graph.\n    `source` is a node in the graph. The search for the node of interest\n    begins here and extends only to those nodes in the (weakly)",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "has_high_centrality",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_beam_search",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_beam_search",
        "peekOfCode": "def has_high_centrality(v):\n    return centrality[v] >= avg_centrality\nsource = 0\nvalue = centrality.get\ncondition = has_high_centrality\nfound_node = progressive_widening_search(G, source, value, condition)\nc = centrality[found_node]\nprint(f\"found node {found_node} with centrality {c}\")\n# Draw graph\npos = nx.spring_layout(G, seed=seed)",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "seed",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_beam_search",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_beam_search",
        "peekOfCode": "seed = 89\nG = nx.gnp_random_graph(100, 0.5, seed=seed)\ncentrality = nx.eigenvector_centrality(G)\navg_centrality = sum(centrality.values()) / len(G)\ndef has_high_centrality(v):\n    return centrality[v] >= avg_centrality\nsource = 0\nvalue = centrality.get\ncondition = has_high_centrality\nfound_node = progressive_widening_search(G, source, value, condition)",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_beam_search",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_beam_search",
        "peekOfCode": "G = nx.gnp_random_graph(100, 0.5, seed=seed)\ncentrality = nx.eigenvector_centrality(G)\navg_centrality = sum(centrality.values()) / len(G)\ndef has_high_centrality(v):\n    return centrality[v] >= avg_centrality\nsource = 0\nvalue = centrality.get\ncondition = has_high_centrality\nfound_node = progressive_widening_search(G, source, value, condition)\nc = centrality[found_node]",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "centrality",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_beam_search",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_beam_search",
        "peekOfCode": "centrality = nx.eigenvector_centrality(G)\navg_centrality = sum(centrality.values()) / len(G)\ndef has_high_centrality(v):\n    return centrality[v] >= avg_centrality\nsource = 0\nvalue = centrality.get\ncondition = has_high_centrality\nfound_node = progressive_widening_search(G, source, value, condition)\nc = centrality[found_node]\nprint(f\"found node {found_node} with centrality {c}\")",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "avg_centrality",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_beam_search",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_beam_search",
        "peekOfCode": "avg_centrality = sum(centrality.values()) / len(G)\ndef has_high_centrality(v):\n    return centrality[v] >= avg_centrality\nsource = 0\nvalue = centrality.get\ncondition = has_high_centrality\nfound_node = progressive_widening_search(G, source, value, condition)\nc = centrality[found_node]\nprint(f\"found node {found_node} with centrality {c}\")\n# Draw graph",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "source",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_beam_search",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_beam_search",
        "peekOfCode": "source = 0\nvalue = centrality.get\ncondition = has_high_centrality\nfound_node = progressive_widening_search(G, source, value, condition)\nc = centrality[found_node]\nprint(f\"found node {found_node} with centrality {c}\")\n# Draw graph\npos = nx.spring_layout(G, seed=seed)\noptions = {\n    \"node_color\": \"blue\",",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "value",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_beam_search",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_beam_search",
        "peekOfCode": "value = centrality.get\ncondition = has_high_centrality\nfound_node = progressive_widening_search(G, source, value, condition)\nc = centrality[found_node]\nprint(f\"found node {found_node} with centrality {c}\")\n# Draw graph\npos = nx.spring_layout(G, seed=seed)\noptions = {\n    \"node_color\": \"blue\",\n    \"node_size\": 20,",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "condition",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_beam_search",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_beam_search",
        "peekOfCode": "condition = has_high_centrality\nfound_node = progressive_widening_search(G, source, value, condition)\nc = centrality[found_node]\nprint(f\"found node {found_node} with centrality {c}\")\n# Draw graph\npos = nx.spring_layout(G, seed=seed)\noptions = {\n    \"node_color\": \"blue\",\n    \"node_size\": 20,\n    \"edge_color\": \"grey\",",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "found_node",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_beam_search",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_beam_search",
        "peekOfCode": "found_node = progressive_widening_search(G, source, value, condition)\nc = centrality[found_node]\nprint(f\"found node {found_node} with centrality {c}\")\n# Draw graph\npos = nx.spring_layout(G, seed=seed)\noptions = {\n    \"node_color\": \"blue\",\n    \"node_size\": 20,\n    \"edge_color\": \"grey\",\n    \"linewidths\": 0,",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_beam_search",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_beam_search",
        "peekOfCode": "c = centrality[found_node]\nprint(f\"found node {found_node} with centrality {c}\")\n# Draw graph\npos = nx.spring_layout(G, seed=seed)\noptions = {\n    \"node_color\": \"blue\",\n    \"node_size\": 20,\n    \"edge_color\": \"grey\",\n    \"linewidths\": 0,\n    \"width\": 0.1,",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_beam_search",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_beam_search",
        "peekOfCode": "pos = nx.spring_layout(G, seed=seed)\noptions = {\n    \"node_color\": \"blue\",\n    \"node_size\": 20,\n    \"edge_color\": \"grey\",\n    \"linewidths\": 0,\n    \"width\": 0.1,\n}\nnx.draw(G, pos, **options)\n# Draw node with high centrality as large and red",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_beam_search",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_beam_search",
        "peekOfCode": "options = {\n    \"node_color\": \"blue\",\n    \"node_size\": 20,\n    \"edge_color\": \"grey\",\n    \"linewidths\": 0,\n    \"width\": 0.1,\n}\nnx.draw(G, pos, **options)\n# Draw node with high centrality as large and red\nnx.draw_networkx_nodes(G, pos, nodelist=[found_node], node_size=100, node_color=\"r\")",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_betweenness_centrality",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "G = nx.read_edgelist(\"WormNet.v3.benchmark.txt\")\n# remove randomly selected nodes (to make example fast)\nnum_to_remove = int(len(G) / 1.5)\nnodes = sample(list(G.nodes), num_to_remove)\nG.remove_nodes_from(nodes)\n# remove low-degree nodes\nlow_degree = [n for n, d in G.degree() if d < 10]\nG.remove_nodes_from(low_degree)\n# largest connected component\ncomponents = nx.connected_components(G)",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "num_to_remove",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_betweenness_centrality",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "num_to_remove = int(len(G) / 1.5)\nnodes = sample(list(G.nodes), num_to_remove)\nG.remove_nodes_from(nodes)\n# remove low-degree nodes\nlow_degree = [n for n, d in G.degree() if d < 10]\nG.remove_nodes_from(low_degree)\n# largest connected component\ncomponents = nx.connected_components(G)\nlargest_component = max(components, key=len)\nH = G.subgraph(largest_component)",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "nodes",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_betweenness_centrality",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "nodes = sample(list(G.nodes), num_to_remove)\nG.remove_nodes_from(nodes)\n# remove low-degree nodes\nlow_degree = [n for n, d in G.degree() if d < 10]\nG.remove_nodes_from(low_degree)\n# largest connected component\ncomponents = nx.connected_components(G)\nlargest_component = max(components, key=len)\nH = G.subgraph(largest_component)\n# compute centrality",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "low_degree",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_betweenness_centrality",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "low_degree = [n for n, d in G.degree() if d < 10]\nG.remove_nodes_from(low_degree)\n# largest connected component\ncomponents = nx.connected_components(G)\nlargest_component = max(components, key=len)\nH = G.subgraph(largest_component)\n# compute centrality\ncentrality = nx.betweenness_centrality(H, k=10, endpoints=True)\n# compute community structure\nlpc = nx.community.label_propagation_communities(H)",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "components",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_betweenness_centrality",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "components = nx.connected_components(G)\nlargest_component = max(components, key=len)\nH = G.subgraph(largest_component)\n# compute centrality\ncentrality = nx.betweenness_centrality(H, k=10, endpoints=True)\n# compute community structure\nlpc = nx.community.label_propagation_communities(H)\ncommunity_index = {n: i for i, com in enumerate(lpc) for n in com}\n#### draw graph ####\nfig, ax = plt.subplots(figsize=(20, 15))",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "largest_component",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_betweenness_centrality",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "largest_component = max(components, key=len)\nH = G.subgraph(largest_component)\n# compute centrality\ncentrality = nx.betweenness_centrality(H, k=10, endpoints=True)\n# compute community structure\nlpc = nx.community.label_propagation_communities(H)\ncommunity_index = {n: i for i, com in enumerate(lpc) for n in com}\n#### draw graph ####\nfig, ax = plt.subplots(figsize=(20, 15))\npos = nx.spring_layout(H, k=0.15, seed=4572321)",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_betweenness_centrality",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "H = G.subgraph(largest_component)\n# compute centrality\ncentrality = nx.betweenness_centrality(H, k=10, endpoints=True)\n# compute community structure\nlpc = nx.community.label_propagation_communities(H)\ncommunity_index = {n: i for i, com in enumerate(lpc) for n in com}\n#### draw graph ####\nfig, ax = plt.subplots(figsize=(20, 15))\npos = nx.spring_layout(H, k=0.15, seed=4572321)\nnode_color = [community_index[n] for n in H]",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "centrality",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_betweenness_centrality",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "centrality = nx.betweenness_centrality(H, k=10, endpoints=True)\n# compute community structure\nlpc = nx.community.label_propagation_communities(H)\ncommunity_index = {n: i for i, com in enumerate(lpc) for n in com}\n#### draw graph ####\nfig, ax = plt.subplots(figsize=(20, 15))\npos = nx.spring_layout(H, k=0.15, seed=4572321)\nnode_color = [community_index[n] for n in H]\nnode_size = [v * 20000 for v in centrality.values()]\nnx.draw_networkx(",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "lpc",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_betweenness_centrality",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "lpc = nx.community.label_propagation_communities(H)\ncommunity_index = {n: i for i, com in enumerate(lpc) for n in com}\n#### draw graph ####\nfig, ax = plt.subplots(figsize=(20, 15))\npos = nx.spring_layout(H, k=0.15, seed=4572321)\nnode_color = [community_index[n] for n in H]\nnode_size = [v * 20000 for v in centrality.values()]\nnx.draw_networkx(\n    H,\n    pos=pos,",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "community_index",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_betweenness_centrality",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "community_index = {n: i for i, com in enumerate(lpc) for n in com}\n#### draw graph ####\nfig, ax = plt.subplots(figsize=(20, 15))\npos = nx.spring_layout(H, k=0.15, seed=4572321)\nnode_color = [community_index[n] for n in H]\nnode_size = [v * 20000 for v in centrality.values()]\nnx.draw_networkx(\n    H,\n    pos=pos,\n    with_labels=False,",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_betweenness_centrality",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "pos = nx.spring_layout(H, k=0.15, seed=4572321)\nnode_color = [community_index[n] for n in H]\nnode_size = [v * 20000 for v in centrality.values()]\nnx.draw_networkx(\n    H,\n    pos=pos,\n    with_labels=False,\n    node_color=node_color,\n    node_size=node_size,\n    edge_color=\"gainsboro\",",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "node_color",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_betweenness_centrality",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "node_color = [community_index[n] for n in H]\nnode_size = [v * 20000 for v in centrality.values()]\nnx.draw_networkx(\n    H,\n    pos=pos,\n    with_labels=False,\n    node_color=node_color,\n    node_size=node_size,\n    edge_color=\"gainsboro\",\n    alpha=0.4,",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "node_size",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_betweenness_centrality",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "node_size = [v * 20000 for v in centrality.values()]\nnx.draw_networkx(\n    H,\n    pos=pos,\n    with_labels=False,\n    node_color=node_color,\n    node_size=node_size,\n    edge_color=\"gainsboro\",\n    alpha=0.4,\n)",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "font",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_betweenness_centrality",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "font = {\"color\": \"k\", \"fontweight\": \"bold\", \"fontsize\": 20}\nax.set_title(\"Gene functional association network (C. elegans)\", font)\n# Change font color for legend\nfont[\"color\"] = \"r\"\nax.text(\n    0.80,\n    0.10,\n    \"node color = community structure\",\n    horizontalalignment=\"center\",\n    transform=ax.transAxes,",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "font[\"color\"]",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_betweenness_centrality",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "font[\"color\"] = \"r\"\nax.text(\n    0.80,\n    0.10,\n    \"node color = community structure\",\n    horizontalalignment=\"center\",\n    transform=ax.transAxes,\n    fontdict=font,\n)\nax.text(",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "create_hc",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_blockmodel",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_blockmodel",
        "peekOfCode": "def create_hc(G):\n    \"\"\"Creates hierarchical cluster of graph G from distance matrix\"\"\"\n    path_length = nx.all_pairs_shortest_path_length(G)\n    distances = np.zeros((len(G), len(G)))\n    for u, p in path_length:\n        for v, d in p.items():\n            distances[u][v] = d\n    # Create hierarchical cluster\n    Y = distance.squareform(distances)\n    Z = hierarchy.complete(Y)  # Creates HC using farthest point linkage",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_blockmodel",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_blockmodel",
        "peekOfCode": "G = nx.read_edgelist(\"hartford_drug.edgelist\")\n# Extract largest connected component into graph H\nH = G.subgraph(next(nx.connected_components(G)))\n# Makes life easier to have consecutively labeled integer nodes\nH = nx.convert_node_labels_to_integers(H)\n# Create parititions with hierarchical clustering\npartitions = create_hc(H)\n# Build blockmodel graph\nBM = nx.quotient_graph(H, partitions, relabel=True)\n# Draw original graph",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_blockmodel",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_blockmodel",
        "peekOfCode": "H = G.subgraph(next(nx.connected_components(G)))\n# Makes life easier to have consecutively labeled integer nodes\nH = nx.convert_node_labels_to_integers(H)\n# Create parititions with hierarchical clustering\npartitions = create_hc(H)\n# Build blockmodel graph\nBM = nx.quotient_graph(H, partitions, relabel=True)\n# Draw original graph\npos = nx.spring_layout(H, iterations=100, seed=83)  # Seed for reproducibility\nplt.subplot(211)",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_blockmodel",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_blockmodel",
        "peekOfCode": "H = nx.convert_node_labels_to_integers(H)\n# Create parititions with hierarchical clustering\npartitions = create_hc(H)\n# Build blockmodel graph\nBM = nx.quotient_graph(H, partitions, relabel=True)\n# Draw original graph\npos = nx.spring_layout(H, iterations=100, seed=83)  # Seed for reproducibility\nplt.subplot(211)\nnx.draw(H, pos, with_labels=False, node_size=10)\n# Draw block model with weighted edges and nodes sized by number of internal nodes",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "partitions",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_blockmodel",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_blockmodel",
        "peekOfCode": "partitions = create_hc(H)\n# Build blockmodel graph\nBM = nx.quotient_graph(H, partitions, relabel=True)\n# Draw original graph\npos = nx.spring_layout(H, iterations=100, seed=83)  # Seed for reproducibility\nplt.subplot(211)\nnx.draw(H, pos, with_labels=False, node_size=10)\n# Draw block model with weighted edges and nodes sized by number of internal nodes\nnode_size = [BM.nodes[x][\"nnodes\"] * 10 for x in BM.nodes()]\nedge_width = [(2 * d[\"weight\"]) for (u, v, d) in BM.edges(data=True)]",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "BM",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_blockmodel",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_blockmodel",
        "peekOfCode": "BM = nx.quotient_graph(H, partitions, relabel=True)\n# Draw original graph\npos = nx.spring_layout(H, iterations=100, seed=83)  # Seed for reproducibility\nplt.subplot(211)\nnx.draw(H, pos, with_labels=False, node_size=10)\n# Draw block model with weighted edges and nodes sized by number of internal nodes\nnode_size = [BM.nodes[x][\"nnodes\"] * 10 for x in BM.nodes()]\nedge_width = [(2 * d[\"weight\"]) for (u, v, d) in BM.edges(data=True)]\n# Set positions to mean of positions of internal nodes from original graph\nposBM = {}",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_blockmodel",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_blockmodel",
        "peekOfCode": "pos = nx.spring_layout(H, iterations=100, seed=83)  # Seed for reproducibility\nplt.subplot(211)\nnx.draw(H, pos, with_labels=False, node_size=10)\n# Draw block model with weighted edges and nodes sized by number of internal nodes\nnode_size = [BM.nodes[x][\"nnodes\"] * 10 for x in BM.nodes()]\nedge_width = [(2 * d[\"weight\"]) for (u, v, d) in BM.edges(data=True)]\n# Set positions to mean of positions of internal nodes from original graph\nposBM = {}\nfor n in BM:\n    xy = np.array([pos[u] for u in BM.nodes[n][\"graph\"]])",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "node_size",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_blockmodel",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_blockmodel",
        "peekOfCode": "node_size = [BM.nodes[x][\"nnodes\"] * 10 for x in BM.nodes()]\nedge_width = [(2 * d[\"weight\"]) for (u, v, d) in BM.edges(data=True)]\n# Set positions to mean of positions of internal nodes from original graph\nposBM = {}\nfor n in BM:\n    xy = np.array([pos[u] for u in BM.nodes[n][\"graph\"]])\n    posBM[n] = xy.mean(axis=0)\nplt.subplot(212)\nnx.draw(BM, posBM, node_size=node_size, width=edge_width, with_labels=False)\nplt.axis(\"off\")",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "edge_width",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_blockmodel",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_blockmodel",
        "peekOfCode": "edge_width = [(2 * d[\"weight\"]) for (u, v, d) in BM.edges(data=True)]\n# Set positions to mean of positions of internal nodes from original graph\nposBM = {}\nfor n in BM:\n    xy = np.array([pos[u] for u in BM.nodes[n][\"graph\"]])\n    posBM[n] = xy.mean(axis=0)\nplt.subplot(212)\nnx.draw(BM, posBM, node_size=node_size, width=edge_width, with_labels=False)\nplt.axis(\"off\")\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "posBM",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_blockmodel",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_blockmodel",
        "peekOfCode": "posBM = {}\nfor n in BM:\n    xy = np.array([pos[u] for u in BM.nodes[n][\"graph\"]])\n    posBM[n] = xy.mean(axis=0)\nplt.subplot(212)\nnx.draw(BM, posBM, node_size=node_size, width=edge_width, with_labels=False)\nplt.axis(\"off\")\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "circuit_to_formula",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_circuits",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_circuits",
        "peekOfCode": "def circuit_to_formula(circuit):\n    # Convert the circuit to an equivalent formula.\n    formula = nx.dag_to_branching(circuit)\n    # Transfer the operator or variable labels for each node from the\n    # circuit to the formula.\n    for v in formula:\n        source = formula.nodes[v][\"source\"]\n        formula.nodes[v][\"label\"] = circuit.nodes[source][\"label\"]\n    return formula\ndef formula_to_string(formula):",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_circuits",
        "documentation": {}
    },
    {
        "label": "formula_to_string",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_circuits",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_circuits",
        "peekOfCode": "def formula_to_string(formula):\n    def _to_string(formula, root):\n        # If there are no children, this is a variable node.\n        label = formula.nodes[root][\"label\"]\n        if not formula[root]:\n            return label\n        # Otherwise, this is an operator.\n        children = formula[root]\n        # If one child, the label must be a NOT operator.\n        if len(children) == 1:",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_circuits",
        "documentation": {}
    },
    {
        "label": "circuit",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_circuits",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_circuits",
        "peekOfCode": "circuit = nx.DiGraph()\n# Layer 0\ncircuit.add_node(0, label=\"∧\", layer=0)\n# Layer 1\ncircuit.add_node(1, label=\"∨\", layer=1)\ncircuit.add_node(2, label=\"∨\", layer=1)\ncircuit.add_edge(0, 1)\ncircuit.add_edge(0, 2)\n# Layer 2\ncircuit.add_node(3, label=\"x\", layer=2)",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_circuits",
        "documentation": {}
    },
    {
        "label": "formula",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_circuits",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_circuits",
        "peekOfCode": "formula = circuit_to_formula(circuit)\nprint(formula_to_string(formula))\nlabels = nx.get_node_attributes(circuit, \"label\")\noptions = {\n    \"node_size\": 600,\n    \"alpha\": 0.5,\n    \"node_color\": \"blue\",\n    \"labels\": labels,\n    \"font_size\": 22,\n}",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_circuits",
        "documentation": {}
    },
    {
        "label": "labels",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_circuits",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_circuits",
        "peekOfCode": "labels = nx.get_node_attributes(circuit, \"label\")\noptions = {\n    \"node_size\": 600,\n    \"alpha\": 0.5,\n    \"node_color\": \"blue\",\n    \"labels\": labels,\n    \"font_size\": 22,\n}\nplt.figure(figsize=(8, 8))\npos = nx.multipartite_layout(circuit, subset_key=\"layer\")",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_circuits",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_circuits",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_circuits",
        "peekOfCode": "options = {\n    \"node_size\": 600,\n    \"alpha\": 0.5,\n    \"node_color\": \"blue\",\n    \"labels\": labels,\n    \"font_size\": 22,\n}\nplt.figure(figsize=(8, 8))\npos = nx.multipartite_layout(circuit, subset_key=\"layer\")\nnx.draw_networkx(circuit, pos, **options)",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_circuits",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_circuits",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_circuits",
        "peekOfCode": "pos = nx.multipartite_layout(circuit, subset_key=\"layer\")\nnx.draw_networkx(circuit, pos, **options)\nplt.title(formula_to_string(formula))\nplt.axis(\"equal\")\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_circuits",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_davis_club",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_davis_club",
        "peekOfCode": "G = nx.davis_southern_women_graph()\nwomen = G.graph[\"top\"]\nclubs = G.graph[\"bottom\"]\nprint(\"Biadjacency matrix\")\nprint(bipartite.biadjacency_matrix(G, women, clubs))\n# project bipartite graph onto women nodes\nW = bipartite.projected_graph(G, women)\nprint()\nprint(\"#Friends, Member\")\nfor w in women:",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_davis_club",
        "documentation": {}
    },
    {
        "label": "women",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_davis_club",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_davis_club",
        "peekOfCode": "women = G.graph[\"top\"]\nclubs = G.graph[\"bottom\"]\nprint(\"Biadjacency matrix\")\nprint(bipartite.biadjacency_matrix(G, women, clubs))\n# project bipartite graph onto women nodes\nW = bipartite.projected_graph(G, women)\nprint()\nprint(\"#Friends, Member\")\nfor w in women:\n    print(f\"{W.degree(w)} {w}\")",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_davis_club",
        "documentation": {}
    },
    {
        "label": "clubs",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_davis_club",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_davis_club",
        "peekOfCode": "clubs = G.graph[\"bottom\"]\nprint(\"Biadjacency matrix\")\nprint(bipartite.biadjacency_matrix(G, women, clubs))\n# project bipartite graph onto women nodes\nW = bipartite.projected_graph(G, women)\nprint()\nprint(\"#Friends, Member\")\nfor w in women:\n    print(f\"{W.degree(w)} {w}\")\n# project bipartite graph onto women nodes keeping number of co-occurence",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_davis_club",
        "documentation": {}
    },
    {
        "label": "W",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_davis_club",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_davis_club",
        "peekOfCode": "W = bipartite.projected_graph(G, women)\nprint()\nprint(\"#Friends, Member\")\nfor w in women:\n    print(f\"{W.degree(w)} {w}\")\n# project bipartite graph onto women nodes keeping number of co-occurence\n# the degree computed is weighted and counts the total number of shared contacts\nW = bipartite.weighted_projected_graph(G, women)\nprint()\nprint(\"#Friend meetings, Member\")",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_davis_club",
        "documentation": {}
    },
    {
        "label": "W",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_davis_club",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_davis_club",
        "peekOfCode": "W = bipartite.weighted_projected_graph(G, women)\nprint()\nprint(\"#Friend meetings, Member\")\nfor w in women:\n    print(f\"{W.degree(w, weight='weight')} {w}\")\npos = nx.spring_layout(G, seed=648)  # Seed layout for reproducible node positions\nnx.draw(G, pos)\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_davis_club",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_davis_club",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_davis_club",
        "peekOfCode": "pos = nx.spring_layout(G, seed=648)  # Seed layout for reproducible node positions\nnx.draw(G, pos)\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_davis_club",
        "documentation": {}
    },
    {
        "label": "original_graph",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_dedensification",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_dedensification",
        "peekOfCode": "original_graph = nx.DiGraph()\nwhite_nodes = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"]\nred_nodes = [\"A\", \"B\", \"C\"]\nnode_sizes = [250 for node in white_nodes + red_nodes]\nnode_colors = [\"white\" for n in white_nodes] + [\"red\" for n in red_nodes]\noriginal_graph.add_nodes_from(white_nodes + red_nodes)\noriginal_graph.add_edges_from(\n    [\n        (\"1\", \"C\"),\n        (\"1\", \"B\"),",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "white_nodes",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_dedensification",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_dedensification",
        "peekOfCode": "white_nodes = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"]\nred_nodes = [\"A\", \"B\", \"C\"]\nnode_sizes = [250 for node in white_nodes + red_nodes]\nnode_colors = [\"white\" for n in white_nodes] + [\"red\" for n in red_nodes]\noriginal_graph.add_nodes_from(white_nodes + red_nodes)\noriginal_graph.add_edges_from(\n    [\n        (\"1\", \"C\"),\n        (\"1\", \"B\"),\n        (\"2\", \"C\"),",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "red_nodes",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_dedensification",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_dedensification",
        "peekOfCode": "red_nodes = [\"A\", \"B\", \"C\"]\nnode_sizes = [250 for node in white_nodes + red_nodes]\nnode_colors = [\"white\" for n in white_nodes] + [\"red\" for n in red_nodes]\noriginal_graph.add_nodes_from(white_nodes + red_nodes)\noriginal_graph.add_edges_from(\n    [\n        (\"1\", \"C\"),\n        (\"1\", \"B\"),\n        (\"2\", \"C\"),\n        (\"2\", \"B\"),",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "node_sizes",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_dedensification",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_dedensification",
        "peekOfCode": "node_sizes = [250 for node in white_nodes + red_nodes]\nnode_colors = [\"white\" for n in white_nodes] + [\"red\" for n in red_nodes]\noriginal_graph.add_nodes_from(white_nodes + red_nodes)\noriginal_graph.add_edges_from(\n    [\n        (\"1\", \"C\"),\n        (\"1\", \"B\"),\n        (\"2\", \"C\"),\n        (\"2\", \"B\"),\n        (\"2\", \"A\"),",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "node_colors",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_dedensification",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_dedensification",
        "peekOfCode": "node_colors = [\"white\" for n in white_nodes] + [\"red\" for n in red_nodes]\noriginal_graph.add_nodes_from(white_nodes + red_nodes)\noriginal_graph.add_edges_from(\n    [\n        (\"1\", \"C\"),\n        (\"1\", \"B\"),\n        (\"2\", \"C\"),\n        (\"2\", \"B\"),\n        (\"2\", \"A\"),\n        (\"3\", \"B\"),",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "base_options",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_dedensification",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_dedensification",
        "peekOfCode": "base_options = dict(with_labels=True, edgecolors=\"black\")\npos = {\n    \"3\": (0, 1),\n    \"2\": (0, 2),\n    \"1\": (0, 3),\n    \"6\": (1, 0),\n    \"A\": (1, 1),\n    \"B\": (1, 2),\n    \"C\": (1, 3),\n    \"4\": (2, 3),",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_dedensification",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_dedensification",
        "peekOfCode": "pos = {\n    \"3\": (0, 1),\n    \"2\": (0, 2),\n    \"1\": (0, 3),\n    \"6\": (1, 0),\n    \"A\": (1, 1),\n    \"B\": (1, 2),\n    \"C\": (1, 3),\n    \"4\": (2, 3),\n    \"5\": (2, 1),",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "ax1",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_dedensification",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_dedensification",
        "peekOfCode": "ax1 = plt.subplot(1, 2, 1)\nplt.title(\"Original (%s edges)\" % original_graph.number_of_edges())\nnx.draw_networkx(original_graph, pos=pos, node_color=node_colors, **base_options)\nnonexp_graph, compression_nodes = nx.summarization.dedensify(\n    original_graph, threshold=2, copy=False\n)\nnonexp_node_colors = list(node_colors)\nnonexp_node_sizes = list(node_sizes)\nfor node in compression_nodes:\n    nonexp_node_colors.append(\"yellow\")",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "nonexp_node_colors",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_dedensification",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_dedensification",
        "peekOfCode": "nonexp_node_colors = list(node_colors)\nnonexp_node_sizes = list(node_sizes)\nfor node in compression_nodes:\n    nonexp_node_colors.append(\"yellow\")\n    nonexp_node_sizes.append(600)\nplt.subplot(1, 2, 2)\nplt.title(\"Dedensified (%s edges)\" % nonexp_graph.number_of_edges())\nnonexp_pos = {\n    \"5\": (0, 0),\n    \"B\": (0, 2),",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "nonexp_node_sizes",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_dedensification",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_dedensification",
        "peekOfCode": "nonexp_node_sizes = list(node_sizes)\nfor node in compression_nodes:\n    nonexp_node_colors.append(\"yellow\")\n    nonexp_node_sizes.append(600)\nplt.subplot(1, 2, 2)\nplt.title(\"Dedensified (%s edges)\" % nonexp_graph.number_of_edges())\nnonexp_pos = {\n    \"5\": (0, 0),\n    \"B\": (0, 2),\n    \"1\": (0, 3),",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "nonexp_pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_dedensification",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_dedensification",
        "peekOfCode": "nonexp_pos = {\n    \"5\": (0, 0),\n    \"B\": (0, 2),\n    \"1\": (0, 3),\n    \"6\": (1, 0.75),\n    \"3\": (1.5, 1.5),\n    \"A\": (2, 0),\n    \"C\": (2, 3),\n    \"4\": (3, 1.5),\n    \"2\": (3, 2.5),",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "c_nodes",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_dedensification",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_dedensification",
        "peekOfCode": "c_nodes = list(compression_nodes)\nc_nodes.sort()\nfor spot, node in enumerate(c_nodes):\n    nonexp_pos[node] = (2, spot + 2)\nnx.draw_networkx(\n    nonexp_graph,\n    pos=nonexp_pos,\n    node_color=nonexp_node_colors,\n    node_size=nonexp_node_sizes,\n    **base_options",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "digitsrep",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_iterated_dynamical_systems",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "def digitsrep(n, b=10):\n    \"\"\"Return list of digits comprising n represented in base b.\n    n must be a nonnegative integer\"\"\"\n    if n <= 0:\n        return [0]\n    dlist = []\n    while n > 0:\n        # Prepend next least-significant digit\n        dlist = [n % b] + dlist\n        # Floor-division",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "powersum",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_iterated_dynamical_systems",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "def powersum(n, p, b=10):\n    \"\"\"Return sum of digits of n (in base b) raised to the power p.\"\"\"\n    dlist = digitsrep(n, b)\n    sum = 0\n    for k in dlist:\n        sum += k ** p\n    return sum\ndef attractor153_graph(n, p, multiple=3, b=10):\n    \"\"\"Return digraph of iterations of powersum(n,3,10).\"\"\"\n    G = nx.DiGraph()",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "attractor153_graph",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_iterated_dynamical_systems",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "def attractor153_graph(n, p, multiple=3, b=10):\n    \"\"\"Return digraph of iterations of powersum(n,3,10).\"\"\"\n    G = nx.DiGraph()\n    for k in range(1, n + 1):\n        if k % multiple == 0 and k not in G:\n            k1 = k\n            knext = powersum(k1, p, b)\n            while k1 != knext:\n                G.add_edge(k1, knext)\n                k1 = knext",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "squaring_cycle_graph_old",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_iterated_dynamical_systems",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "def squaring_cycle_graph_old(n, b=10):\n    \"\"\"Return digraph of iterations of powersum(n,2,10).\"\"\"\n    G = nx.DiGraph()\n    for k in range(1, n + 1):\n        k1 = k\n        G.add_node(k1)  # case k1==knext, at least add node\n        knext = powersum(k1, 2, b)\n        G.add_edge(k1, knext)\n        while k1 != knext:  # stop if fixed point\n            k1 = knext",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "sum_of_digits_graph",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_iterated_dynamical_systems",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "def sum_of_digits_graph(nmax, b=10):\n    def f(n):\n        return powersum(n, 1, b)\n    return discrete_dynamics_digraph(nmax, f)\ndef squaring_cycle_digraph(nmax, b=10):\n    def f(n):\n        return powersum(n, 2, b)\n    return discrete_dynamics_digraph(nmax, f)\ndef cubing_153_digraph(nmax):\n    def f(n):",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "squaring_cycle_digraph",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_iterated_dynamical_systems",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "def squaring_cycle_digraph(nmax, b=10):\n    def f(n):\n        return powersum(n, 2, b)\n    return discrete_dynamics_digraph(nmax, f)\ndef cubing_153_digraph(nmax):\n    def f(n):\n        return powersum(n, 3, 10)\n    return discrete_dynamics_digraph(nmax, f)\ndef discrete_dynamics_digraph(nmax, f, itermax=50000):\n    G = nx.DiGraph()",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "cubing_153_digraph",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_iterated_dynamical_systems",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "def cubing_153_digraph(nmax):\n    def f(n):\n        return powersum(n, 3, 10)\n    return discrete_dynamics_digraph(nmax, f)\ndef discrete_dynamics_digraph(nmax, f, itermax=50000):\n    G = nx.DiGraph()\n    for k in range(1, nmax + 1):\n        kold = k\n        G.add_node(kold)\n        knew = f(kold)",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "discrete_dynamics_digraph",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_iterated_dynamical_systems",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "def discrete_dynamics_digraph(nmax, f, itermax=50000):\n    G = nx.DiGraph()\n    for k in range(1, nmax + 1):\n        kold = k\n        G.add_node(kold)\n        knew = f(kold)\n        G.add_edge(kold, knew)\n        while kold != knew and kold << itermax:\n            # iterate until fixed point reached or itermax is exceeded\n            kold = knew",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "collatz_problem_digraph",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_iterated_dynamical_systems",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "def collatz_problem_digraph(nmax):\n    def f(n):\n        if n % 2 == 0:\n            return n // 2\n        else:\n            return 3 * n + 1\n    return discrete_dynamics_digraph(nmax, f)\ndef fixed_points(G):\n    \"\"\"Return a list of fixed points for the discrete dynamical\n    system represented by the digraph G.",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "fixed_points",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_iterated_dynamical_systems",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "def fixed_points(G):\n    \"\"\"Return a list of fixed points for the discrete dynamical\n    system represented by the digraph G.\n    \"\"\"\n    return [n for n in G if G.out_degree(n) == 0]\nnmax = 10000\nprint(f\"Building cubing_153_digraph({nmax})\")\nG = cubing_153_digraph(nmax)\nprint(\"Resulting digraph has\", len(G), \"nodes and\", G.size(), \" edges\")\nprint(\"Shortest path from 177 to 153 is:\")",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "f(108)",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_iterated_dynamical_systems",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "f(108) = 1**3 + 0**3 + 8**3 = 513\nand\nf(513) = 5**3 + 1**3 + 3**3 = 153\nSo, starting at 108 we reach 153 in two iterations,\nrepresented as:\n108->513->153\nComputing all orbits of 3N up to 10**5 reveals that the attractor\n153 is reached in a maximum of 14 iterations. In this code we\nshow that 13 cycles is the maximum required for all integers (in 3N)\nless than 10,000.",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "f(513)",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_iterated_dynamical_systems",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "f(513) = 5**3 + 1**3 + 3**3 = 153\nSo, starting at 108 we reach 153 in two iterations,\nrepresented as:\n108->513->153\nComputing all orbits of 3N up to 10**5 reveals that the attractor\n153 is reached in a maximum of 14 iterations. In this code we\nshow that 13 cycles is the maximum required for all integers (in 3N)\nless than 10,000.\nThe smallest number that requires 13 iterations to reach 153, is 177, i.e.,\n177->687->1071->345->216->225->141->66->432->99->1458->702->351->153",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "nmax",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_iterated_dynamical_systems",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "nmax = 10000\np = 3\ndef digitsrep(n, b=10):\n    \"\"\"Return list of digits comprising n represented in base b.\n    n must be a nonnegative integer\"\"\"\n    if n <= 0:\n        return [0]\n    dlist = []\n    while n > 0:\n        # Prepend next least-significant digit",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_iterated_dynamical_systems",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "p = 3\ndef digitsrep(n, b=10):\n    \"\"\"Return list of digits comprising n represented in base b.\n    n must be a nonnegative integer\"\"\"\n    if n <= 0:\n        return [0]\n    dlist = []\n    while n > 0:\n        # Prepend next least-significant digit\n        dlist = [n % b] + dlist",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "nmax",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_iterated_dynamical_systems",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "nmax = 10000\nprint(f\"Building cubing_153_digraph({nmax})\")\nG = cubing_153_digraph(nmax)\nprint(\"Resulting digraph has\", len(G), \"nodes and\", G.size(), \" edges\")\nprint(\"Shortest path from 177 to 153 is:\")\nprint(nx.shortest_path(G, 177, 153))\nprint(f\"fixed points are {fixed_points(G)}\")",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_iterated_dynamical_systems",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "G = cubing_153_digraph(nmax)\nprint(\"Resulting digraph has\", len(G), \"nodes and\", G.size(), \" edges\")\nprint(\"Shortest path from 177 to 153 is:\")\nprint(nx.shortest_path(G, 177, 153))\nprint(f\"fixed points are {fixed_points(G)}\")",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_krackhardt_centrality",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_krackhardt_centrality",
        "peekOfCode": "G = nx.krackhardt_kite_graph()\nprint(\"Betweenness\")\nb = nx.betweenness_centrality(G)\nfor v in G.nodes():\n    print(f\"{v:2} {b[v]:.3f}\")\nprint(\"Degree centrality\")\nd = nx.degree_centrality(G)\nfor v in G.nodes():\n    print(f\"{v:2} {d[v]:.3f}\")\nprint(\"Closeness centrality\")",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_krackhardt_centrality",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_krackhardt_centrality",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_krackhardt_centrality",
        "peekOfCode": "b = nx.betweenness_centrality(G)\nfor v in G.nodes():\n    print(f\"{v:2} {b[v]:.3f}\")\nprint(\"Degree centrality\")\nd = nx.degree_centrality(G)\nfor v in G.nodes():\n    print(f\"{v:2} {d[v]:.3f}\")\nprint(\"Closeness centrality\")\nc = nx.closeness_centrality(G)\nfor v in G.nodes():",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_krackhardt_centrality",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_krackhardt_centrality",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_krackhardt_centrality",
        "peekOfCode": "d = nx.degree_centrality(G)\nfor v in G.nodes():\n    print(f\"{v:2} {d[v]:.3f}\")\nprint(\"Closeness centrality\")\nc = nx.closeness_centrality(G)\nfor v in G.nodes():\n    print(f\"{v:2} {c[v]:.3f}\")\npos = nx.spring_layout(G, seed=367)  # Seed layout for reproducibility\nnx.draw(G, pos)\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_krackhardt_centrality",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_krackhardt_centrality",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_krackhardt_centrality",
        "peekOfCode": "c = nx.closeness_centrality(G)\nfor v in G.nodes():\n    print(f\"{v:2} {c[v]:.3f}\")\npos = nx.spring_layout(G, seed=367)  # Seed layout for reproducibility\nnx.draw(G, pos)\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_krackhardt_centrality",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_krackhardt_centrality",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_krackhardt_centrality",
        "peekOfCode": "pos = nx.spring_layout(G, seed=367)  # Seed layout for reproducibility\nnx.draw(G, pos)\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_krackhardt_centrality",
        "documentation": {}
    },
    {
        "label": "chunks",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_parallel_betweenness",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_parallel_betweenness",
        "peekOfCode": "def chunks(l, n):\n    \"\"\"Divide a list of nodes `l` in `n` chunks\"\"\"\n    l_c = iter(l)\n    while 1:\n        x = tuple(itertools.islice(l_c, n))\n        if not x:\n            return\n        yield x\ndef betweenness_centrality_parallel(G, processes=None):\n    \"\"\"Parallel betweenness centrality  function\"\"\"",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_parallel_betweenness",
        "documentation": {}
    },
    {
        "label": "betweenness_centrality_parallel",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_parallel_betweenness",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_parallel_betweenness",
        "peekOfCode": "def betweenness_centrality_parallel(G, processes=None):\n    \"\"\"Parallel betweenness centrality  function\"\"\"\n    p = Pool(processes=processes)\n    node_divisor = len(p._pool) * 4\n    node_chunks = list(chunks(G.nodes(), int(G.order() / node_divisor)))\n    num_chunks = len(node_chunks)\n    bt_sc = p.starmap(\n        nx.betweenness_centrality_subset,\n        zip(\n            [G] * num_chunks,",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_parallel_betweenness",
        "documentation": {}
    },
    {
        "label": "G_ba",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_parallel_betweenness",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_parallel_betweenness",
        "peekOfCode": "G_ba = nx.barabasi_albert_graph(1000, 3)\nG_er = nx.gnp_random_graph(1000, 0.01)\nG_ws = nx.connected_watts_strogatz_graph(1000, 4, 0.1)\nfor G in [G_ba, G_er, G_ws]:\n    print(\"\")\n    print(\"Computing betweenness centrality for:\")\n    print(nx.info(G))\n    print(\"\\tParallel version\")\n    start = time.time()\n    bt = betweenness_centrality_parallel(G)",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_parallel_betweenness",
        "documentation": {}
    },
    {
        "label": "G_er",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_parallel_betweenness",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_parallel_betweenness",
        "peekOfCode": "G_er = nx.gnp_random_graph(1000, 0.01)\nG_ws = nx.connected_watts_strogatz_graph(1000, 4, 0.1)\nfor G in [G_ba, G_er, G_ws]:\n    print(\"\")\n    print(\"Computing betweenness centrality for:\")\n    print(nx.info(G))\n    print(\"\\tParallel version\")\n    start = time.time()\n    bt = betweenness_centrality_parallel(G)\n    print(f\"\\t\\tTime: {(time.time() - start):.4F} seconds\")",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_parallel_betweenness",
        "documentation": {}
    },
    {
        "label": "G_ws",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_parallel_betweenness",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_parallel_betweenness",
        "peekOfCode": "G_ws = nx.connected_watts_strogatz_graph(1000, 4, 0.1)\nfor G in [G_ba, G_er, G_ws]:\n    print(\"\")\n    print(\"Computing betweenness centrality for:\")\n    print(nx.info(G))\n    print(\"\\tParallel version\")\n    start = time.time()\n    bt = betweenness_centrality_parallel(G)\n    print(f\"\\t\\tTime: {(time.time() - start):.4F} seconds\")\n    print(f\"\\t\\tBetweenness centrality for node 0: {bt[0]:.5f}\")",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_parallel_betweenness",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_rcm",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_rcm",
        "peekOfCode": "G = nx.grid_2d_graph(3, 3)\nrcm = list(nx.utils.reverse_cuthill_mckee_ordering(G))\nprint(\"ordering\", rcm)\nprint(\"unordered Laplacian matrix\")\nA = nx.laplacian_matrix(G)\nx, y = np.nonzero(A)\n# print(f\"lower bandwidth: {(y - x).max()}\")\n# print(f\"upper bandwidth: {(x - y).max()}\")\nprint(f\"bandwidth: {(y - x).max() + (x - y).max() + 1}\")\nprint(A)",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_rcm",
        "documentation": {}
    },
    {
        "label": "rcm",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_rcm",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_rcm",
        "peekOfCode": "rcm = list(nx.utils.reverse_cuthill_mckee_ordering(G))\nprint(\"ordering\", rcm)\nprint(\"unordered Laplacian matrix\")\nA = nx.laplacian_matrix(G)\nx, y = np.nonzero(A)\n# print(f\"lower bandwidth: {(y - x).max()}\")\n# print(f\"upper bandwidth: {(x - y).max()}\")\nprint(f\"bandwidth: {(y - x).max() + (x - y).max() + 1}\")\nprint(A)\nB = nx.laplacian_matrix(G, nodelist=rcm)",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_rcm",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_rcm",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_rcm",
        "peekOfCode": "A = nx.laplacian_matrix(G)\nx, y = np.nonzero(A)\n# print(f\"lower bandwidth: {(y - x).max()}\")\n# print(f\"upper bandwidth: {(x - y).max()}\")\nprint(f\"bandwidth: {(y - x).max() + (x - y).max() + 1}\")\nprint(A)\nB = nx.laplacian_matrix(G, nodelist=rcm)\nprint(\"low-bandwidth Laplacian matrix\")\nx, y = np.nonzero(B)\n# print(f\"lower bandwidth: {(y - x).max()}\")",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_rcm",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_rcm",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_rcm",
        "peekOfCode": "B = nx.laplacian_matrix(G, nodelist=rcm)\nprint(\"low-bandwidth Laplacian matrix\")\nx, y = np.nonzero(B)\n# print(f\"lower bandwidth: {(y - x).max()}\")\n# print(f\"upper bandwidth: {(x - y).max()}\")\nprint(f\"bandwidth: {(y - x).max() + (x - y).max() + 1}\")\nprint(B)\nsns.heatmap(B.todense(), cbar=False, square=True, linewidths=0.5, annot=True)\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_rcm",
        "documentation": {}
    },
    {
        "label": "nodes",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_snap",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_snap",
        "peekOfCode": "nodes = {\n    \"A\": dict(color=\"Red\"),\n    \"B\": dict(color=\"Red\"),\n    \"C\": dict(color=\"Red\"),\n    \"D\": dict(color=\"Red\"),\n    \"E\": dict(color=\"Blue\"),\n    \"F\": dict(color=\"Blue\"),\n    \"G\": dict(color=\"Blue\"),\n    \"H\": dict(color=\"Blue\"),\n    \"I\": dict(color=\"Yellow\"),",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "edges",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_snap",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_snap",
        "peekOfCode": "edges = [\n    (\"A\", \"B\", \"Strong\"),\n    (\"A\", \"C\", \"Weak\"),\n    (\"A\", \"E\", \"Strong\"),\n    (\"A\", \"I\", \"Weak\"),\n    (\"B\", \"D\", \"Weak\"),\n    (\"B\", \"J\", \"Weak\"),\n    (\"B\", \"F\", \"Strong\"),\n    (\"C\", \"G\", \"Weak\"),\n    (\"D\", \"H\", \"Weak\"),",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "original_graph",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_snap",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_snap",
        "peekOfCode": "original_graph = nx.Graph()\noriginal_graph.add_nodes_from(n for n in nodes.items())\noriginal_graph.add_edges_from((u, v, {\"type\": label}) for u, v, label in edges)\nplt.suptitle(\"SNAP Summarization\")\nbase_options = dict(with_labels=True, edgecolors=\"black\", node_size=500)\nax1 = plt.subplot(1, 2, 1)\nplt.title(\n    \"Original (%s nodes, %s edges)\"\n    % (original_graph.number_of_nodes(), original_graph.number_of_edges())\n)",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "base_options",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_snap",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_snap",
        "peekOfCode": "base_options = dict(with_labels=True, edgecolors=\"black\", node_size=500)\nax1 = plt.subplot(1, 2, 1)\nplt.title(\n    \"Original (%s nodes, %s edges)\"\n    % (original_graph.number_of_nodes(), original_graph.number_of_edges())\n)\npos = nx.spring_layout(original_graph, seed=7482934)\nnode_colors = [d[\"color\"] for _, d in original_graph.nodes(data=True)]\nedge_type_visual_weight_lookup = {\"Weak\": 1.0, \"Strong\": 3.0}\nedge_weights = [",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "ax1",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_snap",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_snap",
        "peekOfCode": "ax1 = plt.subplot(1, 2, 1)\nplt.title(\n    \"Original (%s nodes, %s edges)\"\n    % (original_graph.number_of_nodes(), original_graph.number_of_edges())\n)\npos = nx.spring_layout(original_graph, seed=7482934)\nnode_colors = [d[\"color\"] for _, d in original_graph.nodes(data=True)]\nedge_type_visual_weight_lookup = {\"Weak\": 1.0, \"Strong\": 3.0}\nedge_weights = [\n    edge_type_visual_weight_lookup[d[\"type\"]]",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_snap",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_snap",
        "peekOfCode": "pos = nx.spring_layout(original_graph, seed=7482934)\nnode_colors = [d[\"color\"] for _, d in original_graph.nodes(data=True)]\nedge_type_visual_weight_lookup = {\"Weak\": 1.0, \"Strong\": 3.0}\nedge_weights = [\n    edge_type_visual_weight_lookup[d[\"type\"]]\n    for _, _, d in original_graph.edges(data=True)\n]\nnx.draw_networkx(\n    original_graph, pos=pos, node_color=node_colors, width=edge_weights, **base_options\n)",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "node_colors",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_snap",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_snap",
        "peekOfCode": "node_colors = [d[\"color\"] for _, d in original_graph.nodes(data=True)]\nedge_type_visual_weight_lookup = {\"Weak\": 1.0, \"Strong\": 3.0}\nedge_weights = [\n    edge_type_visual_weight_lookup[d[\"type\"]]\n    for _, _, d in original_graph.edges(data=True)\n]\nnx.draw_networkx(\n    original_graph, pos=pos, node_color=node_colors, width=edge_weights, **base_options\n)\nnode_attributes = (\"color\",)",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "edge_type_visual_weight_lookup",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_snap",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_snap",
        "peekOfCode": "edge_type_visual_weight_lookup = {\"Weak\": 1.0, \"Strong\": 3.0}\nedge_weights = [\n    edge_type_visual_weight_lookup[d[\"type\"]]\n    for _, _, d in original_graph.edges(data=True)\n]\nnx.draw_networkx(\n    original_graph, pos=pos, node_color=node_colors, width=edge_weights, **base_options\n)\nnode_attributes = (\"color\",)\nedge_attributes = (\"type\",)",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "edge_weights",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_snap",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_snap",
        "peekOfCode": "edge_weights = [\n    edge_type_visual_weight_lookup[d[\"type\"]]\n    for _, _, d in original_graph.edges(data=True)\n]\nnx.draw_networkx(\n    original_graph, pos=pos, node_color=node_colors, width=edge_weights, **base_options\n)\nnode_attributes = (\"color\",)\nedge_attributes = (\"type\",)\nsummary_graph = nx.snap_aggregation(",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "node_attributes",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_snap",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_snap",
        "peekOfCode": "node_attributes = (\"color\",)\nedge_attributes = (\"type\",)\nsummary_graph = nx.snap_aggregation(\n    original_graph, node_attributes, edge_attributes, prefix=\"S-\"\n)\nplt.subplot(1, 2, 2)\nplt.title(\n    \"SNAP Aggregation (%s nodes, %s edges)\"\n    % (summary_graph.number_of_nodes(), summary_graph.number_of_edges())\n)",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "edge_attributes",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_snap",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_snap",
        "peekOfCode": "edge_attributes = (\"type\",)\nsummary_graph = nx.snap_aggregation(\n    original_graph, node_attributes, edge_attributes, prefix=\"S-\"\n)\nplt.subplot(1, 2, 2)\nplt.title(\n    \"SNAP Aggregation (%s nodes, %s edges)\"\n    % (summary_graph.number_of_nodes(), summary_graph.number_of_edges())\n)\nsummary_pos = nx.spring_layout(summary_graph, seed=8375428)",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "summary_graph",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_snap",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_snap",
        "peekOfCode": "summary_graph = nx.snap_aggregation(\n    original_graph, node_attributes, edge_attributes, prefix=\"S-\"\n)\nplt.subplot(1, 2, 2)\nplt.title(\n    \"SNAP Aggregation (%s nodes, %s edges)\"\n    % (summary_graph.number_of_nodes(), summary_graph.number_of_edges())\n)\nsummary_pos = nx.spring_layout(summary_graph, seed=8375428)\nnode_colors = []",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "summary_pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_snap",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_snap",
        "peekOfCode": "summary_pos = nx.spring_layout(summary_graph, seed=8375428)\nnode_colors = []\nfor node in summary_graph:\n    color = summary_graph.nodes[node][\"color\"]\n    node_colors.append(color)\nedge_weights = []\nfor edge in summary_graph.edges():\n    edge_types = summary_graph.get_edge_data(*edge)[\"types\"]\n    edge_weight = 0.0\n    for edge_type in edge_types:",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "node_colors",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_snap",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_snap",
        "peekOfCode": "node_colors = []\nfor node in summary_graph:\n    color = summary_graph.nodes[node][\"color\"]\n    node_colors.append(color)\nedge_weights = []\nfor edge in summary_graph.edges():\n    edge_types = summary_graph.get_edge_data(*edge)[\"types\"]\n    edge_weight = 0.0\n    for edge_type in edge_types:\n        edge_weight += edge_type_visual_weight_lookup[edge_type[\"type\"]]",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "edge_weights",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_snap",
        "description": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_snap",
        "peekOfCode": "edge_weights = []\nfor edge in summary_graph.edges():\n    edge_types = summary_graph.get_edge_data(*edge)[\"types\"]\n    edge_weight = 0.0\n    for edge_type in edge_types:\n        edge_weight += edge_type_visual_weight_lookup[edge_type[\"type\"]]\n    edge_weights.append(edge_weight)\nnx.draw_networkx(\n    summary_graph,\n    pos=summary_pos,",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.basic.plot_properties",
        "description": ".venv.share.doc.networkx-2.6.3.examples.basic.plot_properties",
        "peekOfCode": "G = nx.lollipop_graph(4, 6)\npathlengths = []\nprint(\"source vertex {target:length, }\")\nfor v in G.nodes():\n    spl = dict(nx.single_source_shortest_path_length(G, v))\n    print(f\"{v} {spl} \")\n    for p in spl:\n        pathlengths.append(spl[p])\nprint()\nprint(f\"average shortest path length {sum(pathlengths) / len(pathlengths)}\")",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.basic.plot_properties",
        "documentation": {}
    },
    {
        "label": "pathlengths",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.basic.plot_properties",
        "description": ".venv.share.doc.networkx-2.6.3.examples.basic.plot_properties",
        "peekOfCode": "pathlengths = []\nprint(\"source vertex {target:length, }\")\nfor v in G.nodes():\n    spl = dict(nx.single_source_shortest_path_length(G, v))\n    print(f\"{v} {spl} \")\n    for p in spl:\n        pathlengths.append(spl[p])\nprint()\nprint(f\"average shortest path length {sum(pathlengths) / len(pathlengths)}\")\n# histogram of path lengths",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.basic.plot_properties",
        "documentation": {}
    },
    {
        "label": "dist",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.basic.plot_properties",
        "description": ".venv.share.doc.networkx-2.6.3.examples.basic.plot_properties",
        "peekOfCode": "dist = {}\nfor p in pathlengths:\n    if p in dist:\n        dist[p] += 1\n    else:\n        dist[p] = 1\nprint()\nprint(\"length #paths\")\nverts = dist.keys()\nfor d in sorted(verts):",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.basic.plot_properties",
        "documentation": {}
    },
    {
        "label": "verts",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.basic.plot_properties",
        "description": ".venv.share.doc.networkx-2.6.3.examples.basic.plot_properties",
        "peekOfCode": "verts = dist.keys()\nfor d in sorted(verts):\n    print(f\"{d} {dist[d]}\")\nprint(f\"radius: {nx.radius(G)}\")\nprint(f\"diameter: {nx.diameter(G)}\")\nprint(f\"eccentricity: {nx.eccentricity(G)}\")\nprint(f\"center: {nx.center(G)}\")\nprint(f\"periphery: {nx.periphery(G)}\")\nprint(f\"density: {nx.density(G)}\")\npos = nx.spring_layout(G, seed=3068)  # Seed layout for reproducibility",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.basic.plot_properties",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.basic.plot_properties",
        "description": ".venv.share.doc.networkx-2.6.3.examples.basic.plot_properties",
        "peekOfCode": "pos = nx.spring_layout(G, seed=3068)  # Seed layout for reproducibility\nnx.draw(G, pos=pos, with_labels=True)\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.basic.plot_properties",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.basic.plot_read_write",
        "description": ".venv.share.doc.networkx-2.6.3.examples.basic.plot_read_write",
        "peekOfCode": "G = nx.grid_2d_graph(5, 5)  # 5x5 grid\n# print the adjacency list\nfor line in nx.generate_adjlist(G):\n    print(line)\n# write edgelist to grid.edgelist\nnx.write_edgelist(G, path=\"grid.edgelist\", delimiter=\":\")\n# read edgelist from grid.edgelist\nH = nx.read_edgelist(path=\"grid.edgelist\", delimiter=\":\")\npos = nx.spring_layout(H, seed=200)\nnx.draw(H, pos)",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.basic.plot_read_write",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.basic.plot_read_write",
        "description": ".venv.share.doc.networkx-2.6.3.examples.basic.plot_read_write",
        "peekOfCode": "H = nx.read_edgelist(path=\"grid.edgelist\", delimiter=\":\")\npos = nx.spring_layout(H, seed=200)\nnx.draw(H, pos)\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.basic.plot_read_write",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.basic.plot_read_write",
        "description": ".venv.share.doc.networkx-2.6.3.examples.basic.plot_read_write",
        "peekOfCode": "pos = nx.spring_layout(H, seed=200)\nnx.draw(H, pos)\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.basic.plot_read_write",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.basic.plot_simple_graph",
        "description": ".venv.share.doc.networkx-2.6.3.examples.basic.plot_simple_graph",
        "peekOfCode": "G = nx.Graph()\nG.add_edge(1, 2)\nG.add_edge(1, 3)\nG.add_edge(1, 5)\nG.add_edge(2, 3)\nG.add_edge(3, 4)\nG.add_edge(4, 5)\n# explicitly set positions\npos = {1: (0, 0), 2: (-1, 0.3), 3: (2, 0.17), 4: (4, 0.255), 5: (5, 0.03)}\noptions = {",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.basic.plot_simple_graph",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.basic.plot_simple_graph",
        "description": ".venv.share.doc.networkx-2.6.3.examples.basic.plot_simple_graph",
        "peekOfCode": "pos = {1: (0, 0), 2: (-1, 0.3), 3: (2, 0.17), 4: (4, 0.255), 5: (5, 0.03)}\noptions = {\n    \"font_size\": 36,\n    \"node_size\": 3000,\n    \"node_color\": \"white\",\n    \"edgecolors\": \"black\",\n    \"linewidths\": 5,\n    \"width\": 5,\n}\nnx.draw_networkx(G, pos, **options)",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.basic.plot_simple_graph",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.basic.plot_simple_graph",
        "description": ".venv.share.doc.networkx-2.6.3.examples.basic.plot_simple_graph",
        "peekOfCode": "options = {\n    \"font_size\": 36,\n    \"node_size\": 3000,\n    \"node_color\": \"white\",\n    \"edgecolors\": \"black\",\n    \"linewidths\": 5,\n    \"width\": 5,\n}\nnx.draw_networkx(G, pos, **options)\n# Set margins for the axes so that nodes aren't clipped",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.basic.plot_simple_graph",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.basic.plot_simple_graph",
        "description": ".venv.share.doc.networkx-2.6.3.examples.basic.plot_simple_graph",
        "peekOfCode": "ax = plt.gca()\nax.margins(0.20)\nplt.axis(\"off\")\nplt.show()\n# %%\n# A directed graph\nG = nx.DiGraph([(0, 3), (1, 3), (2, 4), (3, 5), (3, 6), (4, 6), (5, 6)])\n# group nodes by column\nleft_nodes = [0, 1, 2]\nmiddle_nodes = [3, 4]",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.basic.plot_simple_graph",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.basic.plot_simple_graph",
        "description": ".venv.share.doc.networkx-2.6.3.examples.basic.plot_simple_graph",
        "peekOfCode": "G = nx.DiGraph([(0, 3), (1, 3), (2, 4), (3, 5), (3, 6), (4, 6), (5, 6)])\n# group nodes by column\nleft_nodes = [0, 1, 2]\nmiddle_nodes = [3, 4]\nright_nodes = [5, 6]\n# set the position according to column (x-coord)\npos = {n: (0, i) for i, n in enumerate(left_nodes)}\npos.update({n: (1, i + 0.5) for i, n in enumerate(middle_nodes)})\npos.update({n: (2, i + 0.5) for i, n in enumerate(right_nodes)})\nnx.draw_networkx(G, pos, **options)",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.basic.plot_simple_graph",
        "documentation": {}
    },
    {
        "label": "left_nodes",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.basic.plot_simple_graph",
        "description": ".venv.share.doc.networkx-2.6.3.examples.basic.plot_simple_graph",
        "peekOfCode": "left_nodes = [0, 1, 2]\nmiddle_nodes = [3, 4]\nright_nodes = [5, 6]\n# set the position according to column (x-coord)\npos = {n: (0, i) for i, n in enumerate(left_nodes)}\npos.update({n: (1, i + 0.5) for i, n in enumerate(middle_nodes)})\npos.update({n: (2, i + 0.5) for i, n in enumerate(right_nodes)})\nnx.draw_networkx(G, pos, **options)\n# Set margins for the axes so that nodes aren't clipped\nax = plt.gca()",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.basic.plot_simple_graph",
        "documentation": {}
    },
    {
        "label": "middle_nodes",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.basic.plot_simple_graph",
        "description": ".venv.share.doc.networkx-2.6.3.examples.basic.plot_simple_graph",
        "peekOfCode": "middle_nodes = [3, 4]\nright_nodes = [5, 6]\n# set the position according to column (x-coord)\npos = {n: (0, i) for i, n in enumerate(left_nodes)}\npos.update({n: (1, i + 0.5) for i, n in enumerate(middle_nodes)})\npos.update({n: (2, i + 0.5) for i, n in enumerate(right_nodes)})\nnx.draw_networkx(G, pos, **options)\n# Set margins for the axes so that nodes aren't clipped\nax = plt.gca()\nax.margins(0.20)",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.basic.plot_simple_graph",
        "documentation": {}
    },
    {
        "label": "right_nodes",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.basic.plot_simple_graph",
        "description": ".venv.share.doc.networkx-2.6.3.examples.basic.plot_simple_graph",
        "peekOfCode": "right_nodes = [5, 6]\n# set the position according to column (x-coord)\npos = {n: (0, i) for i, n in enumerate(left_nodes)}\npos.update({n: (1, i + 0.5) for i, n in enumerate(middle_nodes)})\npos.update({n: (2, i + 0.5) for i, n in enumerate(right_nodes)})\nnx.draw_networkx(G, pos, **options)\n# Set margins for the axes so that nodes aren't clipped\nax = plt.gca()\nax.margins(0.20)\nplt.axis(\"off\")",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.basic.plot_simple_graph",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.basic.plot_simple_graph",
        "description": ".venv.share.doc.networkx-2.6.3.examples.basic.plot_simple_graph",
        "peekOfCode": "pos = {n: (0, i) for i, n in enumerate(left_nodes)}\npos.update({n: (1, i + 0.5) for i, n in enumerate(middle_nodes)})\npos.update({n: (2, i + 0.5) for i, n in enumerate(right_nodes)})\nnx.draw_networkx(G, pos, **options)\n# Set margins for the axes so that nodes aren't clipped\nax = plt.gca()\nax.margins(0.20)\nplt.axis(\"off\")\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.basic.plot_simple_graph",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.basic.plot_simple_graph",
        "description": ".venv.share.doc.networkx-2.6.3.examples.basic.plot_simple_graph",
        "peekOfCode": "ax = plt.gca()\nax.margins(0.20)\nplt.axis(\"off\")\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.basic.plot_simple_graph",
        "documentation": {}
    },
    {
        "label": "chess_pgn_graph",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_chess_masters",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_chess_masters",
        "peekOfCode": "def chess_pgn_graph(pgn_file=\"chess_masters_WCC.pgn.bz2\"):\n    \"\"\"Read chess games in pgn format in pgn_file.\n    Filenames ending in .bz2 will be uncompressed.\n    Return the MultiDiGraph of players connected by a chess game.\n    Edges contain game data in a dict.\n    \"\"\"\n    import bz2\n    G = nx.MultiDiGraph()\n    game = {}\n    with bz2.BZ2File(pgn_file) as datafile:",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "game_details",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_chess_masters",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_chess_masters",
        "peekOfCode": "game_details = [\"Event\", \"Date\", \"Result\", \"ECO\", \"Site\"]\ndef chess_pgn_graph(pgn_file=\"chess_masters_WCC.pgn.bz2\"):\n    \"\"\"Read chess games in pgn format in pgn_file.\n    Filenames ending in .bz2 will be uncompressed.\n    Return the MultiDiGraph of players connected by a chess game.\n    Edges contain game data in a dict.\n    \"\"\"\n    import bz2\n    G = nx.MultiDiGraph()\n    game = {}",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_chess_masters",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_chess_masters",
        "peekOfCode": "G = chess_pgn_graph()\nprint(\n    f\"Loaded {G.number_of_edges()} chess games between {G.number_of_nodes()} players\\n\"\n)\n# identify connected components of the undirected version\nH = G.to_undirected()\nGcc = [H.subgraph(c) for c in nx.connected_components(H)]\nif len(Gcc) > 1:\n    print(f\"Note the disconnected component consisting of:\\n{Gcc[1].nodes()}\")\n# find all games with B97 opening (as described in ECO)",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_chess_masters",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_chess_masters",
        "peekOfCode": "H = G.to_undirected()\nGcc = [H.subgraph(c) for c in nx.connected_components(H)]\nif len(Gcc) > 1:\n    print(f\"Note the disconnected component consisting of:\\n{Gcc[1].nodes()}\")\n# find all games with B97 opening (as described in ECO)\nopenings = {game_info[\"ECO\"] for (white, black, game_info) in G.edges(data=True)}\nprint(f\"\\nFrom a total of {len(openings)} different openings,\")\nprint(\"the following games used the Sicilian opening\")\nprint('with the Najdorff 7...Qb6 \"Poisoned Pawn\" variation.\\n')\nfor (white, black, game_info) in G.edges(data=True):",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "Gcc",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_chess_masters",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_chess_masters",
        "peekOfCode": "Gcc = [H.subgraph(c) for c in nx.connected_components(H)]\nif len(Gcc) > 1:\n    print(f\"Note the disconnected component consisting of:\\n{Gcc[1].nodes()}\")\n# find all games with B97 opening (as described in ECO)\nopenings = {game_info[\"ECO\"] for (white, black, game_info) in G.edges(data=True)}\nprint(f\"\\nFrom a total of {len(openings)} different openings,\")\nprint(\"the following games used the Sicilian opening\")\nprint('with the Najdorff 7...Qb6 \"Poisoned Pawn\" variation.\\n')\nfor (white, black, game_info) in G.edges(data=True):\n    if game_info[\"ECO\"] == \"B97\":",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "openings",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_chess_masters",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_chess_masters",
        "peekOfCode": "openings = {game_info[\"ECO\"] for (white, black, game_info) in G.edges(data=True)}\nprint(f\"\\nFrom a total of {len(openings)} different openings,\")\nprint(\"the following games used the Sicilian opening\")\nprint('with the Najdorff 7...Qb6 \"Poisoned Pawn\" variation.\\n')\nfor (white, black, game_info) in G.edges(data=True):\n    if game_info[\"ECO\"] == \"B97\":\n        summary = f\"{white} vs {black}\\n\"\n        for k, v in game_info.items():\n            summary += f\"   {k}: {v}\\n\"\n        summary += \"\\n\"",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_chess_masters",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_chess_masters",
        "peekOfCode": "H = nx.Graph(G)\n# edge width is proportional number of games played\nedgewidth = [len(G.get_edge_data(u, v)) for u, v in H.edges()]\n# node size is proportional to number of games won\nwins = dict.fromkeys(G.nodes(), 0.0)\nfor (u, v, d) in G.edges(data=True):\n    r = d[\"Result\"].split(\"-\")\n    if r[0] == \"1\":\n        wins[u] += 1.0\n    elif r[0] == \"1/2\":",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "edgewidth",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_chess_masters",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_chess_masters",
        "peekOfCode": "edgewidth = [len(G.get_edge_data(u, v)) for u, v in H.edges()]\n# node size is proportional to number of games won\nwins = dict.fromkeys(G.nodes(), 0.0)\nfor (u, v, d) in G.edges(data=True):\n    r = d[\"Result\"].split(\"-\")\n    if r[0] == \"1\":\n        wins[u] += 1.0\n    elif r[0] == \"1/2\":\n        wins[u] += 0.5\n        wins[v] += 0.5",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "wins",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_chess_masters",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_chess_masters",
        "peekOfCode": "wins = dict.fromkeys(G.nodes(), 0.0)\nfor (u, v, d) in G.edges(data=True):\n    r = d[\"Result\"].split(\"-\")\n    if r[0] == \"1\":\n        wins[u] += 1.0\n    elif r[0] == \"1/2\":\n        wins[u] += 0.5\n        wins[v] += 0.5\n    else:\n        wins[v] += 1.0",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "nodesize",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_chess_masters",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_chess_masters",
        "peekOfCode": "nodesize = [wins[v] * 50 for v in H]\n# Generate layout for visualization\npos = nx.kamada_kawai_layout(H)\n# Manual tweaking to limit node label overlap in the visualization\npos[\"Reshevsky, Samuel H\"] += (0.05, -0.10)\npos[\"Botvinnik, Mikhail M\"] += (0.03, -0.06)\npos[\"Smyslov, Vassily V\"] += (0.05, -0.03)\nfig, ax = plt.subplots(figsize=(12, 12))\n# Visualize graph components\nnx.draw_networkx_edges(H, pos, alpha=0.3, width=edgewidth, edge_color=\"m\")",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_chess_masters",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_chess_masters",
        "peekOfCode": "pos = nx.kamada_kawai_layout(H)\n# Manual tweaking to limit node label overlap in the visualization\npos[\"Reshevsky, Samuel H\"] += (0.05, -0.10)\npos[\"Botvinnik, Mikhail M\"] += (0.03, -0.06)\npos[\"Smyslov, Vassily V\"] += (0.05, -0.03)\nfig, ax = plt.subplots(figsize=(12, 12))\n# Visualize graph components\nnx.draw_networkx_edges(H, pos, alpha=0.3, width=edgewidth, edge_color=\"m\")\nnx.draw_networkx_nodes(H, pos, node_size=nodesize, node_color=\"#210070\", alpha=0.9)\nlabel_options = {\"ec\": \"k\", \"fc\": \"white\", \"alpha\": 0.7}",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "label_options",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_chess_masters",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_chess_masters",
        "peekOfCode": "label_options = {\"ec\": \"k\", \"fc\": \"white\", \"alpha\": 0.7}\nnx.draw_networkx_labels(H, pos, font_size=14, bbox=label_options)\n# Title/legend\nfont = {\"fontname\": \"Helvetica\", \"color\": \"k\", \"fontweight\": \"bold\", \"fontsize\": 14}\nax.set_title(\"World Chess Championship Games: 1886 - 1985\", font)\n# Change font color for legend\nfont[\"color\"] = \"r\"\nax.text(\n    0.80,\n    0.10,",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "font",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_chess_masters",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_chess_masters",
        "peekOfCode": "font = {\"fontname\": \"Helvetica\", \"color\": \"k\", \"fontweight\": \"bold\", \"fontsize\": 14}\nax.set_title(\"World Chess Championship Games: 1886 - 1985\", font)\n# Change font color for legend\nfont[\"color\"] = \"r\"\nax.text(\n    0.80,\n    0.10,\n    \"edge width = # games played\",\n    horizontalalignment=\"center\",\n    transform=ax.transAxes,",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "font[\"color\"]",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_chess_masters",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_chess_masters",
        "peekOfCode": "font[\"color\"] = \"r\"\nax.text(\n    0.80,\n    0.10,\n    \"edge width = # games played\",\n    horizontalalignment=\"center\",\n    transform=ax.transAxes,\n    fontdict=font,\n)\nax.text(",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "icons",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_custom_node_icons",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_custom_node_icons",
        "peekOfCode": "icons = {\n    \"router\": \"icons/router_black_144x144.png\",\n    \"switch\": \"icons/switch_black_144x144.png\",\n    \"PC\": \"icons/computer_black_144x144.png\",\n}\n# Load images\nimages = {k: PIL.Image.open(fname) for k, fname in icons.items()}\n# Generate the computer network graph\nG = nx.Graph()\nG.add_node(\"router\", image=images[\"router\"])",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_custom_node_icons",
        "documentation": {}
    },
    {
        "label": "images",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_custom_node_icons",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_custom_node_icons",
        "peekOfCode": "images = {k: PIL.Image.open(fname) for k, fname in icons.items()}\n# Generate the computer network graph\nG = nx.Graph()\nG.add_node(\"router\", image=images[\"router\"])\nfor i in range(1, 4):\n    G.add_node(f\"switch_{i}\", image=images[\"switch\"])\n    for j in range(1, 4):\n        G.add_node(\"PC_\" + str(i) + \"_\" + str(j), image=images[\"PC\"])\nG.add_edge(\"router\", \"switch_1\")\nG.add_edge(\"router\", \"switch_2\")",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_custom_node_icons",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_custom_node_icons",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_custom_node_icons",
        "peekOfCode": "G = nx.Graph()\nG.add_node(\"router\", image=images[\"router\"])\nfor i in range(1, 4):\n    G.add_node(f\"switch_{i}\", image=images[\"switch\"])\n    for j in range(1, 4):\n        G.add_node(\"PC_\" + str(i) + \"_\" + str(j), image=images[\"PC\"])\nG.add_edge(\"router\", \"switch_1\")\nG.add_edge(\"router\", \"switch_2\")\nG.add_edge(\"router\", \"switch_3\")\nfor u in range(1, 4):",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_custom_node_icons",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_custom_node_icons",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_custom_node_icons",
        "peekOfCode": "pos = nx.spring_layout(G, seed=1734289230)\nfig, ax = plt.subplots()\n# Note: the min_source/target_margin kwargs only work with FancyArrowPatch objects.\n# Force the use of FancyArrowPatch for edge drawing by setting `arrows=True`,\n# but suppress arrowheads with `arrowstyle=\"-\"`\nnx.draw_networkx_edges(\n    G,\n    pos=pos,\n    ax=ax,\n    arrows=True,",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_custom_node_icons",
        "documentation": {}
    },
    {
        "label": "tr_figure",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_custom_node_icons",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_custom_node_icons",
        "peekOfCode": "tr_figure = ax.transData.transform\n# Transform from display to figure coordinates\ntr_axes = fig.transFigure.inverted().transform\n# Select the size of the image (relative to the X axis)\nicon_size = (ax.get_xlim()[1] - ax.get_xlim()[0]) * 0.025\nicon_center = icon_size / 2.0\n# Add the respective image to each node\nfor n in G.nodes:\n    xf, yf = tr_figure(pos[n])\n    xa, ya = tr_axes((xf, yf))",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_custom_node_icons",
        "documentation": {}
    },
    {
        "label": "tr_axes",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_custom_node_icons",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_custom_node_icons",
        "peekOfCode": "tr_axes = fig.transFigure.inverted().transform\n# Select the size of the image (relative to the X axis)\nicon_size = (ax.get_xlim()[1] - ax.get_xlim()[0]) * 0.025\nicon_center = icon_size / 2.0\n# Add the respective image to each node\nfor n in G.nodes:\n    xf, yf = tr_figure(pos[n])\n    xa, ya = tr_axes((xf, yf))\n    # get overlapped axes and plot icon\n    a = plt.axes([xa - icon_center, ya - icon_center, icon_size, icon_size])",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_custom_node_icons",
        "documentation": {}
    },
    {
        "label": "icon_size",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_custom_node_icons",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_custom_node_icons",
        "peekOfCode": "icon_size = (ax.get_xlim()[1] - ax.get_xlim()[0]) * 0.025\nicon_center = icon_size / 2.0\n# Add the respective image to each node\nfor n in G.nodes:\n    xf, yf = tr_figure(pos[n])\n    xa, ya = tr_axes((xf, yf))\n    # get overlapped axes and plot icon\n    a = plt.axes([xa - icon_center, ya - icon_center, icon_size, icon_size])\n    a.imshow(G.nodes[n][\"image\"])\n    a.axis(\"off\")",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_custom_node_icons",
        "documentation": {}
    },
    {
        "label": "icon_center",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_custom_node_icons",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_custom_node_icons",
        "peekOfCode": "icon_center = icon_size / 2.0\n# Add the respective image to each node\nfor n in G.nodes:\n    xf, yf = tr_figure(pos[n])\n    xa, ya = tr_axes((xf, yf))\n    # get overlapped axes and plot icon\n    a = plt.axes([xa - icon_center, ya - icon_center, icon_size, icon_size])\n    a.imshow(G.nodes[n][\"image\"])\n    a.axis(\"off\")\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_custom_node_icons",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_degree",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_degree",
        "peekOfCode": "G = nx.gnp_random_graph(100, 0.02, seed=10374196)\ndegree_sequence = sorted([d for n, d in G.degree()], reverse=True)\ndmax = max(degree_sequence)\nfig = plt.figure(\"Degree of a random graph\", figsize=(8, 8))\n# Create a gridspec for adding subplots of different sizes\naxgrid = fig.add_gridspec(5, 4)\nax0 = fig.add_subplot(axgrid[0:3, :])\nGcc = G.subgraph(sorted(nx.connected_components(G), key=len, reverse=True)[0])\npos = nx.spring_layout(Gcc, seed=10396953)\nnx.draw_networkx_nodes(Gcc, pos, ax=ax0, node_size=20)",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_degree",
        "documentation": {}
    },
    {
        "label": "degree_sequence",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_degree",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_degree",
        "peekOfCode": "degree_sequence = sorted([d for n, d in G.degree()], reverse=True)\ndmax = max(degree_sequence)\nfig = plt.figure(\"Degree of a random graph\", figsize=(8, 8))\n# Create a gridspec for adding subplots of different sizes\naxgrid = fig.add_gridspec(5, 4)\nax0 = fig.add_subplot(axgrid[0:3, :])\nGcc = G.subgraph(sorted(nx.connected_components(G), key=len, reverse=True)[0])\npos = nx.spring_layout(Gcc, seed=10396953)\nnx.draw_networkx_nodes(Gcc, pos, ax=ax0, node_size=20)\nnx.draw_networkx_edges(Gcc, pos, ax=ax0, alpha=0.4)",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_degree",
        "documentation": {}
    },
    {
        "label": "dmax",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_degree",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_degree",
        "peekOfCode": "dmax = max(degree_sequence)\nfig = plt.figure(\"Degree of a random graph\", figsize=(8, 8))\n# Create a gridspec for adding subplots of different sizes\naxgrid = fig.add_gridspec(5, 4)\nax0 = fig.add_subplot(axgrid[0:3, :])\nGcc = G.subgraph(sorted(nx.connected_components(G), key=len, reverse=True)[0])\npos = nx.spring_layout(Gcc, seed=10396953)\nnx.draw_networkx_nodes(Gcc, pos, ax=ax0, node_size=20)\nnx.draw_networkx_edges(Gcc, pos, ax=ax0, alpha=0.4)\nax0.set_title(\"Connected components of G\")",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_degree",
        "documentation": {}
    },
    {
        "label": "fig",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_degree",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_degree",
        "peekOfCode": "fig = plt.figure(\"Degree of a random graph\", figsize=(8, 8))\n# Create a gridspec for adding subplots of different sizes\naxgrid = fig.add_gridspec(5, 4)\nax0 = fig.add_subplot(axgrid[0:3, :])\nGcc = G.subgraph(sorted(nx.connected_components(G), key=len, reverse=True)[0])\npos = nx.spring_layout(Gcc, seed=10396953)\nnx.draw_networkx_nodes(Gcc, pos, ax=ax0, node_size=20)\nnx.draw_networkx_edges(Gcc, pos, ax=ax0, alpha=0.4)\nax0.set_title(\"Connected components of G\")\nax0.set_axis_off()",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_degree",
        "documentation": {}
    },
    {
        "label": "axgrid",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_degree",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_degree",
        "peekOfCode": "axgrid = fig.add_gridspec(5, 4)\nax0 = fig.add_subplot(axgrid[0:3, :])\nGcc = G.subgraph(sorted(nx.connected_components(G), key=len, reverse=True)[0])\npos = nx.spring_layout(Gcc, seed=10396953)\nnx.draw_networkx_nodes(Gcc, pos, ax=ax0, node_size=20)\nnx.draw_networkx_edges(Gcc, pos, ax=ax0, alpha=0.4)\nax0.set_title(\"Connected components of G\")\nax0.set_axis_off()\nax1 = fig.add_subplot(axgrid[3:, :2])\nax1.plot(degree_sequence, \"b-\", marker=\"o\")",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_degree",
        "documentation": {}
    },
    {
        "label": "ax0",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_degree",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_degree",
        "peekOfCode": "ax0 = fig.add_subplot(axgrid[0:3, :])\nGcc = G.subgraph(sorted(nx.connected_components(G), key=len, reverse=True)[0])\npos = nx.spring_layout(Gcc, seed=10396953)\nnx.draw_networkx_nodes(Gcc, pos, ax=ax0, node_size=20)\nnx.draw_networkx_edges(Gcc, pos, ax=ax0, alpha=0.4)\nax0.set_title(\"Connected components of G\")\nax0.set_axis_off()\nax1 = fig.add_subplot(axgrid[3:, :2])\nax1.plot(degree_sequence, \"b-\", marker=\"o\")\nax1.set_title(\"Degree Rank Plot\")",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_degree",
        "documentation": {}
    },
    {
        "label": "Gcc",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_degree",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_degree",
        "peekOfCode": "Gcc = G.subgraph(sorted(nx.connected_components(G), key=len, reverse=True)[0])\npos = nx.spring_layout(Gcc, seed=10396953)\nnx.draw_networkx_nodes(Gcc, pos, ax=ax0, node_size=20)\nnx.draw_networkx_edges(Gcc, pos, ax=ax0, alpha=0.4)\nax0.set_title(\"Connected components of G\")\nax0.set_axis_off()\nax1 = fig.add_subplot(axgrid[3:, :2])\nax1.plot(degree_sequence, \"b-\", marker=\"o\")\nax1.set_title(\"Degree Rank Plot\")\nax1.set_ylabel(\"Degree\")",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_degree",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_degree",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_degree",
        "peekOfCode": "pos = nx.spring_layout(Gcc, seed=10396953)\nnx.draw_networkx_nodes(Gcc, pos, ax=ax0, node_size=20)\nnx.draw_networkx_edges(Gcc, pos, ax=ax0, alpha=0.4)\nax0.set_title(\"Connected components of G\")\nax0.set_axis_off()\nax1 = fig.add_subplot(axgrid[3:, :2])\nax1.plot(degree_sequence, \"b-\", marker=\"o\")\nax1.set_title(\"Degree Rank Plot\")\nax1.set_ylabel(\"Degree\")\nax1.set_xlabel(\"Rank\")",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_degree",
        "documentation": {}
    },
    {
        "label": "ax1",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_degree",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_degree",
        "peekOfCode": "ax1 = fig.add_subplot(axgrid[3:, :2])\nax1.plot(degree_sequence, \"b-\", marker=\"o\")\nax1.set_title(\"Degree Rank Plot\")\nax1.set_ylabel(\"Degree\")\nax1.set_xlabel(\"Rank\")\nax2 = fig.add_subplot(axgrid[3:, 2:])\nax2.bar(*np.unique(degree_sequence, return_counts=True))\nax2.set_title(\"Degree histogram\")\nax2.set_xlabel(\"Degree\")\nax2.set_ylabel(\"# of Nodes\")",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_degree",
        "documentation": {}
    },
    {
        "label": "ax2",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_degree",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_degree",
        "peekOfCode": "ax2 = fig.add_subplot(axgrid[3:, 2:])\nax2.bar(*np.unique(degree_sequence, return_counts=True))\nax2.set_title(\"Degree histogram\")\nax2.set_xlabel(\"Degree\")\nax2.set_ylabel(\"# of Nodes\")\nfig.tight_layout()\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_degree",
        "documentation": {}
    },
    {
        "label": "seed",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_directed",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_directed",
        "peekOfCode": "seed = 13648  # Seed random number generators for reproducibility\nG = nx.random_k_out_graph(10, 3, 0.5, seed=seed)\npos = nx.spring_layout(G, seed=seed)\nnode_sizes = [3 + 10 * i for i in range(len(G))]\nM = G.number_of_edges()\nedge_colors = range(2, M + 2)\nedge_alphas = [(5 + i) / (M + 4) for i in range(M)]\ncmap = plt.cm.plasma\nnodes = nx.draw_networkx_nodes(G, pos, node_size=node_sizes, node_color=\"indigo\")\nedges = nx.draw_networkx_edges(",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_directed",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_directed",
        "peekOfCode": "G = nx.random_k_out_graph(10, 3, 0.5, seed=seed)\npos = nx.spring_layout(G, seed=seed)\nnode_sizes = [3 + 10 * i for i in range(len(G))]\nM = G.number_of_edges()\nedge_colors = range(2, M + 2)\nedge_alphas = [(5 + i) / (M + 4) for i in range(M)]\ncmap = plt.cm.plasma\nnodes = nx.draw_networkx_nodes(G, pos, node_size=node_sizes, node_color=\"indigo\")\nedges = nx.draw_networkx_edges(\n    G,",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_directed",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_directed",
        "peekOfCode": "pos = nx.spring_layout(G, seed=seed)\nnode_sizes = [3 + 10 * i for i in range(len(G))]\nM = G.number_of_edges()\nedge_colors = range(2, M + 2)\nedge_alphas = [(5 + i) / (M + 4) for i in range(M)]\ncmap = plt.cm.plasma\nnodes = nx.draw_networkx_nodes(G, pos, node_size=node_sizes, node_color=\"indigo\")\nedges = nx.draw_networkx_edges(\n    G,\n    pos,",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "node_sizes",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_directed",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_directed",
        "peekOfCode": "node_sizes = [3 + 10 * i for i in range(len(G))]\nM = G.number_of_edges()\nedge_colors = range(2, M + 2)\nedge_alphas = [(5 + i) / (M + 4) for i in range(M)]\ncmap = plt.cm.plasma\nnodes = nx.draw_networkx_nodes(G, pos, node_size=node_sizes, node_color=\"indigo\")\nedges = nx.draw_networkx_edges(\n    G,\n    pos,\n    node_size=node_sizes,",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_directed",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_directed",
        "peekOfCode": "M = G.number_of_edges()\nedge_colors = range(2, M + 2)\nedge_alphas = [(5 + i) / (M + 4) for i in range(M)]\ncmap = plt.cm.plasma\nnodes = nx.draw_networkx_nodes(G, pos, node_size=node_sizes, node_color=\"indigo\")\nedges = nx.draw_networkx_edges(\n    G,\n    pos,\n    node_size=node_sizes,\n    arrowstyle=\"->\",",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "edge_colors",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_directed",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_directed",
        "peekOfCode": "edge_colors = range(2, M + 2)\nedge_alphas = [(5 + i) / (M + 4) for i in range(M)]\ncmap = plt.cm.plasma\nnodes = nx.draw_networkx_nodes(G, pos, node_size=node_sizes, node_color=\"indigo\")\nedges = nx.draw_networkx_edges(\n    G,\n    pos,\n    node_size=node_sizes,\n    arrowstyle=\"->\",\n    arrowsize=10,",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "edge_alphas",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_directed",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_directed",
        "peekOfCode": "edge_alphas = [(5 + i) / (M + 4) for i in range(M)]\ncmap = plt.cm.plasma\nnodes = nx.draw_networkx_nodes(G, pos, node_size=node_sizes, node_color=\"indigo\")\nedges = nx.draw_networkx_edges(\n    G,\n    pos,\n    node_size=node_sizes,\n    arrowstyle=\"->\",\n    arrowsize=10,\n    edge_color=edge_colors,",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "cmap",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_directed",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_directed",
        "peekOfCode": "cmap = plt.cm.plasma\nnodes = nx.draw_networkx_nodes(G, pos, node_size=node_sizes, node_color=\"indigo\")\nedges = nx.draw_networkx_edges(\n    G,\n    pos,\n    node_size=node_sizes,\n    arrowstyle=\"->\",\n    arrowsize=10,\n    edge_color=edge_colors,\n    edge_cmap=cmap,",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "nodes",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_directed",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_directed",
        "peekOfCode": "nodes = nx.draw_networkx_nodes(G, pos, node_size=node_sizes, node_color=\"indigo\")\nedges = nx.draw_networkx_edges(\n    G,\n    pos,\n    node_size=node_sizes,\n    arrowstyle=\"->\",\n    arrowsize=10,\n    edge_color=edge_colors,\n    edge_cmap=cmap,\n    width=2,",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "edges",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_directed",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_directed",
        "peekOfCode": "edges = nx.draw_networkx_edges(\n    G,\n    pos,\n    node_size=node_sizes,\n    arrowstyle=\"->\",\n    arrowsize=10,\n    edge_color=edge_colors,\n    edge_cmap=cmap,\n    width=2,\n)",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "pc",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_directed",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_directed",
        "peekOfCode": "pc = mpl.collections.PatchCollection(edges, cmap=cmap)\npc.set_array(edge_colors)\nplt.colorbar(pc)\nax = plt.gca()\nax.set_axis_off()\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_directed",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_directed",
        "peekOfCode": "ax = plt.gca()\nax.set_axis_off()\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_edge_colormap",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_edge_colormap",
        "peekOfCode": "G = nx.star_graph(20)\npos = nx.spring_layout(G, seed=63)  # Seed layout for reproducibility\ncolors = range(20)\noptions = {\n    \"node_color\": \"#A0CBE2\",\n    \"edge_color\": colors,\n    \"width\": 4,\n    \"edge_cmap\": plt.cm.Blues,\n    \"with_labels\": False,\n}",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_edge_colormap",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_edge_colormap",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_edge_colormap",
        "peekOfCode": "pos = nx.spring_layout(G, seed=63)  # Seed layout for reproducibility\ncolors = range(20)\noptions = {\n    \"node_color\": \"#A0CBE2\",\n    \"edge_color\": colors,\n    \"width\": 4,\n    \"edge_cmap\": plt.cm.Blues,\n    \"with_labels\": False,\n}\nnx.draw(G, pos, **options)",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_edge_colormap",
        "documentation": {}
    },
    {
        "label": "colors",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_edge_colormap",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_edge_colormap",
        "peekOfCode": "colors = range(20)\noptions = {\n    \"node_color\": \"#A0CBE2\",\n    \"edge_color\": colors,\n    \"width\": 4,\n    \"edge_cmap\": plt.cm.Blues,\n    \"with_labels\": False,\n}\nnx.draw(G, pos, **options)\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_edge_colormap",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_edge_colormap",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_edge_colormap",
        "peekOfCode": "options = {\n    \"node_color\": \"#A0CBE2\",\n    \"edge_color\": colors,\n    \"width\": 4,\n    \"edge_cmap\": plt.cm.Blues,\n    \"with_labels\": False,\n}\nnx.draw(G, pos, **options)\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_edge_colormap",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_ego_graph",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_ego_graph",
        "peekOfCode": "n = 1000\nm = 2\nseed = 20532\nG = nx.barabasi_albert_graph(n, m, seed=seed)\n# find node with largest degree\nnode_and_degree = G.degree()\n(largest_hub, degree) = sorted(node_and_degree, key=itemgetter(1))[-1]\n# Create ego graph of main hub\nhub_ego = nx.ego_graph(G, largest_hub)\n# Draw graph",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_ego_graph",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_ego_graph",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_ego_graph",
        "peekOfCode": "m = 2\nseed = 20532\nG = nx.barabasi_albert_graph(n, m, seed=seed)\n# find node with largest degree\nnode_and_degree = G.degree()\n(largest_hub, degree) = sorted(node_and_degree, key=itemgetter(1))[-1]\n# Create ego graph of main hub\nhub_ego = nx.ego_graph(G, largest_hub)\n# Draw graph\npos = nx.spring_layout(hub_ego, seed=seed)  # Seed layout for reproducibility",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_ego_graph",
        "documentation": {}
    },
    {
        "label": "seed",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_ego_graph",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_ego_graph",
        "peekOfCode": "seed = 20532\nG = nx.barabasi_albert_graph(n, m, seed=seed)\n# find node with largest degree\nnode_and_degree = G.degree()\n(largest_hub, degree) = sorted(node_and_degree, key=itemgetter(1))[-1]\n# Create ego graph of main hub\nhub_ego = nx.ego_graph(G, largest_hub)\n# Draw graph\npos = nx.spring_layout(hub_ego, seed=seed)  # Seed layout for reproducibility\nnx.draw(hub_ego, pos, node_color=\"b\", node_size=50, with_labels=False)",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_ego_graph",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_ego_graph",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_ego_graph",
        "peekOfCode": "G = nx.barabasi_albert_graph(n, m, seed=seed)\n# find node with largest degree\nnode_and_degree = G.degree()\n(largest_hub, degree) = sorted(node_and_degree, key=itemgetter(1))[-1]\n# Create ego graph of main hub\nhub_ego = nx.ego_graph(G, largest_hub)\n# Draw graph\npos = nx.spring_layout(hub_ego, seed=seed)  # Seed layout for reproducibility\nnx.draw(hub_ego, pos, node_color=\"b\", node_size=50, with_labels=False)\n# Draw ego as large and red",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_ego_graph",
        "documentation": {}
    },
    {
        "label": "node_and_degree",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_ego_graph",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_ego_graph",
        "peekOfCode": "node_and_degree = G.degree()\n(largest_hub, degree) = sorted(node_and_degree, key=itemgetter(1))[-1]\n# Create ego graph of main hub\nhub_ego = nx.ego_graph(G, largest_hub)\n# Draw graph\npos = nx.spring_layout(hub_ego, seed=seed)  # Seed layout for reproducibility\nnx.draw(hub_ego, pos, node_color=\"b\", node_size=50, with_labels=False)\n# Draw ego as large and red\noptions = {\"node_size\": 300, \"node_color\": \"r\"}\nnx.draw_networkx_nodes(hub_ego, pos, nodelist=[largest_hub], **options)",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_ego_graph",
        "documentation": {}
    },
    {
        "label": "hub_ego",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_ego_graph",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_ego_graph",
        "peekOfCode": "hub_ego = nx.ego_graph(G, largest_hub)\n# Draw graph\npos = nx.spring_layout(hub_ego, seed=seed)  # Seed layout for reproducibility\nnx.draw(hub_ego, pos, node_color=\"b\", node_size=50, with_labels=False)\n# Draw ego as large and red\noptions = {\"node_size\": 300, \"node_color\": \"r\"}\nnx.draw_networkx_nodes(hub_ego, pos, nodelist=[largest_hub], **options)\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_ego_graph",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_ego_graph",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_ego_graph",
        "peekOfCode": "pos = nx.spring_layout(hub_ego, seed=seed)  # Seed layout for reproducibility\nnx.draw(hub_ego, pos, node_color=\"b\", node_size=50, with_labels=False)\n# Draw ego as large and red\noptions = {\"node_size\": 300, \"node_color\": \"r\"}\nnx.draw_networkx_nodes(hub_ego, pos, nodelist=[largest_hub], **options)\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_ego_graph",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_ego_graph",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_ego_graph",
        "peekOfCode": "options = {\"node_size\": 300, \"node_color\": \"r\"}\nnx.draw_networkx_nodes(hub_ego, pos, nodelist=[largest_hub], **options)\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_ego_graph",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_eigenvalues",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_eigenvalues",
        "peekOfCode": "n = 1000  # 1000 nodes\nm = 5000  # 5000 edges\nG = nx.gnm_random_graph(n, m, seed=5040)  # Seed for reproducibility\nL = nx.normalized_laplacian_matrix(G)\ne = numpy.linalg.eigvals(L.A)\nprint(\"Largest eigenvalue:\", max(e))\nprint(\"Smallest eigenvalue:\", min(e))\nplt.hist(e, bins=100)  # histogram with 100 bins\nplt.xlim(0, 2)  # eigenvalues between 0 and 2\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_eigenvalues",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_eigenvalues",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_eigenvalues",
        "peekOfCode": "m = 5000  # 5000 edges\nG = nx.gnm_random_graph(n, m, seed=5040)  # Seed for reproducibility\nL = nx.normalized_laplacian_matrix(G)\ne = numpy.linalg.eigvals(L.A)\nprint(\"Largest eigenvalue:\", max(e))\nprint(\"Smallest eigenvalue:\", min(e))\nplt.hist(e, bins=100)  # histogram with 100 bins\nplt.xlim(0, 2)  # eigenvalues between 0 and 2\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_eigenvalues",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_eigenvalues",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_eigenvalues",
        "peekOfCode": "G = nx.gnm_random_graph(n, m, seed=5040)  # Seed for reproducibility\nL = nx.normalized_laplacian_matrix(G)\ne = numpy.linalg.eigvals(L.A)\nprint(\"Largest eigenvalue:\", max(e))\nprint(\"Smallest eigenvalue:\", min(e))\nplt.hist(e, bins=100)  # histogram with 100 bins\nplt.xlim(0, 2)  # eigenvalues between 0 and 2\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_eigenvalues",
        "documentation": {}
    },
    {
        "label": "L",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_eigenvalues",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_eigenvalues",
        "peekOfCode": "L = nx.normalized_laplacian_matrix(G)\ne = numpy.linalg.eigvals(L.A)\nprint(\"Largest eigenvalue:\", max(e))\nprint(\"Smallest eigenvalue:\", min(e))\nplt.hist(e, bins=100)  # histogram with 100 bins\nplt.xlim(0, 2)  # eigenvalues between 0 and 2\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_eigenvalues",
        "documentation": {}
    },
    {
        "label": "e",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_eigenvalues",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_eigenvalues",
        "peekOfCode": "e = numpy.linalg.eigvals(L.A)\nprint(\"Largest eigenvalue:\", max(e))\nprint(\"Smallest eigenvalue:\", min(e))\nplt.hist(e, bins=100)  # histogram with 100 bins\nplt.xlim(0, 2)  # eigenvalues between 0 and 2\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_eigenvalues",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_four_grids",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_four_grids",
        "peekOfCode": "G = nx.grid_2d_graph(4, 4)  # 4x4 grid\npos = nx.spring_layout(G, iterations=100, seed=39775)\n# Create a 2x2 subplot\nfig, all_axes = plt.subplots(2, 2)\nax = all_axes.flat\nnx.draw(G, pos, ax=ax[0], font_size=8)\nnx.draw(G, pos, ax=ax[1], node_size=0, with_labels=False)\nnx.draw(\n    G,\n    pos,",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_four_grids",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_four_grids",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_four_grids",
        "peekOfCode": "pos = nx.spring_layout(G, iterations=100, seed=39775)\n# Create a 2x2 subplot\nfig, all_axes = plt.subplots(2, 2)\nax = all_axes.flat\nnx.draw(G, pos, ax=ax[0], font_size=8)\nnx.draw(G, pos, ax=ax[1], node_size=0, with_labels=False)\nnx.draw(\n    G,\n    pos,\n    ax=ax[2],",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_four_grids",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_four_grids",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_four_grids",
        "peekOfCode": "ax = all_axes.flat\nnx.draw(G, pos, ax=ax[0], font_size=8)\nnx.draw(G, pos, ax=ax[1], node_size=0, with_labels=False)\nnx.draw(\n    G,\n    pos,\n    ax=ax[2],\n    node_color=\"tab:green\",\n    edgecolors=\"tab:gray\",  # Node surface color\n    edge_color=\"tab:gray\",  # Color of graph edges",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_four_grids",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_four_grids",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_four_grids",
        "peekOfCode": "H = G.to_directed()\nnx.draw(\n    H,\n    pos,\n    ax=ax[3],\n    node_color=\"tab:orange\",\n    node_size=20,\n    with_labels=False,\n    arrowsize=10,\n    width=2,",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_four_grids",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_house_with_colors",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_house_with_colors",
        "peekOfCode": "G = nx.house_graph()\n# explicitly set positions\npos = {0: (0, 0), 1: (1, 0), 2: (0, 1), 3: (1, 1), 4: (0.5, 2.0)}\n# Plot nodes with different properties for the \"wall\" and \"roof\" nodes\nnx.draw_networkx_nodes(\n    G, pos, node_size=3000, nodelist=[0, 1, 2, 3], node_color=\"tab:blue\"\n)\nnx.draw_networkx_nodes(G, pos, node_size=2000, nodelist=[4], node_color=\"tab:orange\")\nnx.draw_networkx_edges(G, pos, alpha=0.5, width=6)\n# Customize axes",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_house_with_colors",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_house_with_colors",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_house_with_colors",
        "peekOfCode": "pos = {0: (0, 0), 1: (1, 0), 2: (0, 1), 3: (1, 1), 4: (0.5, 2.0)}\n# Plot nodes with different properties for the \"wall\" and \"roof\" nodes\nnx.draw_networkx_nodes(\n    G, pos, node_size=3000, nodelist=[0, 1, 2, 3], node_color=\"tab:blue\"\n)\nnx.draw_networkx_nodes(G, pos, node_size=2000, nodelist=[4], node_color=\"tab:orange\")\nnx.draw_networkx_edges(G, pos, alpha=0.5, width=6)\n# Customize axes\nax = plt.gca()\nax.margins(0.11)",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_house_with_colors",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_house_with_colors",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_house_with_colors",
        "peekOfCode": "ax = plt.gca()\nax.margins(0.11)\nplt.tight_layout()\nplt.axis(\"off\")\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_house_with_colors",
        "documentation": {}
    },
    {
        "label": "miles_graph",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_knuth_miles",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_knuth_miles",
        "peekOfCode": "def miles_graph():\n    \"\"\"Return the cites example graph in miles_dat.txt\n    from the Stanford GraphBase.\n    \"\"\"\n    # open file miles_dat.txt.gz (or miles_dat.txt)\n    fh = gzip.open(\"knuth_miles.txt.gz\", \"r\")\n    G = nx.Graph()\n    G.position = {}\n    G.population = {}\n    cities = []",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_knuth_miles",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_knuth_miles",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_knuth_miles",
        "peekOfCode": "G = miles_graph()\nprint(\"Loaded miles_dat.txt containing 128 cities.\")\nprint(G)\n# make new graph of cites, edge if less then 300 miles between them\nH = nx.Graph()\nfor v in G:\n    H.add_node(v)\nfor (u, v, d) in G.edges(data=True):\n    if d[\"weight\"] < 300:\n        H.add_edge(u, v)",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_knuth_miles",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_knuth_miles",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_knuth_miles",
        "peekOfCode": "H = nx.Graph()\nfor v in G:\n    H.add_node(v)\nfor (u, v, d) in G.edges(data=True):\n    if d[\"weight\"] < 300:\n        H.add_edge(u, v)\n# draw with matplotlib/pylab\nfig = plt.figure(figsize=(8, 6))\n# nodes colored by degree sized by population\nnode_color = [float(H.degree(v)) for v in H]",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_knuth_miles",
        "documentation": {}
    },
    {
        "label": "fig",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_knuth_miles",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_knuth_miles",
        "peekOfCode": "fig = plt.figure(figsize=(8, 6))\n# nodes colored by degree sized by population\nnode_color = [float(H.degree(v)) for v in H]\n# Use cartopy to provide a backdrop for the visualization\ntry:\n    import cartopy.crs as ccrs\n    import cartopy.io.shapereader as shpreader\n    ax = fig.add_axes([0, 0, 1, 1], projection=ccrs.LambertConformal(), frameon=False)\n    ax.set_extent([-125, -66.5, 20, 50], ccrs.Geodetic())\n    # Add map of countries & US states as a backdrop",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_knuth_miles",
        "documentation": {}
    },
    {
        "label": "node_color",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_knuth_miles",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_knuth_miles",
        "peekOfCode": "node_color = [float(H.degree(v)) for v in H]\n# Use cartopy to provide a backdrop for the visualization\ntry:\n    import cartopy.crs as ccrs\n    import cartopy.io.shapereader as shpreader\n    ax = fig.add_axes([0, 0, 1, 1], projection=ccrs.LambertConformal(), frameon=False)\n    ax.set_extent([-125, -66.5, 20, 50], ccrs.Geodetic())\n    # Add map of countries & US states as a backdrop\n    for shapename in (\"admin_1_states_provinces_lakes_shp\", \"admin_0_countries\"):\n        shp = shpreader.natural_earth(",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_knuth_miles",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_labels_and_colors",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "G = nx.cubical_graph()\npos = nx.spring_layout(G, seed=3113794652)  # positions for all nodes\n# nodes\noptions = {\"edgecolors\": \"tab:gray\", \"node_size\": 800, \"alpha\": 0.9}\nnx.draw_networkx_nodes(G, pos, nodelist=[0, 1, 2, 3], node_color=\"tab:red\", **options)\nnx.draw_networkx_nodes(G, pos, nodelist=[4, 5, 6, 7], node_color=\"tab:blue\", **options)\n# edges\nnx.draw_networkx_edges(G, pos, width=1.0, alpha=0.5)\nnx.draw_networkx_edges(\n    G,",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_labels_and_colors",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "pos = nx.spring_layout(G, seed=3113794652)  # positions for all nodes\n# nodes\noptions = {\"edgecolors\": \"tab:gray\", \"node_size\": 800, \"alpha\": 0.9}\nnx.draw_networkx_nodes(G, pos, nodelist=[0, 1, 2, 3], node_color=\"tab:red\", **options)\nnx.draw_networkx_nodes(G, pos, nodelist=[4, 5, 6, 7], node_color=\"tab:blue\", **options)\n# edges\nnx.draw_networkx_edges(G, pos, width=1.0, alpha=0.5)\nnx.draw_networkx_edges(\n    G,\n    pos,",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_labels_and_colors",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "options = {\"edgecolors\": \"tab:gray\", \"node_size\": 800, \"alpha\": 0.9}\nnx.draw_networkx_nodes(G, pos, nodelist=[0, 1, 2, 3], node_color=\"tab:red\", **options)\nnx.draw_networkx_nodes(G, pos, nodelist=[4, 5, 6, 7], node_color=\"tab:blue\", **options)\n# edges\nnx.draw_networkx_edges(G, pos, width=1.0, alpha=0.5)\nnx.draw_networkx_edges(\n    G,\n    pos,\n    edgelist=[(0, 1), (1, 2), (2, 3), (3, 0)],\n    width=8,",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "labels",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_labels_and_colors",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "labels = {}\nlabels[0] = r\"$a$\"\nlabels[1] = r\"$b$\"\nlabels[2] = r\"$c$\"\nlabels[3] = r\"$d$\"\nlabels[4] = r\"$\\alpha$\"\nlabels[5] = r\"$\\beta$\"\nlabels[6] = r\"$\\gamma$\"\nlabels[7] = r\"$\\delta$\"\nnx.draw_networkx_labels(G, pos, labels, font_size=22, font_color=\"whitesmoke\")",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "labels[0]",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_labels_and_colors",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "labels[0] = r\"$a$\"\nlabels[1] = r\"$b$\"\nlabels[2] = r\"$c$\"\nlabels[3] = r\"$d$\"\nlabels[4] = r\"$\\alpha$\"\nlabels[5] = r\"$\\beta$\"\nlabels[6] = r\"$\\gamma$\"\nlabels[7] = r\"$\\delta$\"\nnx.draw_networkx_labels(G, pos, labels, font_size=22, font_color=\"whitesmoke\")\nplt.tight_layout()",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "labels[1]",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_labels_and_colors",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "labels[1] = r\"$b$\"\nlabels[2] = r\"$c$\"\nlabels[3] = r\"$d$\"\nlabels[4] = r\"$\\alpha$\"\nlabels[5] = r\"$\\beta$\"\nlabels[6] = r\"$\\gamma$\"\nlabels[7] = r\"$\\delta$\"\nnx.draw_networkx_labels(G, pos, labels, font_size=22, font_color=\"whitesmoke\")\nplt.tight_layout()\nplt.axis(\"off\")",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "labels[2]",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_labels_and_colors",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "labels[2] = r\"$c$\"\nlabels[3] = r\"$d$\"\nlabels[4] = r\"$\\alpha$\"\nlabels[5] = r\"$\\beta$\"\nlabels[6] = r\"$\\gamma$\"\nlabels[7] = r\"$\\delta$\"\nnx.draw_networkx_labels(G, pos, labels, font_size=22, font_color=\"whitesmoke\")\nplt.tight_layout()\nplt.axis(\"off\")\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "labels[3]",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_labels_and_colors",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "labels[3] = r\"$d$\"\nlabels[4] = r\"$\\alpha$\"\nlabels[5] = r\"$\\beta$\"\nlabels[6] = r\"$\\gamma$\"\nlabels[7] = r\"$\\delta$\"\nnx.draw_networkx_labels(G, pos, labels, font_size=22, font_color=\"whitesmoke\")\nplt.tight_layout()\nplt.axis(\"off\")\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "labels[4]",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_labels_and_colors",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "labels[4] = r\"$\\alpha$\"\nlabels[5] = r\"$\\beta$\"\nlabels[6] = r\"$\\gamma$\"\nlabels[7] = r\"$\\delta$\"\nnx.draw_networkx_labels(G, pos, labels, font_size=22, font_color=\"whitesmoke\")\nplt.tight_layout()\nplt.axis(\"off\")\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "labels[5]",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_labels_and_colors",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "labels[5] = r\"$\\beta$\"\nlabels[6] = r\"$\\gamma$\"\nlabels[7] = r\"$\\delta$\"\nnx.draw_networkx_labels(G, pos, labels, font_size=22, font_color=\"whitesmoke\")\nplt.tight_layout()\nplt.axis(\"off\")\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "labels[6]",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_labels_and_colors",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "labels[6] = r\"$\\gamma$\"\nlabels[7] = r\"$\\delta$\"\nnx.draw_networkx_labels(G, pos, labels, font_size=22, font_color=\"whitesmoke\")\nplt.tight_layout()\nplt.axis(\"off\")\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "labels[7]",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_labels_and_colors",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "labels[7] = r\"$\\delta$\"\nnx.draw_networkx_labels(G, pos, labels, font_size=22, font_color=\"whitesmoke\")\nplt.tight_layout()\nplt.axis(\"off\")\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "multilayered_graph",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_multipartite_graph",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_multipartite_graph",
        "peekOfCode": "def multilayered_graph(*subset_sizes):\n    extents = nx.utils.pairwise(itertools.accumulate((0,) + subset_sizes))\n    layers = [range(start, end) for start, end in extents]\n    G = nx.Graph()\n    for (i, layer) in enumerate(layers):\n        G.add_nodes_from(layer, layer=i)\n    for layer1, layer2 in nx.utils.pairwise(layers):\n        G.add_edges_from(itertools.product(layer1, layer2))\n    return G\nG = multilayered_graph(*subset_sizes)",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_multipartite_graph",
        "documentation": {}
    },
    {
        "label": "subset_sizes",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_multipartite_graph",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_multipartite_graph",
        "peekOfCode": "subset_sizes = [5, 5, 4, 3, 2, 4, 4, 3]\nsubset_color = [\n    \"gold\",\n    \"violet\",\n    \"violet\",\n    \"violet\",\n    \"violet\",\n    \"limegreen\",\n    \"limegreen\",\n    \"darkorange\",",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_multipartite_graph",
        "documentation": {}
    },
    {
        "label": "subset_color",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_multipartite_graph",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_multipartite_graph",
        "peekOfCode": "subset_color = [\n    \"gold\",\n    \"violet\",\n    \"violet\",\n    \"violet\",\n    \"violet\",\n    \"limegreen\",\n    \"limegreen\",\n    \"darkorange\",\n]",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_multipartite_graph",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_multipartite_graph",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_multipartite_graph",
        "peekOfCode": "G = multilayered_graph(*subset_sizes)\ncolor = [subset_color[data[\"layer\"]] for v, data in G.nodes(data=True)]\npos = nx.multipartite_layout(G, subset_key=\"layer\")\nplt.figure(figsize=(8, 8))\nnx.draw(G, pos, node_color=color, with_labels=False)\nplt.axis(\"equal\")\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_multipartite_graph",
        "documentation": {}
    },
    {
        "label": "color",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_multipartite_graph",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_multipartite_graph",
        "peekOfCode": "color = [subset_color[data[\"layer\"]] for v, data in G.nodes(data=True)]\npos = nx.multipartite_layout(G, subset_key=\"layer\")\nplt.figure(figsize=(8, 8))\nnx.draw(G, pos, node_color=color, with_labels=False)\nplt.axis(\"equal\")\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_multipartite_graph",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_multipartite_graph",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_multipartite_graph",
        "peekOfCode": "pos = nx.multipartite_layout(G, subset_key=\"layer\")\nplt.figure(figsize=(8, 8))\nnx.draw(G, pos, node_color=color, with_labels=False)\nplt.axis(\"equal\")\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_multipartite_graph",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_node_colormap",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_node_colormap",
        "peekOfCode": "G = nx.cycle_graph(24)\npos = nx.circular_layout(G)\nnx.draw(G, pos, node_color=range(24), node_size=800, cmap=plt.cm.Blues)\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_node_colormap",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_node_colormap",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_node_colormap",
        "peekOfCode": "pos = nx.circular_layout(G)\nnx.draw(G, pos, node_color=range(24), node_size=800, cmap=plt.cm.Blues)\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_node_colormap",
        "documentation": {}
    },
    {
        "label": "cycle",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_rainbow_coloring",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_rainbow_coloring",
        "peekOfCode": "def cycle(nlist, n):\n    return nlist[-n:] + nlist[:-n]\n# Rotate nodes around the circle and assign colors for each edge based on\n# node distance\nnodes = list(G.nodes())\nfor i, nd in enumerate(ndist_iter):\n    for u, v in zip(nodes, cycle(nodes, i + 1)):\n        G[u][v][\"color\"] = node_dist_to_color[nd]\npos = nx.circular_layout(G)\n# Create a figure with 1:1 aspect ratio to preserve the circle.",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_rainbow_coloring",
        "documentation": {}
    },
    {
        "label": "node_dist_to_color",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_rainbow_coloring",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_rainbow_coloring",
        "peekOfCode": "node_dist_to_color = {\n    1: \"tab:red\",\n    2: \"tab:orange\",\n    3: \"tab:olive\",\n    4: \"tab:green\",\n    5: \"tab:blue\",\n    6: \"tab:purple\",\n}\n# Create a complete graph with an odd number of nodes\nnnodes = 13",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_rainbow_coloring",
        "documentation": {}
    },
    {
        "label": "nnodes",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_rainbow_coloring",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_rainbow_coloring",
        "peekOfCode": "nnodes = 13\nG = nx.complete_graph(nnodes)\n# A graph with (2n + 1) nodes requires n colors for the edges\nn = (nnodes - 1) // 2\nndist_iter = list(range(1, n + 1))\n# Take advantage of circular symmetry in determining node distances\nndist_iter += ndist_iter[::-1]\ndef cycle(nlist, n):\n    return nlist[-n:] + nlist[:-n]\n# Rotate nodes around the circle and assign colors for each edge based on",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_rainbow_coloring",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_rainbow_coloring",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_rainbow_coloring",
        "peekOfCode": "G = nx.complete_graph(nnodes)\n# A graph with (2n + 1) nodes requires n colors for the edges\nn = (nnodes - 1) // 2\nndist_iter = list(range(1, n + 1))\n# Take advantage of circular symmetry in determining node distances\nndist_iter += ndist_iter[::-1]\ndef cycle(nlist, n):\n    return nlist[-n:] + nlist[:-n]\n# Rotate nodes around the circle and assign colors for each edge based on\n# node distance",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_rainbow_coloring",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_rainbow_coloring",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_rainbow_coloring",
        "peekOfCode": "n = (nnodes - 1) // 2\nndist_iter = list(range(1, n + 1))\n# Take advantage of circular symmetry in determining node distances\nndist_iter += ndist_iter[::-1]\ndef cycle(nlist, n):\n    return nlist[-n:] + nlist[:-n]\n# Rotate nodes around the circle and assign colors for each edge based on\n# node distance\nnodes = list(G.nodes())\nfor i, nd in enumerate(ndist_iter):",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_rainbow_coloring",
        "documentation": {}
    },
    {
        "label": "ndist_iter",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_rainbow_coloring",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_rainbow_coloring",
        "peekOfCode": "ndist_iter = list(range(1, n + 1))\n# Take advantage of circular symmetry in determining node distances\nndist_iter += ndist_iter[::-1]\ndef cycle(nlist, n):\n    return nlist[-n:] + nlist[:-n]\n# Rotate nodes around the circle and assign colors for each edge based on\n# node distance\nnodes = list(G.nodes())\nfor i, nd in enumerate(ndist_iter):\n    for u, v in zip(nodes, cycle(nodes, i + 1)):",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_rainbow_coloring",
        "documentation": {}
    },
    {
        "label": "nodes",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_rainbow_coloring",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_rainbow_coloring",
        "peekOfCode": "nodes = list(G.nodes())\nfor i, nd in enumerate(ndist_iter):\n    for u, v in zip(nodes, cycle(nodes, i + 1)):\n        G[u][v][\"color\"] = node_dist_to_color[nd]\npos = nx.circular_layout(G)\n# Create a figure with 1:1 aspect ratio to preserve the circle.\nfig, ax = plt.subplots(figsize=(8, 8))\nnode_opts = {\"node_size\": 500, \"node_color\": \"w\", \"edgecolors\": \"k\", \"linewidths\": 2.0}\nnx.draw_networkx_nodes(G, pos, **node_opts)\nnx.draw_networkx_labels(G, pos, font_size=14)",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_rainbow_coloring",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_rainbow_coloring",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_rainbow_coloring",
        "peekOfCode": "pos = nx.circular_layout(G)\n# Create a figure with 1:1 aspect ratio to preserve the circle.\nfig, ax = plt.subplots(figsize=(8, 8))\nnode_opts = {\"node_size\": 500, \"node_color\": \"w\", \"edgecolors\": \"k\", \"linewidths\": 2.0}\nnx.draw_networkx_nodes(G, pos, **node_opts)\nnx.draw_networkx_labels(G, pos, font_size=14)\n# Extract color from edge data\nedge_colors = [edgedata[\"color\"] for _, _, edgedata in G.edges(data=True)]\nnx.draw_networkx_edges(G, pos, width=2.0, edge_color=edge_colors)\nax.set_axis_off()",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_rainbow_coloring",
        "documentation": {}
    },
    {
        "label": "node_opts",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_rainbow_coloring",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_rainbow_coloring",
        "peekOfCode": "node_opts = {\"node_size\": 500, \"node_color\": \"w\", \"edgecolors\": \"k\", \"linewidths\": 2.0}\nnx.draw_networkx_nodes(G, pos, **node_opts)\nnx.draw_networkx_labels(G, pos, font_size=14)\n# Extract color from edge data\nedge_colors = [edgedata[\"color\"] for _, _, edgedata in G.edges(data=True)]\nnx.draw_networkx_edges(G, pos, width=2.0, edge_color=edge_colors)\nax.set_axis_off()\nfig.tight_layout()\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_rainbow_coloring",
        "documentation": {}
    },
    {
        "label": "edge_colors",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_rainbow_coloring",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_rainbow_coloring",
        "peekOfCode": "edge_colors = [edgedata[\"color\"] for _, _, edgedata in G.edges(data=True)]\nnx.draw_networkx_edges(G, pos, width=2.0, edge_color=edge_colors)\nax.set_axis_off()\nfig.tight_layout()\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_rainbow_coloring",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_random_geometric_graph",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_random_geometric_graph",
        "peekOfCode": "G = nx.random_geometric_graph(200, 0.125, seed=896803)\n# position is stored as node attribute data for random_geometric_graph\npos = nx.get_node_attributes(G, \"pos\")\n# find node near center (0.5,0.5)\ndmin = 1\nncenter = 0\nfor n in pos:\n    x, y = pos[n]\n    d = (x - 0.5) ** 2 + (y - 0.5) ** 2\n    if d < dmin:",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_random_geometric_graph",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_random_geometric_graph",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_random_geometric_graph",
        "peekOfCode": "pos = nx.get_node_attributes(G, \"pos\")\n# find node near center (0.5,0.5)\ndmin = 1\nncenter = 0\nfor n in pos:\n    x, y = pos[n]\n    d = (x - 0.5) ** 2 + (y - 0.5) ** 2\n    if d < dmin:\n        ncenter = n\n        dmin = d",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_random_geometric_graph",
        "documentation": {}
    },
    {
        "label": "dmin",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_random_geometric_graph",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_random_geometric_graph",
        "peekOfCode": "dmin = 1\nncenter = 0\nfor n in pos:\n    x, y = pos[n]\n    d = (x - 0.5) ** 2 + (y - 0.5) ** 2\n    if d < dmin:\n        ncenter = n\n        dmin = d\n# color by path length from node near center\np = dict(nx.single_source_shortest_path_length(G, ncenter))",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_random_geometric_graph",
        "documentation": {}
    },
    {
        "label": "ncenter",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_random_geometric_graph",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_random_geometric_graph",
        "peekOfCode": "ncenter = 0\nfor n in pos:\n    x, y = pos[n]\n    d = (x - 0.5) ** 2 + (y - 0.5) ** 2\n    if d < dmin:\n        ncenter = n\n        dmin = d\n# color by path length from node near center\np = dict(nx.single_source_shortest_path_length(G, ncenter))\nplt.figure(figsize=(8, 8))",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_random_geometric_graph",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_random_geometric_graph",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_random_geometric_graph",
        "peekOfCode": "p = dict(nx.single_source_shortest_path_length(G, ncenter))\nplt.figure(figsize=(8, 8))\nnx.draw_networkx_edges(G, pos, alpha=0.4)\nnx.draw_networkx_nodes(\n    G,\n    pos,\n    nodelist=list(p.keys()),\n    node_size=80,\n    node_color=list(p.values()),\n    cmap=plt.cm.Reds_r,",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_random_geometric_graph",
        "documentation": {}
    },
    {
        "label": "G1",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_sampson",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_sampson",
        "peekOfCode": "G1 = nx.read_edgelist(e1, delimiter=\"\\t\")\nG2 = nx.read_edgelist(e2, delimiter=\"\\t\")\nG3 = nx.read_edgelist(e3, delimiter=\"\\t\")\npos = nx.spring_layout(G3, iterations=100, seed=173)\nplt.clf()\nplt.subplot(221)\nplt.title(\"samplike1\")\nnx.draw(G1, pos, node_size=50, with_labels=False)\nplt.subplot(222)\nplt.title(\"samplike2\")",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_sampson",
        "documentation": {}
    },
    {
        "label": "G2",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_sampson",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_sampson",
        "peekOfCode": "G2 = nx.read_edgelist(e2, delimiter=\"\\t\")\nG3 = nx.read_edgelist(e3, delimiter=\"\\t\")\npos = nx.spring_layout(G3, iterations=100, seed=173)\nplt.clf()\nplt.subplot(221)\nplt.title(\"samplike1\")\nnx.draw(G1, pos, node_size=50, with_labels=False)\nplt.subplot(222)\nplt.title(\"samplike2\")\nnx.draw(G2, pos, node_size=50, with_labels=False)",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_sampson",
        "documentation": {}
    },
    {
        "label": "G3",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_sampson",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_sampson",
        "peekOfCode": "G3 = nx.read_edgelist(e3, delimiter=\"\\t\")\npos = nx.spring_layout(G3, iterations=100, seed=173)\nplt.clf()\nplt.subplot(221)\nplt.title(\"samplike1\")\nnx.draw(G1, pos, node_size=50, with_labels=False)\nplt.subplot(222)\nplt.title(\"samplike2\")\nnx.draw(G2, pos, node_size=50, with_labels=False)\nplt.subplot(223)",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_sampson",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_sampson",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_sampson",
        "peekOfCode": "pos = nx.spring_layout(G3, iterations=100, seed=173)\nplt.clf()\nplt.subplot(221)\nplt.title(\"samplike1\")\nnx.draw(G1, pos, node_size=50, with_labels=False)\nplt.subplot(222)\nplt.title(\"samplike2\")\nnx.draw(G2, pos, node_size=50, with_labels=False)\nplt.subplot(223)\nplt.title(\"samplike3\")",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_sampson",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_selfloops",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_selfloops",
        "peekOfCode": "G = nx.complete_graph(3, create_using=nx.DiGraph)\nG.add_edge(0, 0)\npos = nx.circular_layout(G)\n# As of version 2.6, self-loops are drawn by default with the same styling as\n# other edges\nnx.draw(G, pos, with_labels=True)\n# Add self-loops to the remaining nodes\nedgelist = [(1, 1), (2, 2)]\nG.add_edges_from(edgelist)\n# Draw the newly added self-loops with different formatting",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_selfloops",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_selfloops",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_selfloops",
        "peekOfCode": "pos = nx.circular_layout(G)\n# As of version 2.6, self-loops are drawn by default with the same styling as\n# other edges\nnx.draw(G, pos, with_labels=True)\n# Add self-loops to the remaining nodes\nedgelist = [(1, 1), (2, 2)]\nG.add_edges_from(edgelist)\n# Draw the newly added self-loops with different formatting\nnx.draw_networkx_edges(G, pos, edgelist=edgelist, arrowstyle=\"<|-\", style=\"dashed\")\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_selfloops",
        "documentation": {}
    },
    {
        "label": "edgelist",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_selfloops",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_selfloops",
        "peekOfCode": "edgelist = [(1, 1), (2, 2)]\nG.add_edges_from(edgelist)\n# Draw the newly added self-loops with different formatting\nnx.draw_networkx_edges(G, pos, edgelist=edgelist, arrowstyle=\"<|-\", style=\"dashed\")\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_selfloops",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_simple_path",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_simple_path",
        "peekOfCode": "G = nx.path_graph(8)\npos = nx.spring_layout(G, seed=47)  # Seed layout for reproducibility\nnx.draw(G, pos=pos)\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_simple_path",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_simple_path",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_simple_path",
        "peekOfCode": "pos = nx.spring_layout(G, seed=47)  # Seed layout for reproducibility\nnx.draw(G, pos=pos)\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_simple_path",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_spectral_grid",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_spectral_grid",
        "peekOfCode": "options = {\"node_color\": \"C0\", \"node_size\": 100}\nG = nx.grid_2d_graph(6, 6)\nplt.subplot(332)\nnx.draw_spectral(G, **options)\nG.remove_edge((2, 2), (2, 3))\nplt.subplot(334)\nnx.draw_spectral(G, **options)\nG.remove_edge((3, 2), (3, 3))\nplt.subplot(335)\nnx.draw_spectral(G, **options)",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_spectral_grid",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_spectral_grid",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_spectral_grid",
        "peekOfCode": "G = nx.grid_2d_graph(6, 6)\nplt.subplot(332)\nnx.draw_spectral(G, **options)\nG.remove_edge((2, 2), (2, 3))\nplt.subplot(334)\nnx.draw_spectral(G, **options)\nG.remove_edge((3, 2), (3, 3))\nplt.subplot(335)\nnx.draw_spectral(G, **options)\nG.remove_edge((2, 2), (3, 2))",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_spectral_grid",
        "documentation": {}
    },
    {
        "label": "mbox_graph",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_unix_email",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_unix_email",
        "peekOfCode": "def mbox_graph():\n    mbox = mailbox.mbox(\"unix_email.mbox\")  # parse unix mailbox\n    G = nx.MultiDiGraph()  # create empty graph\n    # parse each messages and build graph\n    for msg in mbox:  # msg is python email.Message.Message object\n        (source_name, source_addr) = parseaddr(msg[\"From\"])  # sender\n        # get all recipients\n        # see https://docs.python.org/3/library/email.html\n        tos = msg.get_all(\"to\", [])\n        ccs = msg.get_all(\"cc\", [])",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_unix_email",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_unix_email",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_unix_email",
        "peekOfCode": "G = mbox_graph()\n# print edges with message subject\nfor (u, v, d) in G.edges(data=True):\n    print(f\"From: {u} To: {v} Subject: {d['message']['Subject']}\")\npos = nx.spring_layout(G, iterations=10, seed=227)\nnx.draw(G, pos, node_size=0, alpha=0.4, edge_color=\"r\", font_size=16, with_labels=True)\nax = plt.gca()\nax.margins(0.08)\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_unix_email",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_unix_email",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_unix_email",
        "peekOfCode": "pos = nx.spring_layout(G, iterations=10, seed=227)\nnx.draw(G, pos, node_size=0, alpha=0.4, edge_color=\"r\", font_size=16, with_labels=True)\nax = plt.gca()\nax.margins(0.08)\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_unix_email",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_unix_email",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_unix_email",
        "peekOfCode": "ax = plt.gca()\nax.margins(0.08)\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_unix_email",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_weighted_graph",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_weighted_graph",
        "peekOfCode": "G = nx.Graph()\nG.add_edge(\"a\", \"b\", weight=0.6)\nG.add_edge(\"a\", \"c\", weight=0.2)\nG.add_edge(\"c\", \"d\", weight=0.1)\nG.add_edge(\"c\", \"e\", weight=0.7)\nG.add_edge(\"c\", \"f\", weight=0.9)\nG.add_edge(\"a\", \"d\", weight=0.3)\nelarge = [(u, v) for (u, v, d) in G.edges(data=True) if d[\"weight\"] > 0.5]\nesmall = [(u, v) for (u, v, d) in G.edges(data=True) if d[\"weight\"] <= 0.5]\npos = nx.spring_layout(G, seed=7)  # positions for all nodes - seed for reproducibility",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_weighted_graph",
        "documentation": {}
    },
    {
        "label": "elarge",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_weighted_graph",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_weighted_graph",
        "peekOfCode": "elarge = [(u, v) for (u, v, d) in G.edges(data=True) if d[\"weight\"] > 0.5]\nesmall = [(u, v) for (u, v, d) in G.edges(data=True) if d[\"weight\"] <= 0.5]\npos = nx.spring_layout(G, seed=7)  # positions for all nodes - seed for reproducibility\n# nodes\nnx.draw_networkx_nodes(G, pos, node_size=700)\n# edges\nnx.draw_networkx_edges(G, pos, edgelist=elarge, width=6)\nnx.draw_networkx_edges(\n    G, pos, edgelist=esmall, width=6, alpha=0.5, edge_color=\"b\", style=\"dashed\"\n)",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_weighted_graph",
        "documentation": {}
    },
    {
        "label": "esmall",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_weighted_graph",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_weighted_graph",
        "peekOfCode": "esmall = [(u, v) for (u, v, d) in G.edges(data=True) if d[\"weight\"] <= 0.5]\npos = nx.spring_layout(G, seed=7)  # positions for all nodes - seed for reproducibility\n# nodes\nnx.draw_networkx_nodes(G, pos, node_size=700)\n# edges\nnx.draw_networkx_edges(G, pos, edgelist=elarge, width=6)\nnx.draw_networkx_edges(\n    G, pos, edgelist=esmall, width=6, alpha=0.5, edge_color=\"b\", style=\"dashed\"\n)\n# labels",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_weighted_graph",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_weighted_graph",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_weighted_graph",
        "peekOfCode": "pos = nx.spring_layout(G, seed=7)  # positions for all nodes - seed for reproducibility\n# nodes\nnx.draw_networkx_nodes(G, pos, node_size=700)\n# edges\nnx.draw_networkx_edges(G, pos, edgelist=elarge, width=6)\nnx.draw_networkx_edges(\n    G, pos, edgelist=esmall, width=6, alpha=0.5, edge_color=\"b\", style=\"dashed\"\n)\n# labels\nnx.draw_networkx_labels(G, pos, font_size=20, font_family=\"sans-serif\")",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_weighted_graph",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_weighted_graph",
        "description": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_weighted_graph",
        "peekOfCode": "ax = plt.gca()\nax.margins(0.08)\nplt.axis(\"off\")\nplt.tight_layout()\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.drawing.plot_weighted_graph",
        "documentation": {}
    },
    {
        "label": "seed",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_degree_sequence",
        "description": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_degree_sequence",
        "peekOfCode": "seed = 668273\nz = [5, 3, 3, 3, 3, 2, 2, 2, 1, 1, 1]\nprint(nx.is_graphical(z))\nprint(\"Configuration model\")\nG = nx.configuration_model(z, seed=seed)  # configuration model, seed for reproduciblity\ndegree_sequence = [d for n, d in G.degree()]  # degree sequence\nprint(f\"Degree sequence {degree_sequence}\")\nprint(\"Degree histogram\")\nhist = {}\nfor d in degree_sequence:",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_degree_sequence",
        "documentation": {}
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_degree_sequence",
        "description": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_degree_sequence",
        "peekOfCode": "z = [5, 3, 3, 3, 3, 2, 2, 2, 1, 1, 1]\nprint(nx.is_graphical(z))\nprint(\"Configuration model\")\nG = nx.configuration_model(z, seed=seed)  # configuration model, seed for reproduciblity\ndegree_sequence = [d for n, d in G.degree()]  # degree sequence\nprint(f\"Degree sequence {degree_sequence}\")\nprint(\"Degree histogram\")\nhist = {}\nfor d in degree_sequence:\n    if d in hist:",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_degree_sequence",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_degree_sequence",
        "description": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_degree_sequence",
        "peekOfCode": "G = nx.configuration_model(z, seed=seed)  # configuration model, seed for reproduciblity\ndegree_sequence = [d for n, d in G.degree()]  # degree sequence\nprint(f\"Degree sequence {degree_sequence}\")\nprint(\"Degree histogram\")\nhist = {}\nfor d in degree_sequence:\n    if d in hist:\n        hist[d] += 1\n    else:\n        hist[d] = 1",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_degree_sequence",
        "documentation": {}
    },
    {
        "label": "degree_sequence",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_degree_sequence",
        "description": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_degree_sequence",
        "peekOfCode": "degree_sequence = [d for n, d in G.degree()]  # degree sequence\nprint(f\"Degree sequence {degree_sequence}\")\nprint(\"Degree histogram\")\nhist = {}\nfor d in degree_sequence:\n    if d in hist:\n        hist[d] += 1\n    else:\n        hist[d] = 1\nprint(\"degree #nodes\")",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_degree_sequence",
        "documentation": {}
    },
    {
        "label": "hist",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_degree_sequence",
        "description": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_degree_sequence",
        "peekOfCode": "hist = {}\nfor d in degree_sequence:\n    if d in hist:\n        hist[d] += 1\n    else:\n        hist[d] = 1\nprint(\"degree #nodes\")\nfor d in hist:\n    print(f\"{d:4} {hist[d]:6}\")\npos = nx.spring_layout(G, seed=seed)  # Seed layout for reproducibility",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_degree_sequence",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_degree_sequence",
        "description": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_degree_sequence",
        "peekOfCode": "pos = nx.spring_layout(G, seed=seed)  # Seed layout for reproducibility\nnx.draw(G, pos=pos)\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_degree_sequence",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_erdos_renyi",
        "description": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_erdos_renyi",
        "peekOfCode": "n = 10  # 10 nodes\nm = 20  # 20 edges\nseed = 20160  # seed random number generators for reproducibility\n# Use seed for reproducibility\nG = nx.gnm_random_graph(n, m, seed=seed)\n# some properties\nprint(\"node degree clustering\")\nfor v in nx.nodes(G):\n    print(f\"{v} {nx.degree(G, v)} {nx.clustering(G, v)}\")\nprint()",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_erdos_renyi",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_erdos_renyi",
        "description": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_erdos_renyi",
        "peekOfCode": "m = 20  # 20 edges\nseed = 20160  # seed random number generators for reproducibility\n# Use seed for reproducibility\nG = nx.gnm_random_graph(n, m, seed=seed)\n# some properties\nprint(\"node degree clustering\")\nfor v in nx.nodes(G):\n    print(f\"{v} {nx.degree(G, v)} {nx.clustering(G, v)}\")\nprint()\nprint(\"the adjacency list\")",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_erdos_renyi",
        "documentation": {}
    },
    {
        "label": "seed",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_erdos_renyi",
        "description": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_erdos_renyi",
        "peekOfCode": "seed = 20160  # seed random number generators for reproducibility\n# Use seed for reproducibility\nG = nx.gnm_random_graph(n, m, seed=seed)\n# some properties\nprint(\"node degree clustering\")\nfor v in nx.nodes(G):\n    print(f\"{v} {nx.degree(G, v)} {nx.clustering(G, v)}\")\nprint()\nprint(\"the adjacency list\")\nfor line in nx.generate_adjlist(G):",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_erdos_renyi",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_erdos_renyi",
        "description": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_erdos_renyi",
        "peekOfCode": "G = nx.gnm_random_graph(n, m, seed=seed)\n# some properties\nprint(\"node degree clustering\")\nfor v in nx.nodes(G):\n    print(f\"{v} {nx.degree(G, v)} {nx.clustering(G, v)}\")\nprint()\nprint(\"the adjacency list\")\nfor line in nx.generate_adjlist(G):\n    print(line)\npos = nx.spring_layout(G, seed=seed)  # Seed for reproducible layout",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_erdos_renyi",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_erdos_renyi",
        "description": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_erdos_renyi",
        "peekOfCode": "pos = nx.spring_layout(G, seed=seed)  # Seed for reproducible layout\nnx.draw(G, pos=pos)\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_erdos_renyi",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_expected_degree_sequence",
        "description": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_expected_degree_sequence",
        "peekOfCode": "n = 500  # n nodes\np = 0.1\nw = [p * n for i in range(n)]  # w = p*n for all nodes\nG = nx.expected_degree_graph(w)  # configuration model\nprint(\"Degree histogram\")\nprint(\"degree (#nodes) ****\")\ndh = nx.degree_histogram(G)\nfor i, d in enumerate(dh):\n    print(f\"{i:2} ({d:2}) {'*'*d}\")",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_expected_degree_sequence",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_expected_degree_sequence",
        "description": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_expected_degree_sequence",
        "peekOfCode": "p = 0.1\nw = [p * n for i in range(n)]  # w = p*n for all nodes\nG = nx.expected_degree_graph(w)  # configuration model\nprint(\"Degree histogram\")\nprint(\"degree (#nodes) ****\")\ndh = nx.degree_histogram(G)\nfor i, d in enumerate(dh):\n    print(f\"{i:2} ({d:2}) {'*'*d}\")",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_expected_degree_sequence",
        "documentation": {}
    },
    {
        "label": "w",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_expected_degree_sequence",
        "description": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_expected_degree_sequence",
        "peekOfCode": "w = [p * n for i in range(n)]  # w = p*n for all nodes\nG = nx.expected_degree_graph(w)  # configuration model\nprint(\"Degree histogram\")\nprint(\"degree (#nodes) ****\")\ndh = nx.degree_histogram(G)\nfor i, d in enumerate(dh):\n    print(f\"{i:2} ({d:2}) {'*'*d}\")",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_expected_degree_sequence",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_expected_degree_sequence",
        "description": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_expected_degree_sequence",
        "peekOfCode": "G = nx.expected_degree_graph(w)  # configuration model\nprint(\"Degree histogram\")\nprint(\"degree (#nodes) ****\")\ndh = nx.degree_histogram(G)\nfor i, d in enumerate(dh):\n    print(f\"{i:2} ({d:2}) {'*'*d}\")",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_expected_degree_sequence",
        "documentation": {}
    },
    {
        "label": "dh",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_expected_degree_sequence",
        "description": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_expected_degree_sequence",
        "peekOfCode": "dh = nx.degree_histogram(G)\nfor i, d in enumerate(dh):\n    print(f\"{i:2} ({d:2}) {'*'*d}\")",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_expected_degree_sequence",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_football",
        "description": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_football",
        "peekOfCode": "url = \"http://www-personal.umich.edu/~mejn/netdata/football.zip\"\nsock = urllib.request.urlopen(url)  # open URL\ns = io.BytesIO(sock.read())  # read into BytesIO \"file\"\nsock.close()\nzf = zipfile.ZipFile(s)  # zipfile object\ntxt = zf.read(\"football.txt\").decode()  # read info file\ngml = zf.read(\"football.gml\").decode()  # read gml data\n# throw away bogus first line with # from mejn files\ngml = gml.split(\"\\n\")[1:]\nG = nx.parse_gml(gml)  # parse gml data",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "sock",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_football",
        "description": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_football",
        "peekOfCode": "sock = urllib.request.urlopen(url)  # open URL\ns = io.BytesIO(sock.read())  # read into BytesIO \"file\"\nsock.close()\nzf = zipfile.ZipFile(s)  # zipfile object\ntxt = zf.read(\"football.txt\").decode()  # read info file\ngml = zf.read(\"football.gml\").decode()  # read gml data\n# throw away bogus first line with # from mejn files\ngml = gml.split(\"\\n\")[1:]\nG = nx.parse_gml(gml)  # parse gml data\nprint(txt)",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_football",
        "description": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_football",
        "peekOfCode": "s = io.BytesIO(sock.read())  # read into BytesIO \"file\"\nsock.close()\nzf = zipfile.ZipFile(s)  # zipfile object\ntxt = zf.read(\"football.txt\").decode()  # read info file\ngml = zf.read(\"football.gml\").decode()  # read gml data\n# throw away bogus first line with # from mejn files\ngml = gml.split(\"\\n\")[1:]\nG = nx.parse_gml(gml)  # parse gml data\nprint(txt)\n# print degree for each team - number of games",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "zf",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_football",
        "description": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_football",
        "peekOfCode": "zf = zipfile.ZipFile(s)  # zipfile object\ntxt = zf.read(\"football.txt\").decode()  # read info file\ngml = zf.read(\"football.gml\").decode()  # read gml data\n# throw away bogus first line with # from mejn files\ngml = gml.split(\"\\n\")[1:]\nG = nx.parse_gml(gml)  # parse gml data\nprint(txt)\n# print degree for each team - number of games\nfor n, d in G.degree():\n    print(f\"{n:20} {d:2}\")",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_football",
        "description": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_football",
        "peekOfCode": "txt = zf.read(\"football.txt\").decode()  # read info file\ngml = zf.read(\"football.gml\").decode()  # read gml data\n# throw away bogus first line with # from mejn files\ngml = gml.split(\"\\n\")[1:]\nG = nx.parse_gml(gml)  # parse gml data\nprint(txt)\n# print degree for each team - number of games\nfor n, d in G.degree():\n    print(f\"{n:20} {d:2}\")\noptions = {",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "gml",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_football",
        "description": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_football",
        "peekOfCode": "gml = zf.read(\"football.gml\").decode()  # read gml data\n# throw away bogus first line with # from mejn files\ngml = gml.split(\"\\n\")[1:]\nG = nx.parse_gml(gml)  # parse gml data\nprint(txt)\n# print degree for each team - number of games\nfor n, d in G.degree():\n    print(f\"{n:20} {d:2}\")\noptions = {\n    \"node_color\": \"black\",",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "gml",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_football",
        "description": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_football",
        "peekOfCode": "gml = gml.split(\"\\n\")[1:]\nG = nx.parse_gml(gml)  # parse gml data\nprint(txt)\n# print degree for each team - number of games\nfor n, d in G.degree():\n    print(f\"{n:20} {d:2}\")\noptions = {\n    \"node_color\": \"black\",\n    \"node_size\": 50,\n    \"linewidths\": 0,",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_football",
        "description": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_football",
        "peekOfCode": "G = nx.parse_gml(gml)  # parse gml data\nprint(txt)\n# print degree for each team - number of games\nfor n, d in G.degree():\n    print(f\"{n:20} {d:2}\")\noptions = {\n    \"node_color\": \"black\",\n    \"node_size\": 50,\n    \"linewidths\": 0,\n    \"width\": 0.1,",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_football",
        "description": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_football",
        "peekOfCode": "options = {\n    \"node_color\": \"black\",\n    \"node_size\": 50,\n    \"linewidths\": 0,\n    \"width\": 0.1,\n}\npos = nx.spring_layout(G, seed=1969)  # Seed for reproducible layout\nnx.draw(G, pos, **options)\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_football",
        "description": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_football",
        "peekOfCode": "pos = nx.spring_layout(G, seed=1969)  # Seed for reproducible layout\nnx.draw(G, pos, **options)\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_karate_club",
        "description": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_karate_club",
        "peekOfCode": "G = nx.karate_club_graph()\nprint(\"Node Degree\")\nfor v in G:\n    print(f\"{v:4} {G.degree(v):6}\")\nnx.draw_circular(G, with_labels=True)\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_karate_club",
        "documentation": {}
    },
    {
        "label": "minard_graph",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_napoleon_russian_campaign",
        "description": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_napoleon_russian_campaign",
        "peekOfCode": "def minard_graph():\n    data1 = \"\"\"\\\n24.0,54.9,340000,A,1\n24.5,55.0,340000,A,1\n25.5,54.5,340000,A,1\n26.0,54.7,320000,A,1\n27.0,54.8,300000,A,1\n28.0,54.9,280000,A,1\n28.5,55.0,240000,A,1\n29.0,55.1,210000,A,1",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_napoleon_russian_campaign",
        "documentation": {}
    },
    {
        "label": "colors",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_napoleon_russian_campaign",
        "description": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_napoleon_russian_campaign",
        "peekOfCode": "colors = [\"b\", \"g\", \"r\"]\nfor G in g:\n    c = colors.pop(0)\n    node_size = [int(G.pop[n] / 300.0) for n in G]\n    nx.draw_networkx_edges(G, G.pos, edge_color=c, width=4, alpha=0.5)\n    nx.draw_networkx_nodes(G, G.pos, node_size=node_size, node_color=c, alpha=0.5)\n    nx.draw_networkx_nodes(G, G.pos, node_size=5, node_color=\"k\")\nfor c in city:\n    x, y = city[c]\n    plt.text(x, y + 0.1, c)",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_napoleon_russian_campaign",
        "documentation": {}
    },
    {
        "label": "roget_graph",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_roget",
        "description": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_roget",
        "peekOfCode": "def roget_graph():\n    \"\"\"Return the thesaurus graph from the roget.dat example in\n    the Stanford Graph Base.\n    \"\"\"\n    # open file roget_dat.txt.gz\n    fh = gzip.open(\"roget_dat.txt.gz\", \"r\")\n    G = nx.DiGraph()\n    for line in fh.readlines():\n        line = line.decode()\n        if line.startswith(\"*\"):  # skip comments",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_roget",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_roget",
        "description": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_roget",
        "peekOfCode": "G = roget_graph()\nprint(\"Loaded roget_dat.txt containing 1022 categories.\")\nprint(G)\nUG = G.to_undirected()\nprint(nx.number_connected_components(UG), \"connected components\")\noptions = {\n    \"node_color\": \"black\",\n    \"node_size\": 1,\n    \"edge_color\": \"gray\",\n    \"linewidths\": 0,",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_roget",
        "documentation": {}
    },
    {
        "label": "UG",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_roget",
        "description": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_roget",
        "peekOfCode": "UG = G.to_undirected()\nprint(nx.number_connected_components(UG), \"connected components\")\noptions = {\n    \"node_color\": \"black\",\n    \"node_size\": 1,\n    \"edge_color\": \"gray\",\n    \"linewidths\": 0,\n    \"width\": 0.1,\n}\nnx.draw_circular(UG, **options)",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_roget",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_roget",
        "description": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_roget",
        "peekOfCode": "options = {\n    \"node_color\": \"black\",\n    \"node_size\": 1,\n    \"edge_color\": \"gray\",\n    \"linewidths\": 0,\n    \"width\": 0.1,\n}\nnx.draw_circular(UG, **options)\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_roget",
        "documentation": {}
    },
    {
        "label": "generate_graph",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_words",
        "description": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_words",
        "peekOfCode": "def generate_graph(words):\n    G = nx.Graph(name=\"words\")\n    lookup = {c: lowercase.index(c) for c in lowercase}\n    def edit_distance_one(word):\n        for i in range(len(word)):\n            left, c, right = word[0:i], word[i], word[i + 1 :]\n            j = lookup[c]  # lowercase.index(c)\n            for cc in lowercase[j + 1 :]:\n                yield left + cc + right\n    candgen = (",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_words",
        "documentation": {}
    },
    {
        "label": "words_graph",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_words",
        "description": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_words",
        "peekOfCode": "def words_graph():\n    \"\"\"Return the words example graph from the Stanford GraphBase\"\"\"\n    fh = gzip.open(\"words_dat.txt.gz\", \"r\")\n    words = set()\n    for line in fh.readlines():\n        line = line.decode()\n        if line.startswith(\"*\"):\n            continue\n        w = str(line[0:5])\n        words.add(w)",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_words",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_words",
        "description": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_words",
        "peekOfCode": "G = words_graph()\nprint(\"Loaded words_dat.txt containing 5757 five-letter English words.\")\nprint(\"Two words are connected if they differ in one letter.\")\nprint(G)\nprint(f\"{nx.number_connected_components(G)} connected components\")\nfor (source, target) in [(\"chaos\", \"order\"), (\"nodes\", \"graph\"), (\"pound\", \"marks\")]:\n    print(f\"Shortest path between {source} and {target} is\")\n    try:\n        shortest_path = nx.shortest_path(G, source, target)\n        for n in shortest_path:",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_words",
        "documentation": {}
    },
    {
        "label": "boundary",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_words",
        "description": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_words",
        "peekOfCode": "boundary = list(nx.node_boundary(G, shortest_path))\nG.add_nodes_from(shortest_path, color=\"red\")\nG.add_nodes_from(boundary, color=\"blue\")\nH = G.subgraph(shortest_path + boundary)\ncolors = nx.get_node_attributes(H, \"color\")\noptions = {\n    \"node_size\": 1500,\n    \"alpha\": 0.3,\n    \"node_color\": colors.values(),\n}",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_words",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_words",
        "description": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_words",
        "peekOfCode": "H = G.subgraph(shortest_path + boundary)\ncolors = nx.get_node_attributes(H, \"color\")\noptions = {\n    \"node_size\": 1500,\n    \"alpha\": 0.3,\n    \"node_color\": colors.values(),\n}\npos = nx.kamada_kawai_layout(H)\nnx.draw(H, pos, **options)\nnx.draw_networkx_labels(H, pos, font_weight=\"bold\")",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_words",
        "documentation": {}
    },
    {
        "label": "colors",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_words",
        "description": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_words",
        "peekOfCode": "colors = nx.get_node_attributes(H, \"color\")\noptions = {\n    \"node_size\": 1500,\n    \"alpha\": 0.3,\n    \"node_color\": colors.values(),\n}\npos = nx.kamada_kawai_layout(H)\nnx.draw(H, pos, **options)\nnx.draw_networkx_labels(H, pos, font_weight=\"bold\")\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_words",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_words",
        "description": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_words",
        "peekOfCode": "options = {\n    \"node_size\": 1500,\n    \"alpha\": 0.3,\n    \"node_color\": colors.values(),\n}\npos = nx.kamada_kawai_layout(H)\nnx.draw(H, pos, **options)\nnx.draw_networkx_labels(H, pos, font_weight=\"bold\")\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_words",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_words",
        "description": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_words",
        "peekOfCode": "pos = nx.kamada_kawai_layout(H)\nnx.draw(H, pos, **options)\nnx.draw_networkx_labels(H, pos, font_weight=\"bold\")\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.graph.plot_words",
        "documentation": {}
    },
    {
        "label": "AntiGraph",
        "kind": 6,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.subclass.plot_antigraph",
        "description": ".venv.share.doc.networkx-2.6.3.examples.subclass.plot_antigraph",
        "peekOfCode": "class AntiGraph(Graph):\n    \"\"\"\n    Class for complement graphs.\n    The main goal is to be able to work with big and dense graphs with\n    a low memory footprint.\n    In this class you add the edges that *do not exist* in the dense graph,\n    the report methods of the class return the neighbors, the edges and\n    the degree as if it was the dense graph. Thus it's possible to use\n    an instance of this class with some of NetworkX functions.\n    \"\"\"",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.subclass.plot_antigraph",
        "documentation": {}
    },
    {
        "label": "Gnp",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.subclass.plot_antigraph",
        "description": ".venv.share.doc.networkx-2.6.3.examples.subclass.plot_antigraph",
        "peekOfCode": "Gnp = nx.gnp_random_graph(20, 0.8, seed=42)\nAnp = AntiGraph(nx.complement(Gnp))\nGd = nx.davis_southern_women_graph()\nAd = AntiGraph(nx.complement(Gd))\nGk = nx.karate_club_graph()\nAk = AntiGraph(nx.complement(Gk))\npairs = [(Gnp, Anp), (Gd, Ad), (Gk, Ak)]\n# test connected components\nfor G, A in pairs:\n    gc = [set(c) for c in nx.connected_components(G)]",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.subclass.plot_antigraph",
        "documentation": {}
    },
    {
        "label": "Anp",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.subclass.plot_antigraph",
        "description": ".venv.share.doc.networkx-2.6.3.examples.subclass.plot_antigraph",
        "peekOfCode": "Anp = AntiGraph(nx.complement(Gnp))\nGd = nx.davis_southern_women_graph()\nAd = AntiGraph(nx.complement(Gd))\nGk = nx.karate_club_graph()\nAk = AntiGraph(nx.complement(Gk))\npairs = [(Gnp, Anp), (Gd, Ad), (Gk, Ak)]\n# test connected components\nfor G, A in pairs:\n    gc = [set(c) for c in nx.connected_components(G)]\n    ac = [set(c) for c in nx.connected_components(A)]",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.subclass.plot_antigraph",
        "documentation": {}
    },
    {
        "label": "Gd",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.subclass.plot_antigraph",
        "description": ".venv.share.doc.networkx-2.6.3.examples.subclass.plot_antigraph",
        "peekOfCode": "Gd = nx.davis_southern_women_graph()\nAd = AntiGraph(nx.complement(Gd))\nGk = nx.karate_club_graph()\nAk = AntiGraph(nx.complement(Gk))\npairs = [(Gnp, Anp), (Gd, Ad), (Gk, Ak)]\n# test connected components\nfor G, A in pairs:\n    gc = [set(c) for c in nx.connected_components(G)]\n    ac = [set(c) for c in nx.connected_components(A)]\n    for comp in ac:",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.subclass.plot_antigraph",
        "documentation": {}
    },
    {
        "label": "Ad",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.subclass.plot_antigraph",
        "description": ".venv.share.doc.networkx-2.6.3.examples.subclass.plot_antigraph",
        "peekOfCode": "Ad = AntiGraph(nx.complement(Gd))\nGk = nx.karate_club_graph()\nAk = AntiGraph(nx.complement(Gk))\npairs = [(Gnp, Anp), (Gd, Ad), (Gk, Ak)]\n# test connected components\nfor G, A in pairs:\n    gc = [set(c) for c in nx.connected_components(G)]\n    ac = [set(c) for c in nx.connected_components(A)]\n    for comp in ac:\n        assert comp in gc",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.subclass.plot_antigraph",
        "documentation": {}
    },
    {
        "label": "Gk",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.subclass.plot_antigraph",
        "description": ".venv.share.doc.networkx-2.6.3.examples.subclass.plot_antigraph",
        "peekOfCode": "Gk = nx.karate_club_graph()\nAk = AntiGraph(nx.complement(Gk))\npairs = [(Gnp, Anp), (Gd, Ad), (Gk, Ak)]\n# test connected components\nfor G, A in pairs:\n    gc = [set(c) for c in nx.connected_components(G)]\n    ac = [set(c) for c in nx.connected_components(A)]\n    for comp in ac:\n        assert comp in gc\n# test biconnected components",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.subclass.plot_antigraph",
        "documentation": {}
    },
    {
        "label": "Ak",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.subclass.plot_antigraph",
        "description": ".venv.share.doc.networkx-2.6.3.examples.subclass.plot_antigraph",
        "peekOfCode": "Ak = AntiGraph(nx.complement(Gk))\npairs = [(Gnp, Anp), (Gd, Ad), (Gk, Ak)]\n# test connected components\nfor G, A in pairs:\n    gc = [set(c) for c in nx.connected_components(G)]\n    ac = [set(c) for c in nx.connected_components(A)]\n    for comp in ac:\n        assert comp in gc\n# test biconnected components\nfor G, A in pairs:",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.subclass.plot_antigraph",
        "documentation": {}
    },
    {
        "label": "pairs",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.subclass.plot_antigraph",
        "description": ".venv.share.doc.networkx-2.6.3.examples.subclass.plot_antigraph",
        "peekOfCode": "pairs = [(Gnp, Anp), (Gd, Ad), (Gk, Ak)]\n# test connected components\nfor G, A in pairs:\n    gc = [set(c) for c in nx.connected_components(G)]\n    ac = [set(c) for c in nx.connected_components(A)]\n    for comp in ac:\n        assert comp in gc\n# test biconnected components\nfor G, A in pairs:\n    gc = [set(c) for c in nx.biconnected_components(G)]",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.subclass.plot_antigraph",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.subclass.plot_antigraph",
        "description": ".venv.share.doc.networkx-2.6.3.examples.subclass.plot_antigraph",
        "peekOfCode": "pos = nx.spring_layout(G, seed=268)  # Seed for reproducible layout\nnx.draw(Gnp, pos=pos)\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.subclass.plot_antigraph",
        "documentation": {}
    },
    {
        "label": "PrintGraph",
        "kind": 6,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.subclass.plot_printgraph",
        "description": ".venv.share.doc.networkx-2.6.3.examples.subclass.plot_printgraph",
        "peekOfCode": "class PrintGraph(Graph):\n    \"\"\"\n    Example subclass of the Graph class.\n    Prints activity log to file or standard output.\n    \"\"\"\n    def __init__(self, data=None, name=\"\", file=None, **attr):\n        super().__init__(data=data, name=name, **attr)\n        if file is None:\n            import sys\n            self.fh = sys.stdout",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.subclass.plot_printgraph",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.subclass.plot_printgraph",
        "description": ".venv.share.doc.networkx-2.6.3.examples.subclass.plot_printgraph",
        "peekOfCode": "G = PrintGraph()\nG.add_node(\"foo\")\nG.add_nodes_from(\"bar\", weight=8)\nG.remove_node(\"b\")\nG.remove_nodes_from(\"ar\")\nprint(\"Nodes in G: \", G.nodes(data=True))\nG.add_edge(0, 1, weight=10)\nprint(\"Edges in G: \", G.edges(data=True))\nG.remove_edge(0, 1)\nG.add_edges_from(zip(range(0, 3), range(1, 4)), weight=10)",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.subclass.plot_printgraph",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.subclass.plot_printgraph",
        "description": ".venv.share.doc.networkx-2.6.3.examples.subclass.plot_printgraph",
        "peekOfCode": "G = PrintGraph()\nnx.add_path(G, range(10))\nnx.add_star(G, range(9, 13))\npos = nx.spring_layout(G, seed=225)  # Seed for reproducible layout\nnx.draw(G, pos)\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.subclass.plot_printgraph",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.6.3.examples.subclass.plot_printgraph",
        "description": ".venv.share.doc.networkx-2.6.3.examples.subclass.plot_printgraph",
        "peekOfCode": "pos = nx.spring_layout(G, seed=225)  # Seed for reproducible layout\nnx.draw(G, pos)\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.6.3.examples.subclass.plot_printgraph",
        "documentation": {}
    },
    {
        "label": "CustomAdminSite",
        "kind": 6,
        "importPath": "src.admin_custom.admin",
        "description": "src.admin_custom.admin",
        "peekOfCode": "class CustomAdminSite(admin.AdminSite):\n    def index(self, request, extra_context=None):\n        if(extra_context is None): extra_context = {}\n        user = User.objects.get(id=request.user.id)\n        #if user.is_prestataire: return redirect('liste_bordereau')\n        if request.user.is_med: return redirect('dossiersinistre')\n        if request.user.is_superuser:\n            bureaux = Bureau.objects.filter(status=True)\n            bureaux_serializer = BureauSerializer(bureaux, many=True).data\n        elif request.user.is_admin_group:",
        "detail": "src.admin_custom.admin",
        "documentation": {}
    },
    {
        "label": "AdminSite.index_template",
        "kind": 5,
        "importPath": "src.admin_custom.admin",
        "description": "src.admin_custom.admin",
        "peekOfCode": "AdminSite.index_template = 'main_index.html'\n# new custom admin\ncustom_admin_site = CustomAdminSite(name='custom_admin')\n# get back django auth group app\ncustom_admin_site.register(Group)",
        "detail": "src.admin_custom.admin",
        "documentation": {}
    },
    {
        "label": "custom_admin_site",
        "kind": 5,
        "importPath": "src.admin_custom.admin",
        "description": "src.admin_custom.admin",
        "peekOfCode": "custom_admin_site = CustomAdminSite(name='custom_admin')\n# get back django auth group app\ncustom_admin_site.register(Group)",
        "detail": "src.admin_custom.admin",
        "documentation": {}
    },
    {
        "label": "error_404_view",
        "kind": 2,
        "importPath": "src.admin_custom.views",
        "description": "src.admin_custom.views",
        "peekOfCode": "def error_404_view(request, exception):\n    return render(request, '404.html', {}, status=404)",
        "detail": "src.admin_custom.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.api.migrations.0001_initial",
        "description": "src.api.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='InfoActe',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('numero_assure', models.CharField(max_length=255, null=True)),",
        "detail": "src.api.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "send_otp_mail",
        "kind": 2,
        "importPath": "src.api.api_helper",
        "description": "src.api.api_helper",
        "peekOfCode": "def send_otp_mail(email, otp):\n    subject = 'Code de Vérification'\n    message = f'''<!DOCTYPE html>\n                    <html lang=\"fr\">\n                    <head>\n                        <meta charset=\"UTF-8\">\n                        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n                        <title>Code de Vérification</title>\n                    </head>\n                    <body>",
        "detail": "src.api.api_helper",
        "documentation": {}
    },
    {
        "label": "send_cron_state_mail",
        "kind": 2,
        "importPath": "src.api.api_helper",
        "description": "src.api.api_helper",
        "peekOfCode": "def send_cron_state_mail(email, cron_name, frequency, state, message):\n    subject = str(cron_name) + \" | CRON TASK\"\n    message = f'''<!DOCTYPE html>\n                    <html lang=\"fr\">\n                    <head>\n                        <meta charset=\"UTF-8\">\n                        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n                        <title>{subject}</title>\n                    </head>\n                    <body>",
        "detail": "src.api.api_helper",
        "documentation": {}
    },
    {
        "label": "send_demande_rembours_mail",
        "kind": 2,
        "importPath": "src.api.api_helper",
        "description": "src.api.api_helper",
        "peekOfCode": "def send_demande_rembours_mail(email, context, file_paths):\n    subject = 'Nouvelle demande de remboursement'\n    message = f'''\n    <!DOCTYPE html>\n    <html lang=\"fr\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <title>Nouvelle demande de remboursement</title>\n    </head>\n    <body>",
        "detail": "src.api.api_helper",
        "documentation": {}
    },
    {
        "label": "ApiConfig",
        "kind": 6,
        "importPath": "src.api.apps",
        "description": "src.api.apps",
        "peekOfCode": "class ApiConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'api'",
        "detail": "src.api.apps",
        "documentation": {}
    },
    {
        "label": "InfoActe",
        "kind": 6,
        "importPath": "src.api.models",
        "description": "src.api.models",
        "peekOfCode": "class InfoActe(models.Model):\n    numero_assure = models.CharField(max_length=255, null=True)\n    medecin = models.CharField(max_length=255, null=True)\n    acte = models.IntegerField(null=True)\n    affection = models.CharField(max_length=100, null=True)\n    rc = models.CharField(max_length=255, null=True)\n    def __str__(self):\n        pass\n    class Meta:\n        managed = False",
        "detail": "src.api.models",
        "documentation": {}
    },
    {
        "label": "SmartResultsSetPagination",
        "kind": 6,
        "importPath": "src.api.paginations",
        "description": "src.api.paginations",
        "peekOfCode": "class SmartResultsSetPagination(PageNumberPagination):\n    page_size = 10\n    page_size_query_param = 'page_size'\n    max_page_size = 10000",
        "detail": "src.api.paginations",
        "documentation": {}
    },
    {
        "label": "InfoActeSerialiser",
        "kind": 6,
        "importPath": "src.api.serializers",
        "description": "src.api.serializers",
        "peekOfCode": "class InfoActeSerialiser(ModelSerializer):\n    class Meta:\n        model = InfoActe\n        fields = ['numero_assure', 'medecin', 'acte', 'affection', 'rc']\n        managed = False\nclass TypeActeSerialiser(ModelSerializer):\n    class Meta:\n        model = TypeActe\n        fields = ['id', 'code', 'libelle']\n        managed = False",
        "detail": "src.api.serializers",
        "documentation": {}
    },
    {
        "label": "TypeActeSerialiser",
        "kind": 6,
        "importPath": "src.api.serializers",
        "description": "src.api.serializers",
        "peekOfCode": "class TypeActeSerialiser(ModelSerializer):\n    class Meta:\n        model = TypeActe\n        fields = ['id', 'code', 'libelle']\n        managed = False\nclass CiviliteSerializer(ModelSerializer):\n    class Meta:\n        model = Civilite\n        fields = ['id', 'code', 'name']\n        managed = False",
        "detail": "src.api.serializers",
        "documentation": {}
    },
    {
        "label": "CiviliteSerializer",
        "kind": 6,
        "importPath": "src.api.serializers",
        "description": "src.api.serializers",
        "peekOfCode": "class CiviliteSerializer(ModelSerializer):\n    class Meta:\n        model = Civilite\n        fields = ['id', 'code', 'name']\n        managed = False\nclass QualiteBeneficiaireSerializer(ModelSerializer):\n    class Meta:\n        model = QualiteBeneficiaire\n        fields = ['id', 'code', 'libelle']\n        managed = False",
        "detail": "src.api.serializers",
        "documentation": {}
    },
    {
        "label": "QualiteBeneficiaireSerializer",
        "kind": 6,
        "importPath": "src.api.serializers",
        "description": "src.api.serializers",
        "peekOfCode": "class QualiteBeneficiaireSerializer(ModelSerializer):\n    class Meta:\n        model = QualiteBeneficiaire\n        fields = ['id', 'code', 'libelle']\n        managed = False\nclass PaysSerializer(ModelSerializer):\n    class Meta:\n        model = Pays\n        fields = ['id', 'nom', 'indicatif']\n        managed = False",
        "detail": "src.api.serializers",
        "documentation": {}
    },
    {
        "label": "PaysSerializer",
        "kind": 6,
        "importPath": "src.api.serializers",
        "description": "src.api.serializers",
        "peekOfCode": "class PaysSerializer(ModelSerializer):\n    class Meta:\n        model = Pays\n        fields = ['id', 'nom', 'indicatif']\n        managed = False\n        # depth = 1\nclass ProfessionSerializer(ModelSerializer):\n    class Meta:\n        model = Profession\n        fields = ['id', 'code', 'name']",
        "detail": "src.api.serializers",
        "documentation": {}
    },
    {
        "label": "ProfessionSerializer",
        "kind": 6,
        "importPath": "src.api.serializers",
        "description": "src.api.serializers",
        "peekOfCode": "class ProfessionSerializer(ModelSerializer):\n    class Meta:\n        model = Profession\n        fields = ['id', 'code', 'name']\n        managed = False\n        # depth = 1\n# APPLICATION MOBILE SANTE API REST SERIALIZER\nclass KeyValueDataSerializer(ModelSerializer):\n    class Meta:\n        model = KeyValueData",
        "detail": "src.api.serializers",
        "documentation": {}
    },
    {
        "label": "KeyValueDataSerializer",
        "kind": 6,
        "importPath": "src.api.serializers",
        "description": "src.api.serializers",
        "peekOfCode": "class KeyValueDataSerializer(ModelSerializer):\n    class Meta:\n        model = KeyValueData\n        fields = \"__all__\"\n        managed = False\nclass CarteSerializer(ModelSerializer):\n    class Meta:\n        model = Carte\n        fields = \"__all__\"\n        # depth = 3",
        "detail": "src.api.serializers",
        "documentation": {}
    },
    {
        "label": "CarteSerializer",
        "kind": 6,
        "importPath": "src.api.serializers",
        "description": "src.api.serializers",
        "peekOfCode": "class CarteSerializer(ModelSerializer):\n    class Meta:\n        model = Carte\n        fields = \"__all__\"\n        # depth = 3\n        # extra_kwargs = {'user_extranet': {'write_only': True}}\nclass ClientSerializer(ModelSerializer):\n    class Meta:\n        model = Client\n        fields = \"__all__\"",
        "detail": "src.api.serializers",
        "documentation": {}
    },
    {
        "label": "ClientSerializer",
        "kind": 6,
        "importPath": "src.api.serializers",
        "description": "src.api.serializers",
        "peekOfCode": "class ClientSerializer(ModelSerializer):\n    class Meta:\n        model = Client\n        fields = \"__all__\"\n        # depth = 3\n        # extra_kwargs = {'user_extranet': {'write_only': True}}\nclass FormuleGarantieSerializer(ModelSerializer):\n    class Meta:\n        model = FormuleGarantie\n        fields = \"__all__\"",
        "detail": "src.api.serializers",
        "documentation": {}
    },
    {
        "label": "FormuleGarantieSerializer",
        "kind": 6,
        "importPath": "src.api.serializers",
        "description": "src.api.serializers",
        "peekOfCode": "class FormuleGarantieSerializer(ModelSerializer):\n    class Meta:\n        model = FormuleGarantie\n        fields = \"__all__\"\n        depth = 1\n        # extra_kwargs = {'user_extranet': {'write_only': True}}\nclass BarremeSerializer(ModelSerializer):\n    class Meta:\n        model = Bareme\n        fields = \"__all__\"",
        "detail": "src.api.serializers",
        "documentation": {}
    },
    {
        "label": "BarremeSerializer",
        "kind": 6,
        "importPath": "src.api.serializers",
        "description": "src.api.serializers",
        "peekOfCode": "class BarremeSerializer(ModelSerializer):\n    class Meta:\n        model = Bareme\n        fields = \"__all__\"\n        depth = 1\n        # extra_kwargs = {'user_extranet': {'write_only': True}}\nclass TypePrestataireSerializer(ModelSerializer):\n    class Meta:\n        model = TypePrestataire\n        fields = \"__all__\"",
        "detail": "src.api.serializers",
        "documentation": {}
    },
    {
        "label": "TypePrestataireSerializer",
        "kind": 6,
        "importPath": "src.api.serializers",
        "description": "src.api.serializers",
        "peekOfCode": "class TypePrestataireSerializer(ModelSerializer):\n    class Meta:\n        model = TypePrestataire\n        fields = \"__all__\"\n        # depth = 1\nclass PrestataireSerializer(ModelSerializer):\n    class Meta:\n        model = Prestataire\n        fields = \"__all__\"\n        depth = 1",
        "detail": "src.api.serializers",
        "documentation": {}
    },
    {
        "label": "PrestataireSerializer",
        "kind": 6,
        "importPath": "src.api.serializers",
        "description": "src.api.serializers",
        "peekOfCode": "class PrestataireSerializer(ModelSerializer):\n    class Meta:\n        model = Prestataire\n        fields = \"__all__\"\n        depth = 1\nclass PrestataireWebSerializer(ModelSerializer):\n    class Meta:\n        model = Prestataire\n        fields = \"__all__\"\n        depth = 1",
        "detail": "src.api.serializers",
        "documentation": {}
    },
    {
        "label": "PrestataireWebSerializer",
        "kind": 6,
        "importPath": "src.api.serializers",
        "description": "src.api.serializers",
        "peekOfCode": "class PrestataireWebSerializer(ModelSerializer):\n    class Meta:\n        model = Prestataire\n        fields = \"__all__\"\n        depth = 1\nclass AlimentSerializer(ModelSerializer):\n    carte = serializers.SerializerMethodField()\n    client = serializers.SerializerMethodField()\n    formule = serializers.SerializerMethodField()\n    # formules = FormuleGarantieSerializer(many=True)",
        "detail": "src.api.serializers",
        "documentation": {}
    },
    {
        "label": "AlimentSerializer",
        "kind": 6,
        "importPath": "src.api.serializers",
        "description": "src.api.serializers",
        "peekOfCode": "class AlimentSerializer(ModelSerializer):\n    carte = serializers.SerializerMethodField()\n    client = serializers.SerializerMethodField()\n    formule = serializers.SerializerMethodField()\n    # formules = FormuleGarantieSerializer(many=True)\n    class Meta:\n        model = Aliment\n        fields = [\"id\",\n                  \"sms_active\",\n                  \"veos_id_npol\",",
        "detail": "src.api.serializers",
        "documentation": {}
    },
    {
        "label": "UserDataSerializer",
        "kind": 6,
        "importPath": "src.api.serializers",
        "description": "src.api.serializers",
        "peekOfCode": "class UserDataSerializer(ModelSerializer):\n    class Meta:\n        model = User\n        fields = \"__all__\"\n        extra_kwargs = {'password': {'write_only': True}}\n        # depth = 1\nclass PrestataireDataSerializer(ModelSerializer):\n    class Meta:\n        model = User\n        fields = \"__all__\"",
        "detail": "src.api.serializers",
        "documentation": {}
    },
    {
        "label": "PrestataireDataSerializer",
        "kind": 6,
        "importPath": "src.api.serializers",
        "description": "src.api.serializers",
        "peekOfCode": "class PrestataireDataSerializer(ModelSerializer):\n    class Meta:\n        model = User\n        fields = \"__all__\"\n        extra_kwargs = {'password': {'write_only': True}}\n        depth = 2\nclass UserSerializer(serializers.Serializer):\n    email = serializers.EmailField()\n    username = serializers.CharField(max_length=150)\n    password = serializers.CharField(max_length=128, required=False, write_only=True)",
        "detail": "src.api.serializers",
        "documentation": {}
    },
    {
        "label": "UserSerializer",
        "kind": 6,
        "importPath": "src.api.serializers",
        "description": "src.api.serializers",
        "peekOfCode": "class UserSerializer(serializers.Serializer):\n    email = serializers.EmailField()\n    username = serializers.CharField(max_length=150)\n    password = serializers.CharField(max_length=128, required=False, write_only=True)\n    first_name = serializers.CharField(max_length=150)\n    last_name = serializers.CharField(max_length=150)\n    def create(self, validated_data):\n        user = User(**validated_data)\n        user.set_password(validated_data.get('password', user.password))\n        user.save()",
        "detail": "src.api.serializers",
        "documentation": {}
    },
    {
        "label": "CreateUserSerializer",
        "kind": 6,
        "importPath": "src.api.serializers",
        "description": "src.api.serializers",
        "peekOfCode": "class CreateUserSerializer(serializers.Serializer):\n    email = serializers.EmailField()\n    username = serializers.CharField(max_length=150)\n    password = serializers.CharField(max_length=128)\n    def create(self, validated_data):\n        user = User(email=validated_data.get('email', None),\n                    username=validated_data.get('username', None))\n        user.set_password(validated_data.get('password', user.password))\n        return user\nclass ResetPasswordUserSerializer(serializers.Serializer):",
        "detail": "src.api.serializers",
        "documentation": {}
    },
    {
        "label": "ResetPasswordUserSerializer",
        "kind": 6,
        "importPath": "src.api.serializers",
        "description": "src.api.serializers",
        "peekOfCode": "class ResetPasswordUserSerializer(serializers.Serializer):\n    username = serializers.CharField(max_length=150)\n    password = serializers.CharField(max_length=128)\n    def update(self, instance, validated_data):\n        instance.username = validated_data.get('username', instance.username)\n        if validated_data.get('password', None):\n            instance.set_password(validated_data.get('password', instance.password))\n        instance.save()\n        return instance\nclass SinisteSerializer(ModelSerializer):",
        "detail": "src.api.serializers",
        "documentation": {}
    },
    {
        "label": "SinisteSerializer",
        "kind": 6,
        "importPath": "src.api.serializers",
        "description": "src.api.serializers",
        "peekOfCode": "class SinisteSerializer(ModelSerializer):\n    class Meta:\n        model = Sinistre\n        fields = \"__all__\"\n        depth = 1\n        # extra_kwargs = {'user_extranet': {'write_only': True}}\nclass ActeSerializer(ModelSerializer):\n    class Meta:\n        model = Acte\n        fields = \"__all__\"",
        "detail": "src.api.serializers",
        "documentation": {}
    },
    {
        "label": "ActeSerializer",
        "kind": 6,
        "importPath": "src.api.serializers",
        "description": "src.api.serializers",
        "peekOfCode": "class ActeSerializer(ModelSerializer):\n    class Meta:\n        model = Acte\n        fields = \"__all__\"\n        # exclude = ['rubrique','regroupement_acte','type_acte',]\n        # depth = 1\n        # extra_kwargs = {'user_extranet': {'write_only': True}}\nclass BureauSerializer(ModelSerializer):\n    class Meta:\n        model = Bureau",
        "detail": "src.api.serializers",
        "documentation": {}
    },
    {
        "label": "BureauSerializer",
        "kind": 6,
        "importPath": "src.api.serializers",
        "description": "src.api.serializers",
        "peekOfCode": "class BureauSerializer(ModelSerializer):\n    class Meta:\n        model = Bureau\n        fields = \"__all__\"\n        # exclude = ['rubrique','regroupement_acte','type_acte',]\n        # depth = 1\n        # extra_kwargs = {'user_extranet': {'write_only': True}}\nclass ModeRemboursementSerializer(ModelSerializer):\n    class Meta:\n        model = ModeReglement",
        "detail": "src.api.serializers",
        "documentation": {}
    },
    {
        "label": "ModeRemboursementSerializer",
        "kind": 6,
        "importPath": "src.api.serializers",
        "description": "src.api.serializers",
        "peekOfCode": "class ModeRemboursementSerializer(ModelSerializer):\n    class Meta:\n        model = ModeReglement\n        fields = ['id', 'libelle']\nclass DemandeRemboursementSerializer(ModelSerializer):\n    class Meta:\n        model = DemandeRemboursementMobile\n        fields = \"__all__\"\nclass ProspectSerializer(serializers.ModelSerializer):\n    class Meta:",
        "detail": "src.api.serializers",
        "documentation": {}
    },
    {
        "label": "DemandeRemboursementSerializer",
        "kind": 6,
        "importPath": "src.api.serializers",
        "description": "src.api.serializers",
        "peekOfCode": "class DemandeRemboursementSerializer(ModelSerializer):\n    class Meta:\n        model = DemandeRemboursementMobile\n        fields = \"__all__\"\nclass ProspectSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Prospect\n        fields = '__all__'\nclass CarteDigitalDematerialiseeSerializer(serializers.ModelSerializer):\n    class Meta:",
        "detail": "src.api.serializers",
        "documentation": {}
    },
    {
        "label": "ProspectSerializer",
        "kind": 6,
        "importPath": "src.api.serializers",
        "description": "src.api.serializers",
        "peekOfCode": "class ProspectSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Prospect\n        fields = '__all__'\nclass CarteDigitalDematerialiseeSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = CarteDigitalDematerialisee\n        fields = ['id', 'user', 'has_digital_card', 'digital_card_url', 'created_at', 'updated_at']\n        read_only_fields = ['created_at', 'updated_at']\n        extra_kwargs = {",
        "detail": "src.api.serializers",
        "documentation": {}
    },
    {
        "label": "CarteDigitalDematerialiseeSerializer",
        "kind": 6,
        "importPath": "src.api.serializers",
        "description": "src.api.serializers",
        "peekOfCode": "class CarteDigitalDematerialiseeSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = CarteDigitalDematerialisee\n        fields = ['id', 'user', 'has_digital_card', 'digital_card_url', 'created_at', 'updated_at']\n        read_only_fields = ['created_at', 'updated_at']\n        extra_kwargs = {\n            'user': {'required': True},\n            'digital_card_url': {'required': True}\n        }\n    def create(self, validated_data):",
        "detail": "src.api.serializers",
        "documentation": {}
    },
    {
        "label": "url_v2",
        "kind": 5,
        "importPath": "src.api.urls",
        "description": "src.api.urls",
        "peekOfCode": "url_v2 = [\n    path('login-global', LoginGlobalView.as_view(), name='login-global'),\n    path('login', LoginUserView.as_view(), name='login'),\n    path('register', RegisterUserView.as_view(), name='register'),\n    path('config/<str:key>', ConfigurationView.as_view(), name='config'),\n    path('config-bureau/<str:key>', ConfigurationBureauView.as_view(), name='config-bureau'),\n    path('request-reset-password', RequestResetPasswordView.as_view(), name='request_reset_password'),\n    path('reset-password', ResetPasswordView.as_view(), name='reset_password'),\n    path('otp-request', OTPRequestView.as_view(), name='otp_request'),\n    path('user', UserView.as_view(), name='update_user'),",
        "detail": "src.api.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "src.api.urls",
        "description": "src.api.urls",
        "peekOfCode": "urlpatterns = [\n    path('v2/', include(url_v2)),\n]",
        "detail": "src.api.urls",
        "documentation": {}
    },
    {
        "label": "CustomTokenObtainPairView",
        "kind": 6,
        "importPath": "src.api.views",
        "description": "src.api.views",
        "peekOfCode": "class CustomTokenObtainPairView(TokenObtainPairView):\n    def post(self, request, *args, **kwargs):\n        response = super().post(request, *args, **kwargs)\n        print(response.data)\n        data = {\n            'refresh_token': response.data['refresh'],\n            'access_token': response.data['access'],\n        }\n        return Response(data)\n@api_view(['POST'])",
        "detail": "src.api.views",
        "documentation": {}
    },
    {
        "label": "LoginUserView",
        "kind": 6,
        "importPath": "src.api.views",
        "description": "src.api.views",
        "peekOfCode": "class LoginUserView(views.APIView):\n    permission_classes = [AllowAny]\n    parser_classes = [JSONParser]\n    def post(self, request):\n        # print(request.data)\n        user = authenticate(username=request.data[\"uid\"], password=request.data[\"passwd\"])\n        if user is not None:\n            # print(user.aliments.all())\n            # print(user.aliment)\n            if user.aliment is not None:",
        "detail": "src.api.views",
        "documentation": {}
    },
    {
        "label": "LoginPrestataireView",
        "kind": 6,
        "importPath": "src.api.views",
        "description": "src.api.views",
        "peekOfCode": "class LoginPrestataireView(views.APIView):\n    permission_classes = [AllowAny]\n    parser_classes = [JSONParser]\n    def post(self, request):\n        # print(request.data)\n        user = authenticate(username=request.data[\"uid\"], password=request.data[\"passwd\"])\n        if user is not None:\n            # print(user.aliments.all())\n            # print(user.aliment)\n            if user.prestataire is not None:",
        "detail": "src.api.views",
        "documentation": {}
    },
    {
        "label": "LoginGlobalView",
        "kind": 6,
        "importPath": "src.api.views",
        "description": "src.api.views",
        "peekOfCode": "class LoginGlobalView(views.APIView):\n    permission_classes = [AllowAny]\n    parser_classes = [JSONParser]\n    def post(self, request):\n        print(request.data)\n        user = authenticate(username=request.data[\"uid\"], password=request.data[\"passwd\"])\n        if user is not None:\n            # print(user.aliments.all())\n            # print(user.aliment)\n            refresh = RefreshToken.for_user(user)",
        "detail": "src.api.views",
        "documentation": {}
    },
    {
        "label": "ConfigurationView",
        "kind": 6,
        "importPath": "src.api.views",
        "description": "src.api.views",
        "peekOfCode": "class ConfigurationView(views.APIView):\n    permission_classes = [AllowAny]\n    parser_classes = [JSONParser]\n    def get(self, request, key):\n        keyValueData = get_object_or_404(KeyValueData, key=key, statut=True)\n        serializer = KeyValueDataSerializer(keyValueData)\n        return Response(serializer.data)\nclass ConfigurationBureauView(views.APIView):\n    permission_classes = [AllowAny]\n    parser_classes = [JSONParser]",
        "detail": "src.api.views",
        "documentation": {}
    },
    {
        "label": "ConfigurationBureauView",
        "kind": 6,
        "importPath": "src.api.views",
        "description": "src.api.views",
        "peekOfCode": "class ConfigurationBureauView(views.APIView):\n    permission_classes = [AllowAny]\n    parser_classes = [JSONParser]\n    def get(self, request, key):\n        key_value_data = get_object_or_404(KeyValueData, key=key, statut=True)\n        data = key_value_data.data\n        if 'bureau_v2' in data:\n            bureau_codes = data['bureau_v2']\n            bureaux = Bureau.objects.filter(code__in=bureau_codes)\n            bureau_serializer = BureauSerializer(bureaux, many=True)",
        "detail": "src.api.views",
        "documentation": {}
    },
    {
        "label": "ModeRemboursementListView",
        "kind": 6,
        "importPath": "src.api.views",
        "description": "src.api.views",
        "peekOfCode": "class ModeRemboursementListView(views.APIView):\n    permission_classes = [AllowAny]\n    parser_classes = [JSONParser]\n    def get(self, request):\n        modes = ModeReglement.objects.filter(libelle__in=['Cheque', 'Mobile money'])\n        if not modes.exists():\n            return Response(data={\"detail\": \"Aucun mode de remboursement trouvé.\"}, status=404)\n        serializer = ModeRemboursementSerializer(modes, many=True)\n        return Response(serializer.data)\nclass DemandeRemboursementView(views.APIView):",
        "detail": "src.api.views",
        "documentation": {}
    },
    {
        "label": "DemandeRemboursementView",
        "kind": 6,
        "importPath": "src.api.views",
        "description": "src.api.views",
        "peekOfCode": "class DemandeRemboursementView(views.APIView):\n    permission_classes = [IsAuthenticated]\n    parser_classes = [JSONParser, MultiPartParser, FormParser]\n    def post(self, request):\n        user = self.request.user\n        serializer = DemandeRemboursementSerializer(data=request.data)\n        if serializer.is_valid():\n            # Vérifier si l'utilisateur est un adherent principal\n            if user.aliment.adherent_principal_id:\n                mode_remboursement = ModeReglement.objects.get(id=serializer.validated_data['mode_remboursement'].id)",
        "detail": "src.api.views",
        "documentation": {}
    },
    {
        "label": "RegisterUserView",
        "kind": 6,
        "importPath": "src.api.views",
        "description": "src.api.views",
        "peekOfCode": "class RegisterUserView(views.APIView):\n    permission_classes = [AllowAny]\n    parser_classes = [JSONParser]\n    def post(self, request):\n        try:\n            serializer = CreateUserSerializer(data=request.data)\n            if serializer.is_valid():\n                carte = Carte.objects.filter(numero=request.data['username']).first()\n                config = KeyValueData.objects.filter(key='SANTE_MOBILE_BUREAU_V2').first()\n                print(config.data)",
        "detail": "src.api.views",
        "documentation": {}
    },
    {
        "label": "RequestResetPasswordView",
        "kind": 6,
        "importPath": "src.api.views",
        "description": "src.api.views",
        "peekOfCode": "class RequestResetPasswordView(views.APIView):\n    permission_classes = [AllowAny]\n    parser_classes = [JSONParser]\n    def post(self, request):\n        try:\n            if not request.data.get('username', None):\n                return Response({\"username\": [\"Ce champ est obligatoire.\"]}, status=status.HTTP_400_BAD_REQUEST)\n            carte = Carte.objects.filter(numero=request.data['username']).first()\n            config = KeyValueData.objects.filter(key='SANTE_MOBILE_BUREAU_V2').first()\n            if carte is not None:",
        "detail": "src.api.views",
        "documentation": {}
    },
    {
        "label": "ResetPasswordView",
        "kind": 6,
        "importPath": "src.api.views",
        "description": "src.api.views",
        "peekOfCode": "class ResetPasswordView(views.APIView):\n    permission_classes = [AllowAny]\n    parser_classes = [JSONParser]\n    def post(self, request):\n        try:\n            # VERIFICATION SI USER EXISTE\n            if not request.data.get('username', None):\n                return Response({\"username\": [\"Ce champ est obligatoire.\"]}, status=status.HTTP_400_BAD_REQUEST)\n            user = User.objects.filter(username=request.data['username']).first()\n            if user is None:",
        "detail": "src.api.views",
        "documentation": {}
    },
    {
        "label": "OTPRequestView",
        "kind": 6,
        "importPath": "src.api.views",
        "description": "src.api.views",
        "peekOfCode": "class OTPRequestView(views.APIView):\n    permission_classes = [AllowAny]\n    parser_classes = [JSONParser]\n    hotp = pyotp.HOTP(settings.OTP_SECRET_KEY, digits=4)\n    def get(self, request):\n        try:\n            print(request.query_params.get('username', None))\n            print(request.query_params.get('is_v2', None))\n            print(request.query_params.get('email', None))\n            print(pyotp.random_base32())",
        "detail": "src.api.views",
        "documentation": {}
    },
    {
        "label": "UserView",
        "kind": 6,
        "importPath": "src.api.views",
        "description": "src.api.views",
        "peekOfCode": "class UserView(views.APIView):\n    permission_classes = [IsAuthenticated]\n    parser_classes = [JSONParser]\n    def get(self, request):\n        user = self.request.user\n        serializer = AlimentSerializer(user.aliment)\n        return Response(serializer.data)\n    def put(self, request):\n        try:\n            user = self.request.user",
        "detail": "src.api.views",
        "documentation": {}
    },
    {
        "label": "PrestataireView",
        "kind": 6,
        "importPath": "src.api.views",
        "description": "src.api.views",
        "peekOfCode": "class PrestataireView(views.APIView):\n    permission_classes = [IsAuthenticated]\n    parser_classes = [JSONParser]\n    def get(self, request):\n        user = self.request.user\n        serializer = PrestataireDataSerializer(user)\n        return Response(serializer.data)\nclass BeneficiariesView(views.APIView):\n    permission_classes = [IsAuthenticated]\n    parser_classes = [JSONParser]",
        "detail": "src.api.views",
        "documentation": {}
    },
    {
        "label": "BeneficiariesView",
        "kind": 6,
        "importPath": "src.api.views",
        "description": "src.api.views",
        "peekOfCode": "class BeneficiariesView(views.APIView):\n    permission_classes = [IsAuthenticated]\n    parser_classes = [JSONParser]\n    def get(self, request):\n        user = self.request.user\n        membres_famille = Aliment.objects.filter(adherent_principal_id=user.aliment.adherent_principal_id)\n        serializer = AlimentSerializer(membres_famille, many=True)\n        return Response(serializer.data)\nclass BeneficiariesByIdView(views.APIView):\n    permission_classes = [IsAuthenticated]",
        "detail": "src.api.views",
        "documentation": {}
    },
    {
        "label": "BeneficiariesByIdView",
        "kind": 6,
        "importPath": "src.api.views",
        "description": "src.api.views",
        "peekOfCode": "class BeneficiariesByIdView(views.APIView):\n    permission_classes = [IsAuthenticated]\n    parser_classes = [JSONParser]\n    def get(self, request, beneficiary_id):\n        beneficiary = Aliment.objects.get(id=beneficiary_id)\n        serializer = AlimentSerializer(beneficiary)\n        return Response(serializer.data)\nclass BeneficiariesByCarteView(views.APIView):\n    permission_classes = [IsAuthenticated]\n    parser_classes = [JSONParser]",
        "detail": "src.api.views",
        "documentation": {}
    },
    {
        "label": "BeneficiariesByCarteView",
        "kind": 6,
        "importPath": "src.api.views",
        "description": "src.api.views",
        "peekOfCode": "class BeneficiariesByCarteView(views.APIView):\n    permission_classes = [IsAuthenticated]\n    parser_classes = [JSONParser]\n    def get(self, request, carte):\n        carte = Carte.objects.filter(numero=carte).first()\n        print(carte)\n        prestataire_id = request.query_params.get('prestataire_id', None)\n        if carte is not None:\n            if carte.statut == Statut.ACTIF:\n                aliment = carte.aliment",
        "detail": "src.api.views",
        "documentation": {}
    },
    {
        "label": "BarremeView",
        "kind": 6,
        "importPath": "src.api.views",
        "description": "src.api.views",
        "peekOfCode": "class BarremeView(views.APIView):\n    permission_classes = [IsAuthenticated]\n    parser_classes = [JSONParser]\n    def get(self, request, formul_id):\n        barrem = Bareme.objects.filter(formulegarantie_id=formul_id, statut=Statut.ACTIF)\n        serializer = BarremeSerializer(barrem, many=True)\n        return Response(serializer.data)\nclass SinistreView(views.APIView, SmartResultsSetPagination):\n    permission_classes = [IsAuthenticated]\n    parser_classes = [JSONParser]",
        "detail": "src.api.views",
        "documentation": {}
    },
    {
        "label": "SinistreView",
        "kind": 6,
        "importPath": "src.api.views",
        "description": "src.api.views",
        "peekOfCode": "class SinistreView(views.APIView, SmartResultsSetPagination):\n    permission_classes = [IsAuthenticated]\n    parser_classes = [JSONParser]\n    # serializer_class = SinisteSerializer\n    # pagination_class = SmartResultsSetPagination\n    # filter_backends = [DjangoFilterBackend]\n    # filterset_fields = ['aliment', 'date_survenance', 'acte']\n    # queryset = Sinistre.objects.filter(statut=StatutSinistre.ACCORDE).order_by('-id')\n    def get(self, request):\n        print(request.query_params)",
        "detail": "src.api.views",
        "documentation": {}
    },
    {
        "label": "ReseauSoinsView",
        "kind": 6,
        "importPath": "src.api.views",
        "description": "src.api.views",
        "peekOfCode": "class ReseauSoinsView(views.APIView):\n    permission_classes = [IsAuthenticated]\n    parser_classes = [JSONParser]\n    # serializer_class = PrestataireSerializer\n    # pagination_class = SmartResultsSetPagination\n    # filter_backends = [DjangoFilterBackend]\n    # filterset_fields = ['aliment', 'date_survenance', 'acte']\n    # queryset = Sinistre.objects.filter(statut=StatutSinistre.ACCORDE).order_by('-id')\n    def get(self, request, formul_id):\n        print(request.query_params)",
        "detail": "src.api.views",
        "documentation": {}
    },
    {
        "label": "TypePrestataireView",
        "kind": 6,
        "importPath": "src.api.views",
        "description": "src.api.views",
        "peekOfCode": "class TypePrestataireView(views.APIView):\n    permission_classes = [IsAuthenticated]\n    parser_classes = [JSONParser]\n    def get(self, request):\n        type_prestataire = TypePrestataire.objects.all()\n        serializer = TypePrestataireSerializer(type_prestataire, many=True)\n        return Response(serializer.data)\nclass PrestataireDataView(views.APIView, SmartResultsSetPagination):\n    permission_classes = [IsAuthenticated]\n    parser_classes = [JSONParser]",
        "detail": "src.api.views",
        "documentation": {}
    },
    {
        "label": "PrestataireDataView",
        "kind": 6,
        "importPath": "src.api.views",
        "description": "src.api.views",
        "peekOfCode": "class PrestataireDataView(views.APIView, SmartResultsSetPagination):\n    permission_classes = [IsAuthenticated]\n    parser_classes = [JSONParser]\n    def get(self, request):\n        search = request.query_params.get('search', None)\n        bureau = request.user.bureau\n        queryset = Prestataire.objects.filter(status=True, bureau=bureau).order_by('name')\n        if search is not None:\n            from django.db.models import Q\n            queryset = queryset.filter(",
        "detail": "src.api.views",
        "documentation": {}
    },
    {
        "label": "ActeDataView",
        "kind": 6,
        "importPath": "src.api.views",
        "description": "src.api.views",
        "peekOfCode": "class ActeDataView(views.APIView, SmartResultsSetPagination):\n    permission_classes = [IsAuthenticated]\n    parser_classes = [JSONParser]\n    def get(self, request):\n        search = request.query_params.get('search', None)\n        type_acte = request.query_params.get('type_acte', None)\n        queryset = Acte.objects.filter(status=True).order_by('libelle')\n        if type_acte is not None:\n            queryset = queryset.filter(type_acte_id=type_acte)\n        if search is not None:",
        "detail": "src.api.views",
        "documentation": {}
    },
    {
        "label": "WsBobyView",
        "kind": 6,
        "importPath": "src.api.views",
        "description": "src.api.views",
        "peekOfCode": "class WsBobyView(views.APIView):\n    permission_classes = [IsAuthenticated]\n    parser_classes = [JSONParser]\n    def post(self, request):\n        resp = {\n            \"statusCode\": 0,\n            \"statusMessage\": None,\n            \"responses\": [\n                {\n                    \"name\": \"\",",
        "detail": "src.api.views",
        "documentation": {}
    },
    {
        "label": "TestNumCartView",
        "kind": 6,
        "importPath": "src.api.views",
        "description": "src.api.views",
        "peekOfCode": "class TestNumCartView(views.APIView):\n    permission_classes = [IsAuthenticated]\n    parser_classes = [JSONParser]\n    def get(self, request):\n        user = self.request.user\n        numer_cart = generate_numero_carte(user.aliment)\n        return Response(data={\"numero_carte\": numer_cart})\nclass AddAyantDroitView(views.APIView):\n    permission_classes = [IsAuthenticated]\n    parser_classes = [JSONParser]",
        "detail": "src.api.views",
        "documentation": {}
    },
    {
        "label": "AddAyantDroitView",
        "kind": 6,
        "importPath": "src.api.views",
        "description": "src.api.views",
        "peekOfCode": "class AddAyantDroitView(views.APIView):\n    permission_classes = [IsAuthenticated]\n    parser_classes = [JSONParser]\n    def post(self, request, *args, **kwargs):\n        user = self.request.user\n        aliment = user.aliment\n        formules = FormuleGarantie.objects.get(id=aliment.formule.id)\n        polices = formules.police\n        pprint('Hello Joseph')\n        # Step 1 : Vérifier ou créer une campagne pour l'utilisateur connecté",
        "detail": "src.api.views",
        "documentation": {}
    },
    {
        "label": "ListProspectsView",
        "kind": 6,
        "importPath": "src.api.views",
        "description": "src.api.views",
        "peekOfCode": "class ListProspectsView(views.APIView):\n    permission_classes = [IsAuthenticated]\n    parser_classes = [JSONParser]\n    def get(self, request, *args, **kwargs):\n        user = request.user\n        # Step 1 : Récupérer la CampagneAppmobile associée à l'utilisateur connecté\n        campagne = CampagneAppmobile.objects.filter(created_by=user).first()\n        if not campagne:\n            return Response({'error': 'No campaign found for the user'}, status=status.HTTP_404_NOT_FOUND)\n        # Step 2 : Récupérer les Prospects avec les statuts 'VALIDE' et 'ATTENTE'",
        "detail": "src.api.views",
        "documentation": {}
    },
    {
        "label": "FetchDigitalCard",
        "kind": 6,
        "importPath": "src.api.views",
        "description": "src.api.views",
        "peekOfCode": "class FetchDigitalCard(views.APIView):\n    permission_classes = [IsAuthenticated]\n    parser_classes = [JSONParser]\n    # @method_decorator(csrf_exempt)\n    def get(self, request, format=None):\n        if not request.user.is_authenticated:\n            return Response({'error': 'User is not authenticated.'}, status=status.HTTP_401_UNAUTHORIZED)\n        user_id = request.user.id\n        try:\n            digital_card = CarteDigitalDematerialisee.objects.filter(user__id=user_id).order_by('-id')[0]",
        "detail": "src.api.views",
        "documentation": {}
    },
    {
        "label": "CreateDigitalCard",
        "kind": 6,
        "importPath": "src.api.views",
        "description": "src.api.views",
        "peekOfCode": "class CreateDigitalCard(views.APIView):\n    permission_classes = [IsAuthenticated]\n    parser_classes = [JSONParser]\n    # @method_decorator(csrf_exempt)\n    def post(self, request, format=None):\n        user_id = request.user.id\n        existing_card = CarteDigitalDematerialisee.objects.filter(\n            user__id=user_id).first()\n        if existing_card:\n            return Response({'error': 'Une carte digital existe déjà pour cet utilisateur.'},",
        "detail": "src.api.views",
        "documentation": {}
    },
    {
        "label": "UpdateDigitalCard",
        "kind": 6,
        "importPath": "src.api.views",
        "description": "src.api.views",
        "peekOfCode": "class UpdateDigitalCard(views.APIView):\n    permission_classes = [IsAuthenticated]\n    # @method_decorator(csrf_exempt)\n    def put(self, request, digital_card_id, format=None):\n        try:\n            digital_card = CarteDigitalDematerialisee.objects.get(id=digital_card_id, user=request.user)\n        except CarteDigitalDematerialisee.DoesNotExist:\n            return Response({'error': 'Carte digitale introuvable pour cet utilisateur.'},\n                            status=status.HTTP_404_NOT_FOUND)\n        update_data = {",
        "detail": "src.api.views",
        "documentation": {}
    },
    {
        "label": "PriseEnChargeView",
        "kind": 6,
        "importPath": "src.api.views",
        "description": "src.api.views",
        "peekOfCode": "class PriseEnChargeView(views.APIView):\n    permission_classes = [IsAuthenticated]\n    parser_classes = [JSONParser, MultiPartParser, FormParser]\n    def post(self, request):\n        user = self.request.user\n        aliment = user.aliment\n        carte = aliment.carte_active() if aliment.carte_active() else None\n        numero_carte = carte.numero if carte else None\n        prescripteur_id = 2873  # par default DR KOUSSOUBE ERIC\n        affection_id = 1  # par default AUTRE AFFECTION",
        "detail": "src.api.views",
        "documentation": {}
    },
    {
        "label": "PriseEnChargeActeInfoView",
        "kind": 6,
        "importPath": "src.api.views",
        "description": "src.api.views",
        "peekOfCode": "class PriseEnChargeActeInfoView(views.APIView):\n    permission_classes = [IsAuthenticated]\n    parser_classes = [JSONParser]\n    def get(self, request, acte_id):\n        message = None\n        status_code = None\n        jResponse = {\n            \"message\": message,\n            \"status_code\": status_code,\n        }",
        "detail": "src.api.views",
        "documentation": {}
    },
    {
        "label": "ConstantesView",
        "kind": 6,
        "importPath": "src.api.views",
        "description": "src.api.views",
        "peekOfCode": "class ConstantesView(views.APIView):\n    permission_classes = [IsAuthenticated]\n    parser_classes = [JSONParser]\n    def get(self, request):\n        type_acte = TypeActe.objects.all()\n        civilite = Civilite.objects.all()\n        qualite_beneficiaire = QualiteBeneficiaire.objects.all()\n        pays = Pays.objects.all()\n        profession = Profession.objects.all()\n        typeacte_serializer = TypeActeSerialiser(type_acte, many=True)",
        "detail": "src.api.views",
        "documentation": {}
    },
    {
        "label": "get_user_id_from_token",
        "kind": 2,
        "importPath": "src.api.views",
        "description": "src.api.views",
        "peekOfCode": "def get_user_id_from_token(token):\n    try:\n        # Décoder le token pour obtenir les données de l'utilisateur\n        decoded_token = AccessToken(token)\n        pprint(decoded_token)\n        user_id = decoded_token['user_id']\n        return user_id\n    except Exception as e:\n        # Le token est invalide ou a expiré\n        print(str(e))",
        "detail": "src.api.views",
        "documentation": {}
    },
    {
        "label": "info",
        "kind": 2,
        "importPath": "src.api.views",
        "description": "src.api.views",
        "peekOfCode": "def info(request):\n    message = None\n    status_code = None\n    jResponse = {\n        \"message\": message,\n        \"status_code\": status_code\n    }\n    if request.method == 'POST':\n        json_data = request.data\n        numero_carte = json_data.get('numero_assure', None)",
        "detail": "src.api.views",
        "documentation": {}
    },
    {
        "label": "service_save",
        "kind": 2,
        "importPath": "src.api.views",
        "description": "src.api.views",
        "peekOfCode": "def service_save(request):\n    token = request.headers.get('Authorization').split(' ')[1]\n    message = None\n    status_code = None\n    jResponse = {\n        \"message\": message,\n        \"status_code\": status_code\n    }\n    if request.method == 'POST':\n        json_data = request.data",
        "detail": "src.api.views",
        "documentation": {}
    },
    {
        "label": "get_status_sinistre",
        "kind": 2,
        "importPath": "src.api.views",
        "description": "src.api.views",
        "peekOfCode": "def get_status_sinistre(request):\n    json_data = request.data\n    numero_sinistre = json_data.get('numero_sinistre', None)\n    sinistre = Sinistre.objects.filter(numero=numero_sinistre).first()\n    if sinistre:\n        status_code = 200\n        message = \"Informartions sinistre\"\n        body = {\n            \"statut_sinistre\": sinistre.statut,\n            \"code_acte\": sinistre.acte.code,",
        "detail": "src.api.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.comptabilite.migrations.0001_initial",
        "description": "src.comptabilite.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='CompteComptable',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('code', models.CharField(blank=True, max_length=255, null=True)),",
        "detail": "src.comptabilite.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.comptabilite.migrations.0002_initial",
        "description": "src.comptabilite.migrations.0002_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('comptabilite', '0001_initial'),\n        ('production', '0001_initial'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n        ('sinistre', '0001_initial'),\n        ('configurations', '0001_initial'),\n    ]\n    operations = [",
        "detail": "src.comptabilite.migrations.0002_initial",
        "documentation": {}
    },
    {
        "label": "ExtractionExcelAdmin",
        "kind": 6,
        "importPath": "src.comptabilite.admin",
        "description": "src.comptabilite.admin",
        "peekOfCode": "class ExtractionExcelAdmin(admin.ModelAdmin):\n    list_filter = ('numero',)\n    list_display = ('numero',)\n    search_field = ('numero',)\nclass ReglementCieAdmin(admin.ModelAdmin):\n    list_filter = ('numero',)\n    list_display = ('numero',)\n    search_field = ('numero',)\n    '''def get_queryset(self, request):\n        return super(ReglementCieAdmin, self).get_queryset(request).filter(",
        "detail": "src.comptabilite.admin",
        "documentation": {}
    },
    {
        "label": "ReglementCieAdmin",
        "kind": 6,
        "importPath": "src.comptabilite.admin",
        "description": "src.comptabilite.admin",
        "peekOfCode": "class ReglementCieAdmin(admin.ModelAdmin):\n    list_filter = ('numero',)\n    list_display = ('numero',)\n    search_field = ('numero',)\n    '''def get_queryset(self, request):\n        return super(ReglementCieAdmin, self).get_queryset(request).filter(\n            Q(mode_reglement_id=200))'''\nclass EncaissementCommissionAdmin(admin.ModelAdmin):\n    list_filter = ('numero',)\n    list_display = ('numero',)",
        "detail": "src.comptabilite.admin",
        "documentation": {}
    },
    {
        "label": "EncaissementCommissionAdmin",
        "kind": 6,
        "importPath": "src.comptabilite.admin",
        "description": "src.comptabilite.admin",
        "peekOfCode": "class EncaissementCommissionAdmin(admin.ModelAdmin):\n    list_filter = ('numero',)\n    list_display = ('numero',)\n    search_field = ('numero',)\nclass ReglementApporteursAdmin(admin.ModelAdmin):\n    list_filter = ('numero',)\n    list_display = ('numero',)\n    search_field = ('numero',)\nadmin.site.register(BordereauOrdonnance)\n#admin.site.register(Reglement)",
        "detail": "src.comptabilite.admin",
        "documentation": {}
    },
    {
        "label": "ReglementApporteursAdmin",
        "kind": 6,
        "importPath": "src.comptabilite.admin",
        "description": "src.comptabilite.admin",
        "peekOfCode": "class ReglementApporteursAdmin(admin.ModelAdmin):\n    list_filter = ('numero',)\n    list_display = ('numero',)\n    search_field = ('numero',)\nadmin.site.register(BordereauOrdonnance)\n#admin.site.register(Reglement)\nadmin.site.register(ReglementApporteurs)\n# admin.site.register(EncaissementCommission)\n#admin.site.register(ExtractionExcel)",
        "detail": "src.comptabilite.admin",
        "documentation": {}
    },
    {
        "label": "admin.site",
        "kind": 5,
        "importPath": "src.comptabilite.admin",
        "description": "src.comptabilite.admin",
        "peekOfCode": "admin.site = custom_admin_site\nadmin.site.site_header = 'INOV - COMPTABILITE'\nclass ExtractionExcelAdmin(admin.ModelAdmin):\n    list_filter = ('numero',)\n    list_display = ('numero',)\n    search_field = ('numero',)\nclass ReglementCieAdmin(admin.ModelAdmin):\n    list_filter = ('numero',)\n    list_display = ('numero',)\n    search_field = ('numero',)",
        "detail": "src.comptabilite.admin",
        "documentation": {}
    },
    {
        "label": "admin.site.site_header",
        "kind": 5,
        "importPath": "src.comptabilite.admin",
        "description": "src.comptabilite.admin",
        "peekOfCode": "admin.site.site_header = 'INOV - COMPTABILITE'\nclass ExtractionExcelAdmin(admin.ModelAdmin):\n    list_filter = ('numero',)\n    list_display = ('numero',)\n    search_field = ('numero',)\nclass ReglementCieAdmin(admin.ModelAdmin):\n    list_filter = ('numero',)\n    list_display = ('numero',)\n    search_field = ('numero',)\n    '''def get_queryset(self, request):",
        "detail": "src.comptabilite.admin",
        "documentation": {}
    },
    {
        "label": "ComptabiliteConfig",
        "kind": 6,
        "importPath": "src.comptabilite.apps",
        "description": "src.comptabilite.apps",
        "peekOfCode": "class ComptabiliteConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'comptabilite'",
        "detail": "src.comptabilite.apps",
        "documentation": {}
    },
    {
        "label": "ReglementReverseCompagnie",
        "kind": 6,
        "importPath": "src.comptabilite.models",
        "description": "src.comptabilite.models",
        "peekOfCode": "class ReglementReverseCompagnie(Reglement):\n    class Meta:\n        proxy = True\n        verbose_name = \"Reglement compagnie\"\n        verbose_name_plural = \"Reglements compagnie\"\n        permissions = [\n            (\"can_do_reglement_compagnie\", \"Peut faire des règlements compagnies\"),\n        ]\n    def get_queryset(self):\n        return super(ReglementReverseCompagnie, self).get_queryset().filter(statut_reversement_compagnie=StatutReversementCompagnie.REVERSE)",
        "detail": "src.comptabilite.models",
        "documentation": {}
    },
    {
        "label": "ReglementApporteurs",
        "kind": 6,
        "importPath": "src.comptabilite.models",
        "description": "src.comptabilite.models",
        "peekOfCode": "class ReglementApporteurs(Reglement):\n    class Meta:\n        proxy = True\n        verbose_name = \"Reglement apporteurs\"\n        verbose_name_plural = \"Reglements apporteurs\"\n    def get_queryset(self):\n        return super(ReglementApporteurs, self).get_queryset().filter(statut_reversement_compagnie=StatutReversementCompagnie.REVERSE)\nclass BordereauOrdonnance(BordereauOrdonnancement):\n    class Meta:\n        proxy = True",
        "detail": "src.comptabilite.models",
        "documentation": {}
    },
    {
        "label": "BordereauOrdonnance",
        "kind": 6,
        "importPath": "src.comptabilite.models",
        "description": "src.comptabilite.models",
        "peekOfCode": "class BordereauOrdonnance(BordereauOrdonnancement):\n    class Meta:\n        proxy = True\n        verbose_name = \"Bord. ordonnancé\"\n        verbose_name_plural = \"Bordx ordonnancés\"\n    def get_queryset(self):\n        return super(BordereauOrdonnancement, self).get_queryset().filter(statut_reversement_compagnie=StatutReversementCompagnie.REVERSE)\nclass EncaissementCommission(models.Model):\n    operation = models.ForeignKey(Operation, null=True, on_delete=models.RESTRICT)\n    reglement = models.ForeignKey(Reglement, null=True, on_delete=models.RESTRICT, related_name=\"encaissement_commissions\", related_query_name=\"encaissement_commission\")",
        "detail": "src.comptabilite.models",
        "documentation": {}
    },
    {
        "label": "EncaissementCommission",
        "kind": 6,
        "importPath": "src.comptabilite.models",
        "description": "src.comptabilite.models",
        "peekOfCode": "class EncaissementCommission(models.Model):\n    operation = models.ForeignKey(Operation, null=True, on_delete=models.RESTRICT)\n    reglement = models.ForeignKey(Reglement, null=True, on_delete=models.RESTRICT, related_name=\"encaissement_commissions\", related_query_name=\"encaissement_commission\")\n    montant_com_courtage = models.DecimalField(max_digits=20, decimal_places=0, blank=True, null=True)\n    montant_com_gestion = models.DecimalField(max_digits=20, decimal_places=0, blank=True, null=True)\n    type_commission = models.fields.CharField(choices=TypeEncaissementCommission.choices, default=None, max_length=15, null=True)\n    created_by = models.ForeignKey(User, null=True, on_delete=models.RESTRICT)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    def __str__(self):",
        "detail": "src.comptabilite.models",
        "documentation": {}
    },
    {
        "label": "CompteComptable",
        "kind": 6,
        "importPath": "src.comptabilite.models",
        "description": "src.comptabilite.models",
        "peekOfCode": "class CompteComptable(models.Model):\n    code = models.CharField(max_length=255, blank=True, null=True)\n    libelle = models.CharField(max_length=255, blank=True, null=True)\n    created_by = models.ForeignKey(User, null=True, on_delete=models.RESTRICT)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    def __str__(self):\n        return self.libelle\n    class Meta:\n        db_table = 'compte_comptable'",
        "detail": "src.comptabilite.models",
        "documentation": {}
    },
    {
        "label": "Journal",
        "kind": 6,
        "importPath": "src.comptabilite.models",
        "description": "src.comptabilite.models",
        "peekOfCode": "class Journal(models.Model):\n    bureau = models.ForeignKey(Bureau, null=False, on_delete=models.RESTRICT)\n    compte_comptable = models.ForeignKey(CompteComptable, null=False, on_delete=models.RESTRICT)\n    sens = models.CharField(max_length=1, blank=True, null=True) #D, C\n    montant = models.DecimalField(max_digits=20, decimal_places=0, blank=True, null=True)\n    designation = models.CharField(max_length=255, blank=True, null=True)\n    encaissement_commission = models.ForeignKey(EncaissementCommission, null=True, on_delete=models.RESTRICT, related_name=\"journals\", related_query_name=\"journal\")\n    created_by = models.ForeignKey(User, null=True, on_delete=models.RESTRICT)\n    created_at = models.DateTimeField(auto_now_add=True)\n    def __str__(self):",
        "detail": "src.comptabilite.models",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "src.comptabilite.urls",
        "description": "src.comptabilite.urls",
        "peekOfCode": "urlpatterns = [\n    # path('bordereaux-ordonnances/', BordereauxOrdonnances.as_view(), name='bordereaux-ordonnances'),\n    path('bordereauordonnance/', BordereauxOrdonnancesView.as_view(), name='bordereaux_ordonnances'),\n    path('bordereaux_ordonnances_datatable/', views.bordereaux_ordonnances_datatable, name='bordereaux_ordonnances_datatable'),\n    path('bordereaux-payes/', BordereauxPayesView.as_view(), name='bordereaux_payes_compta'),\n    path('bordereaux_payes_datatable/', views.bordereaux_payes_datatable, name='bordereaux_payes_datatable'),\n    path('fonds-de-roulements/', InitialisationFondRoulementView.as_view(), name='initialisation_fonds_de_roulements'),\n    path('add_mise_en_initialiser_fdr_garant/',views.add_mise_en_initialiser_fdr_garant, name='add_mise_en_initialiser_fdr_garant'),\n    path(\"edition-caution-compagnie/<int:compagnie_id>/\", views.edition_caution_compagnie, name='edition_caution_compagnie'),\n    path('get-fdr-data/', views.get_fdr_data, name='get_fdr_data'),",
        "detail": "src.comptabilite.urls",
        "documentation": {}
    },
    {
        "label": "BordereauxOrdonnancesView",
        "kind": 6,
        "importPath": "src.comptabilite.views",
        "description": "src.comptabilite.views",
        "peekOfCode": "class BordereauxOrdonnancesView(TemplateView):\n    # permission_required = \"comptabilite.view_reglement\"\n    template_name = 'comptabilite/bordereaux_ordonnances.html'\n    model = Sinistre\n    def get(self, request, *args, **kwargs):\n        user = User.objects.get(id=request.user.id)\n        type_remboursements = TypeRemboursement.objects.all()\n        prestataire_ids = BordereauOrdonnancement.objects.filter(bureau=request.user.bureau, statut_paiement=StatutPaiementSinistre.ORDONNANCE, statut_validite=StatutValidite.VALIDE).values_list('prestataire_id', flat=True)\n        prestataires = Prestataire.objects.filter(id__in=prestataire_ids).order_by('name')\n        adherent_principal_ids = BordereauOrdonnancement.objects.filter(bureau=request.user.bureau, statut_paiement=StatutPaiementSinistre.ORDONNANCE, statut_validite=StatutValidite.VALIDE, type_remboursement__code=\"RD\").values_list('adherent_principal_id', flat=True)",
        "detail": "src.comptabilite.views",
        "documentation": {}
    },
    {
        "label": "InitialisationFondRoulementView",
        "kind": 6,
        "importPath": "src.comptabilite.views",
        "description": "src.comptabilite.views",
        "peekOfCode": "class InitialisationFondRoulementView(TemplateView):\n    template_name = 'comptabilite/initialisation_fonds_de_roulements.html'\n    def get_context_data(self, *args, **kwargs):\n        bureau = self.request.user.bureau\n        cautions = Caution.par_bureau(bureau).filter(date_fin_effet__isnull=True, status=True)\n        # Liste des garants sans caution (pour le modal et en ajouter)\n        garants_sans_caution = Compagnie.par_bureau(bureau).annotate(\n            caution_exists=Subquery(\n                Caution.objects.filter(compagnie_id=OuterRef('pk'), date_fin_effet__isnull=True).values('compagnie_id')\n            )",
        "detail": "src.comptabilite.views",
        "documentation": {}
    },
    {
        "label": "RefacturationAssureurView",
        "kind": 6,
        "importPath": "src.comptabilite.views",
        "description": "src.comptabilite.views",
        "peekOfCode": "class RefacturationAssureurView(TemplateView):\n    template_name = 'comptabilite/refacturation-assureur.html'\n    def get_context_data(self, **kwargs):\n        bureau = self.request.user.bureau\n        # Récupérer les compagnies avec des sinistres facturables\n        '''garants = Compagnie.objects.filter(bureau=bureau,\n            sinistre__in=Sinistre.objects.filter(\n                statut=StatutSinistre.ACCORDE,\n                statut_paiement=StatutPaiementSinistre.PAYE,\n                statut_validite=StatutValidite.VALIDE,",
        "detail": "src.comptabilite.views",
        "documentation": {}
    },
    {
        "label": {
            "name": "",
            "kind": 6,
            "peekOfCode": "class  FactureCompagnieView(TemplateView):\n    template_name = 'comptabilite/factures-compagnies.html'\n    model = FactureCompagnie\n    def get_context_data(self, **kwargs):\n        bureau = self.request.user.bureau\n        context = super().get_context_data(**kwargs)\n        factures = FactureCompagnie.objects.all()\n        modes_reglements = ModeReglement.objects.all().order_by('libelle')\n        # for facture in factures:\n        #     if facture.montant_restant <= 0:"
        },
        "kind": 6,
        "importPath": "src.comptabilite.views",
        "description": "src.comptabilite.views",
        "peekOfCode": "class  FactureCompagnieView(TemplateView):\n    template_name = 'comptabilite/factures-compagnies.html'\n    model = FactureCompagnie\n    def get_context_data(self, **kwargs):\n        bureau = self.request.user.bureau\n        context = super().get_context_data(**kwargs)\n        factures = FactureCompagnie.objects.all()\n        modes_reglements = ModeReglement.objects.all().order_by('libelle')\n        # for facture in factures:\n        #     if facture.montant_restant <= 0:",
        "detail": "src.comptabilite.views",
        "documentation": {}
    },
    {
        "label": "DetailFactureGarant",
        "kind": 6,
        "importPath": "src.comptabilite.views",
        "description": "src.comptabilite.views",
        "peekOfCode": "class DetailFactureGarant(TemplateView):\n    template_name = 'comptabilite/detail_facture_garant.html'\n    model = ReglementCompagnie\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        # Récupérer l'utilisateur actuel à partir de la requête\n        user = self.request.user\n        # Récupérer le facture_id depuis les kwargs\n        facture_id = self.kwargs.get('facture_id')\n        # Récupérer la facture spécifique en utilisant son ID",
        "detail": "src.comptabilite.views",
        "documentation": {}
    },
    {
        "label": "SuiviTresorerie",
        "kind": 6,
        "importPath": "src.comptabilite.views",
        "description": "src.comptabilite.views",
        "peekOfCode": "class SuiviTresorerie(TemplateView):\n    template_name = 'comptabilite/suivi-tresorerie.html'\n    model = Sinistre\n    def get(self, *args, **kwargs):\n        context_original = self.get_context_data(**kwargs)\n        bureau = self.request.user.bureau\n        # garants_cautionne = Compagnie.par_bureau(bureau).filter(caution__isnull=False).distinct().annotate(\n        #     montant_caution=Sum('caution__montant', distinct=True),\n        #     created_at_caution=Min('caution__created_at'), # Obligé d'utiliser une aggrégation Min ou Max 😕\n        # )",
        "detail": "src.comptabilite.views",
        "documentation": {}
    },
    {
        "label": "DetailTresorerie",
        "kind": 6,
        "importPath": "src.comptabilite.views",
        "description": "src.comptabilite.views",
        "peekOfCode": "class DetailTresorerie(TemplateView):\n    template_name = 'comptabilite/detail_tresorerie_par_garant.html'\n    model = ReglementCompagnie\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        # Récupérer l'utilisateur actuel à partir de la requête\n        user = self.request.user\n        compagnie_id = self.kwargs.get('compagnie_id')\n        compagnie = Compagnie.objects.get(id=compagnie_id)\n        data_camembert = prepare_camembert_data(bureau=compagnie.bureau, compagnie=compagnie)",
        "detail": "src.comptabilite.views",
        "documentation": {}
    },
    {
        "label": "BordereauxPayesView",
        "kind": 6,
        "importPath": "src.comptabilite.views",
        "description": "src.comptabilite.views",
        "peekOfCode": "class BordereauxPayesView(TemplateView):\n    # permission_required = \"comptabilite.view_reglement\"\n    template_name = 'comptabilite/bordereaux_payes.html'\n    model = Sinistre\n    def get(self, request, *args, **kwargs):\n        user = User.objects.get(id=request.user.id)\n        type_remboursements = TypeRemboursement.objects.all()\n        prestataire_ids = BordereauOrdonnancement.objects.filter(bureau=request.user.bureau, statut_paiement=StatutPaiementSinistre.PAYE, statut_validite=StatutValidite.VALIDE).values_list('prestataire_id', flat=True)\n        prestataires = Prestataire.objects.filter(id__in=prestataire_ids).order_by('name')\n        adherent_principal_ids = BordereauOrdonnancement.objects.filter(bureau=request.user.bureau, statut_paiement=StatutPaiementSinistre.PAYE, statut_validite=StatutValidite.VALIDE, type_remboursement__code=\"RD\").values_list('adherent_principal_id', flat=True)",
        "detail": "src.comptabilite.views",
        "documentation": {}
    },
    {
        "label": "DetailBordereauOrdonnancementView",
        "kind": 6,
        "importPath": "src.comptabilite.views",
        "description": "src.comptabilite.views",
        "peekOfCode": "class DetailBordereauOrdonnancementView(TemplateView):\n    # permission_required = \"comptabilite.view_reglement\"\n    template_name = 'comptabilite/details_bordereau_ordonnancement.html'\n    model = Sinistre\n    def get(self, request, bordereau_id, *args, **kwargs):\n        #TODO , filtrer sur le bureau : prestataire__bureau=request.user.bureau\n        bordereau = BordereauOrdonnancement.objects.filter(id=bordereau_id, bureau=request.user.bureau).first()\n        # dd(bordereau)\n        paiement_comptable = PaiementComptable.objects.filter(bordereau_ordonnancement_id=bordereau.id).first() if bordereau else None\n        liste_sinistres_bordereau = Sinistre.objects.filter(bordereau_ordonnancement=bordereau, statut_validite=StatutValidite.VALIDE)",
        "detail": "src.comptabilite.views",
        "documentation": {}
    },
    {
        "label": "PaiementsRealises",
        "kind": 6,
        "importPath": "src.comptabilite.views",
        "description": "src.comptabilite.views",
        "peekOfCode": "class PaiementsRealises(TemplateView):\n    template_name = 'comptabilite/paiements-realises.html'\n    model = Sinistre\n    def get(self, request, *args, **kwargs):\n        user = User.objects.get(id=request.user.id)\n        type_remboursements = TypeRemboursement.objects.all()\n        prestataire_ids = PaiementComptable.objects.filter(bureau=request.user.bureau).values_list('prestataire_id', flat=True)\n        prestataires = Prestataire.objects.filter(id__in=prestataire_ids).order_by('name')\n        bordereau_ordonnancement_ids = PaiementComptable.objects.filter(bureau=request.user.bureau).values_list('bordereau_ordonnancement_id', flat=True)\n        adherent_principal_ids = BordereauOrdonnancement.objects.filter(id__in=bordereau_ordonnancement_ids).values_list('adherent_principal_id', flat=True)",
        "detail": "src.comptabilite.views",
        "documentation": {}
    },
    {
        "label": "EditionLettreCheque",
        "kind": 6,
        "importPath": "src.comptabilite.views",
        "description": "src.comptabilite.views",
        "peekOfCode": "class EditionLettreCheque(TemplateView):\n    template_name = 'comptabilite/edition_lettre_cheque.html'\n    model = Sinistre\n    def get(self, request, *args, **kwargs):\n        user = User.objects.get(id=request.user.id)\n        type_remboursements = TypeRemboursement.objects.all()\n        prestataire_ids = PaiementComptable.objects.filter(bureau=request.user.bureau, mode_reglement_id=5, bordereau_lettre_cheque__isnull=True).values_list('prestataire_id',\n                                                                                                   flat=True)\n        prestataires = Prestataire.objects.filter(id__in=prestataire_ids).order_by('name')\n        bordereau_ordonnancement_ids = PaiementComptable.objects.filter(bureau=request.user.bureau, mode_reglement_id=5, bordereau_lettre_cheque__isnull=True).values_list('bordereau_ordonnancement_id', flat=True)",
        "detail": "src.comptabilite.views",
        "documentation": {}
    },
    {
        "label": "ReversesementCompagniesView",
        "kind": 6,
        "importPath": "src.comptabilite.views",
        "description": "src.comptabilite.views",
        "peekOfCode": "class ReversesementCompagniesView(TemplateView):\n    # permission_required = \"comptabilite.view_reglement\"\n    template_name = 'comptabilite/reglements_compagnies.html'\n    model = Reglement\n    def get(self, request, *args, **kwargs):\n        compagnies = Compagnie.objects.filter(bureau=request.user.bureau).order_by('nom')\n        for compagnie in compagnies:\n            pprint(compagnie.nombre_reglements_a_reverser_cie)\n            if compagnie.nombre_reglements_a_reverser_cie == 0:\n                compagnies = compagnies.exclude(id=compagnie.id)",
        "detail": "src.comptabilite.views",
        "documentation": {}
    },
    {
        "label": "EncaissementCommissionsView",
        "kind": 6,
        "importPath": "src.comptabilite.views",
        "description": "src.comptabilite.views",
        "peekOfCode": "class EncaissementCommissionsView(TemplateView):\n    # permission_required = \"comptabilite.view_reglement\"\n    template_name = 'comptabilite/encaissement_commissions.html'\n    model = Reglement\n    def get(self, request, *args, **kwargs):\n        compagnies = Compagnie.objects.filter(bureau=request.user.bureau).order_by('nom')\n        for compagnie in compagnies:\n            if compagnie.nombre_reglements_a_recevoir_com == 0:\n                compagnies = compagnies.exclude(id=compagnie.id)\n        reglements_compagnies = Reglement.objects.filter(",
        "detail": "src.comptabilite.views",
        "documentation": {}
    },
    {
        "label": "EncaissementCommissionsCourtGestView",
        "kind": 6,
        "importPath": "src.comptabilite.views",
        "description": "src.comptabilite.views",
        "peekOfCode": "class EncaissementCommissionsCourtGestView(TemplateView):\n    # permission_required = \"comptabilite.view_reglement\"\n    template_name = 'comptabilite/encaissement_commissions_court_gest.html'\n    model = Reglement\n    def get(self, request, *args, **kwargs):\n        compagnies = Compagnie.objects.filter(bureau=request.user.bureau).order_by('nom')\n        type = self.kwargs.get('type')\n        for compagnie in compagnies:\n            if type == \"courtage\" and compagnie.nombre_reglements_a_recevoir_com_court == 0:\n                compagnies = compagnies.exclude(id=compagnie.id)",
        "detail": "src.comptabilite.views",
        "documentation": {}
    },
    {
        "label": "ReglementApporteursView",
        "kind": 6,
        "importPath": "src.comptabilite.views",
        "description": "src.comptabilite.views",
        "peekOfCode": "class ReglementApporteursView(TemplateView):\n    # permission_required = \"comptabilite.view_reglement\"\n    template_name = 'comptabilite/reglements_apporteurs.html'\n    model = Reglement\n    def get(self, request, *args, **kwargs):\n        reglements_compagnies = Reglement.objects.filter(\n            statut_reversement_compagnie=StatutReversementCompagnie.REVERSE,\n            statut_commission=StatutEncaissementCommission.ENCAISSEE,\n            statut_reglement_apporteurs=StatutReglementApporteurs.NON_REGLE)\n        compagnies = Compagnie.objects.all().order_by('nom')",
        "detail": "src.comptabilite.views",
        "documentation": {}
    },
    {
        "label": "ExecutionRequeteExcelComptaView",
        "kind": 6,
        "importPath": "src.comptabilite.views",
        "description": "src.comptabilite.views",
        "peekOfCode": "class ExecutionRequeteExcelComptaView(TemplateView):\n    template_name = 'comptabilite/execution_requete_excel_compta.html'\n    model = Sinistre\n    def get(self, request, *args, **kwargs):\n        #TODO , filtrer sur le bureau : prestataire__bureau=request.user.bureau\n        periode_comptable = PeriodeComptable.objects.all()\n        query_datas = [\n            {\n                \"query_label\": \"ANALYSE DÉTAILLÉE DES PRIMES COMPTA\",\n                \"query_name\": \"ANALYSE_PRIMES\",",
        "detail": "src.comptabilite.views",
        "documentation": {}
    },
    {
        "label": "uploaded_file_url",
        "kind": 2,
        "importPath": "src.comptabilite.views",
        "description": "src.comptabilite.views",
        "peekOfCode": "def uploaded_file_url(file):\n    # Simulation de l'upload du fichier sur le serveur\n    fs = FileSystemStorage()\n    file_path = fs.save(file.name, file)\n    return fs.url(file_path)\n@method_decorator(login_required, name='dispatch')\nclass BordereauxOrdonnancesView(TemplateView):\n    # permission_required = \"comptabilite.view_reglement\"\n    template_name = 'comptabilite/bordereaux_ordonnances.html'\n    model = Sinistre",
        "detail": "src.comptabilite.views",
        "documentation": {}
    },
    {
        "label": "export_bordereaux_ordonnances",
        "kind": 2,
        "importPath": "src.comptabilite.views",
        "description": "src.comptabilite.views",
        "peekOfCode": "def export_bordereaux_ordonnances(request):\n    try:\n        # Retrieve the BordereauOrdonnancement instances based on filters and user's bureau\n        queryset = BordereauOrdonnancement.objects.filter(\n            bureau=request.user.bureau,\n            statut_paiement=StatutPaiementSinistre.ORDONNANCE,  # Filter by statut_paiement = 'ORDONNANCE'\n        ).order_by('-id')\n        # Create an Excel response\n        response = HttpResponse(content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')\n        response['Content-Disposition'] = f'attachment; filename=\"LISTE DES BORDEREAUX ORDONNANCÉS.xlsx\"'",
        "detail": "src.comptabilite.views",
        "documentation": {}
    },
    {
        "label": "bordereaux_ordonnances_datatable",
        "kind": 2,
        "importPath": "src.comptabilite.views",
        "description": "src.comptabilite.views",
        "peekOfCode": "def bordereaux_ordonnances_datatable(request):\n    items_per_page = 10\n    page_number = request.GET.get('page')\n    start = int(request.GET.get('start', 0))\n    length = int(request.GET.get('length', items_per_page))\n    sort_column_index = int(request.GET.get('order[0][column]'))\n    sort_direction = request.GET.get('order[0][dir]')\n    search_numero_bordereau = request.GET.get('search_numero_bordereau', '')\n    search_periode_comptable = request.GET.get('search_periode_comptable', '')\n    search_prestataire = request.GET.get('search_prestataire', '')",
        "detail": "src.comptabilite.views",
        "documentation": {}
    },
    {
        "label": "get_fdr_data",
        "kind": 2,
        "importPath": "src.comptabilite.views",
        "description": "src.comptabilite.views",
        "peekOfCode": "def get_fdr_data(request):\n    # Vue appelée via AJAX\n    if request.headers.get('X-Requested-With') == 'XMLHttpRequest':\n        bureau = request.user.bureau\n        cautions = Caution.par_bureau(bureau).filter(date_fin_effet__isnull=True, status=True)\n        # Effectuez les calculs ou les requêtes nécessaires\n        total_global_caution = cautions.aggregate(total_montant=Sum('montant'))['total_montant'] or 0\n        total_global_en_attente_de_reglement = FactureCompagnie.objects.filter(\n            bureau=bureau,\n            statut=StatutFacture.NON_SOLDE",
        "detail": "src.comptabilite.views",
        "documentation": {}
    },
    {
        "label": "add_mise_en_initialiser_fdr_garant",
        "kind": 2,
        "importPath": "src.comptabilite.views",
        "description": "src.comptabilite.views",
        "peekOfCode": "def add_mise_en_initialiser_fdr_garant(request):\n    if request.method == 'POST':\n        compagnie_id = request.POST.get('compagnie_id')\n        saved_caution = save_caution(request=request, compagnie_id=compagnie_id)\n        if saved_caution:\n            return JsonResponse(\n                {\n                    'statut': 1,\n                    'message': 'Caution mise à jour avec succès !',\n                }",
        "detail": "src.comptabilite.views",
        "documentation": {}
    },
    {
        "label": "save_caution",
        "kind": 2,
        "importPath": "src.comptabilite.views",
        "description": "src.comptabilite.views",
        "peekOfCode": "def save_caution(request, compagnie_id):\n    bureau = request.user.bureau\n    compagnie = Compagnie.objects.get(id=compagnie_id)\n    montant = request.POST.get('montant')\n    # Nettoyer la valeur du montant\n    montant = int(montant.replace(\" \", \"\"))\n    date_debut_effet_str = request.POST.get('date_debut_effet')\n    date_debut_effet = datetime.datetime.strptime(date_debut_effet_str, '%Y-%m-%d').date()\n    # date_fin_effet = date_debut_effet - datetime.timedelta(days=1) + heure 23h59\n    date_fin_effet = datetime.datetime.combine(date_debut_effet - datetime.timedelta(days=1), datetime.time(23, 59, 59))",
        "detail": "src.comptabilite.views",
        "documentation": {}
    },
    {
        "label": "update_caution_garant",
        "kind": 2,
        "importPath": "src.comptabilite.views",
        "description": "src.comptabilite.views",
        "peekOfCode": "def update_caution_garant(request, garant_id):\n    if request.method == 'POST':\n        bureau = request.user.bureau\n        compagnie = Compagnie.objects.first(id=garant_id)\n        montant = request.POST.get('montant')\n        updated_at = request.POST.get('updated_at')\n        # Nettoyer la valeur du montant\n        montant = int(montant.replace(\" \", \"\"))\n        # Vérification des données requises\n        if compagnie and montant and updated_at:",
        "detail": "src.comptabilite.views",
        "documentation": {}
    },
    {
        "label": "edition_caution_compagnie",
        "kind": 2,
        "importPath": "src.comptabilite.views",
        "description": "src.comptabilite.views",
        "peekOfCode": "def edition_caution_compagnie(request, compagnie_id):\n    compagnie = Compagnie.objects.get(id=compagnie_id)\n    with transaction.atomic():\n        if request.method == 'POST':\n            saved_caution = save_caution(request=request, compagnie_id=compagnie_id)\n            if saved_caution:\n                return JsonResponse(\n                    {\n                        'statut': 1,\n                        'message': 'Caution mise à jour avec succès !',",
        "detail": "src.comptabilite.views",
        "documentation": {}
    },
    {
        "label": "init_fonds_de_roulements",
        "kind": 2,
        "importPath": "src.comptabilite.views",
        "description": "src.comptabilite.views",
        "peekOfCode": "def init_fonds_de_roulements(request):\n    user = request.user\n    bureau = request.user.bureau\n    garants = Compagnie.par_bureau(bureau)\n    for garant in garants:\n        caution_exists = Caution.objects.filter(compagnie=garant).exists()\n        # SET FDR TO 0 IF NOT INIT\n        if not caution_exists:\n            new_caution = Caution.objects.create(\n                    bureau=bureau,",
        "detail": "src.comptabilite.views",
        "documentation": {}
    },
    {
        "label": "add_mise_en_reglement_factures_garant",
        "kind": 2,
        "importPath": "src.comptabilite.views",
        "description": "src.comptabilite.views",
        "peekOfCode": "def add_mise_en_reglement_factures_garant(request):\n    return\nmethod_decorator(login_required, name=\"dispatch\")\nclass RefacturationAssureurView(TemplateView):\n    template_name = 'comptabilite/refacturation-assureur.html'\n    def get_context_data(self, **kwargs):\n        bureau = self.request.user.bureau\n        # Récupérer les compagnies avec des sinistres facturables\n        '''garants = Compagnie.objects.filter(bureau=bureau,\n            sinistre__in=Sinistre.objects.filter(",
        "detail": "src.comptabilite.views",
        "documentation": {}
    },
    {
        "label": "generate_facture_assureur_datatable",
        "kind": 2,
        "importPath": "src.comptabilite.views",
        "description": "src.comptabilite.views",
        "peekOfCode": "def generate_facture_assureur_datatable(request):\n    bureau = request.user.bureau\n    items_per_page = 100\n    page_number = request.GET.get('page')\n    start = int(request.GET.get('start', 0))\n    length = int(request.GET.get('length', items_per_page))\n    sort_column_index = request.GET.get('order[0][column]')\n    sort_direction = request.GET.get('order[0][dir]')\n    select_all = request.GET.get('all', '')\n    search_garant = request.GET.get('search_garant', '')",
        "detail": "src.comptabilite.views",
        "documentation": {}
    },
    {
        "label": "generate_facture_compagnie_pdf",
        "kind": 2,
        "importPath": "src.comptabilite.views",
        "description": "src.comptabilite.views",
        "peekOfCode": "def generate_facture_compagnie_pdf(request, facture_compagnie_id):\n    if request.method == \"POST\":\n        devise = request.user.bureau.pays.devise.code\n        facture_compagnie = FactureCompagnie.objects.filter(id=facture_compagnie_id).get()\n        sinistres = Sinistre.objects.filter(facture_compagnie=facture_compagnie)\n        # sinistres_grouped = defaultdict(list)\n        sinistres_grouped = defaultdict(lambda: {\n            'sinistres': [],\n            'total_frais_reel': 0,\n            'total_part_assure': 0,",
        "detail": "src.comptabilite.views",
        "documentation": {}
    },
    {
        "label": "submit_generate_facture_assureur",
        "kind": 2,
        "importPath": "src.comptabilite.views",
        "description": "src.comptabilite.views",
        "peekOfCode": "def submit_generate_facture_assureur(request):\n    # TODO : CODE_PAYS_YY_MM\n    # try:\n    with transaction.atomic():\n        compagnie = Compagnie.objects.get(id=int(request.POST.get('search_garant')))\n        devise = request.user.bureau.pays.devise.code\n        sinistres_payes_ids = literal_eval(request.POST.get('selectedItems'))\n        # print(\"sinistres_payes_ids\")\n        # print(sinistres_payes_ids)\n        search_garant = request.GET.get('search_garant', '')",
        "detail": "src.comptabilite.views",
        "documentation": {}
    },
    {
        "label": "get_refacturation_assureur_data",
        "kind": 2,
        "importPath": "src.comptabilite.views",
        "description": "src.comptabilite.views",
        "peekOfCode": "def get_refacturation_assureur_data(request):\n    # Vue appelée via AJAX\n    if request.headers.get('X-Requested-With') == 'XMLHttpRequest':\n        bureau = request.user.bureau\n        cautions = Caution.par_bureau(bureau).filter(date_fin_effet__isnull=True, status=True)\n        # Effectuez les calculs ou les requêtes nécessaires\n        total_global_caution = cautions.aggregate(total_montant=Sum('montant'))['total_montant'] or 0\n        total_global_en_attente_de_reglement = FactureCompagnie.objects.filter(\n            bureau=bureau,\n            statut=StatutFacture.NON_SOLDE",
        "detail": "src.comptabilite.views",
        "documentation": {}
    },
    {
        "label": "get_garant_selectionne_data",
        "kind": 2,
        "importPath": "src.comptabilite.views",
        "description": "src.comptabilite.views",
        "peekOfCode": "def get_garant_selectionne_data(request, compagnie_id):\n    # Vue appelée via AJAX\n    if request.headers.get('X-Requested-With') == 'XMLHttpRequest':\n        bureau = request.user.bureau\n        compagnie = Compagnie.objects.get(id=compagnie_id)\n        # total_garant_a_refacturer = BordereauOrdonnancement.objects.filter( #methode 2\n        total_garant_a_refacturer_global = Sinistre.objects.filter(\n            prestataire__bureau=request.user.bureau,\n            statut_paiement=StatutPaiementSinistre.PAYE,\n            statut_validite=StatutValidite.VALIDE,",
        "detail": "src.comptabilite.views",
        "documentation": {}
    },
    {
        "label": "obtenir_montant_sinistre",
        "kind": 2,
        "importPath": "src.comptabilite.views",
        "description": "src.comptabilite.views",
        "peekOfCode": "def obtenir_montant_sinistre(request):\n    if request.method == 'GET' and 'sinistre_id' in request.GET:\n        sinistre_id = request.GET.get('sinistre_id')\n        try:\n            sinistre = Sinistre.objects.get(id=sinistre_id)\n            montant_total = int(sinistre.montant_remb_accepte)\n            return JsonResponse({'montant_total': montant_total})\n        except Sinistre.DoesNotExist:\n            return JsonResponse({'error': 'Le sinistre spécifiée n\\'existe pas.'}, status=404)\n    else:",
        "detail": "src.comptabilite.views",
        "documentation": {}
    },
    {
        "label": "facture_compagnie_datatable",
        "kind": 2,
        "importPath": "src.comptabilite.views",
        "description": "src.comptabilite.views",
        "peekOfCode": "def facture_compagnie_datatable(request):\n    items_per_page = int(request.GET.get('length', 10))\n    page_number = int(request.GET.get('start', 0)) // items_per_page + 1\n    sort_column_index = int(request.GET.get('order[0][column]', 0))\n    sort_direction = request.GET.get('order[0][dir]', 'asc')\n    search_numero = request.GET.get('search_numero', '').strip()\n    search_compagnie = request.GET.get('search_compagnie', '').strip()\n    search_date_debut = request.GET.get('search_date_debut', '').strip()\n    search_date_fin = request.GET.get('search_date_fin', '').strip()\n    filter_status = request.GET.get('filter_status', '').strip()",
        "detail": "src.comptabilite.views",
        "documentation": {}
    },
    {
        "label": "fetch_factures",
        "kind": 2,
        "importPath": "src.comptabilite.views",
        "description": "src.comptabilite.views",
        "peekOfCode": "def fetch_factures(request):\n    bureau = request.user.bureau\n    compagnie_id = request.GET.get('compagnie_id', None)\n    if compagnie_id is not None:\n        # Récupérer les factures pour la compagnie spécifiée\n        factures = FactureCompagnie.par_bureau(bureau).filter(compagnie_id=compagnie_id).values('numero', 'compagnie', 'montant_total', 'montant_regle', 'montant_restant')\n        # Convertir en liste de dictionnaires pour la réponse JSON\n        factures_list = list(factures)\n        return JsonResponse(factures_list, safe=False)\n    return JsonResponse([], safe=False)",
        "detail": "src.comptabilite.views",
        "documentation": {}
    },
    {
        "label": "reglement_facture_garant_simple",
        "kind": 2,
        "importPath": "src.comptabilite.views",
        "description": "src.comptabilite.views",
        "peekOfCode": "def reglement_facture_garant_simple(request, facture_id):\n    facture = FactureCompagnie.objects.get(id=facture_id)\n    with transaction.atomic():\n        if request.method == 'POST':\n            facture_compagnie = FactureCompagnie.objects.get(id=facture_id)\n            date_reglement = request.POST.get('date_reglement')\n            mode_reglement = ModeReglement.objects.get(id=request.POST.get('mode_reglement_id'))\n            banque_emettrice = request.POST.get('banque_id')\n            # banque = Banque.objects.get(id=request.POST.get('banque_id'))\n            numero_piece = request.POST.get('numero_piece')",
        "detail": "src.comptabilite.views",
        "documentation": {}
    },
    {
        "label": "annulation_facture_simple",
        "kind": 2,
        "importPath": "src.comptabilite.views",
        "description": "src.comptabilite.views",
        "peekOfCode": "def annulation_facture_simple(request, facture_id):\n    bureau = request.user.bureau\n    with transaction.atomic():\n        if request.method == \"POST\":\n            observation = \"facture annulé dépuis d'interface par \" + request.user.first_name + request.user.last_name\n            facture_compagnie = FactureCompagnie.objects.get(id=facture_id)\n            sinistres = Sinistre.objects.filter(facture_compagnie=facture_compagnie)\n            # Set facture compagnie = Null\n            for sinistre in sinistres:\n                        sinistre.facture_compagnie = None",
        "detail": "src.comptabilite.views",
        "documentation": {}
    },
    {
        "label": "regenerateFactureGarantpdf",
        "kind": 2,
        "importPath": "src.comptabilite.views",
        "description": "src.comptabilite.views",
        "peekOfCode": "def regenerateFactureGarantpdf(request, facture_id):\n    if request.method == \"POST\":\n        # Récupérer l'instance de FactureCompagnie\n        try:\n            facture_compagnie = FactureCompagnie.objects.get(id=facture_id)\n        except FactureCompagnie.DoesNotExist:\n            return JsonResponse({\n                'statut': 0,\n                'message': 'Facture non trouvée',\n                'status': 404",
        "detail": "src.comptabilite.views",
        "documentation": {}
    },
    {
        "label": "suivi_treso_datatable",
        "kind": 2,
        "importPath": "src.comptabilite.views",
        "description": "src.comptabilite.views",
        "peekOfCode": "def suivi_treso_datatable(request):\n    bureau = request.user.bureau\n    # Récupération des paramètres de recherche et de pagination\n    search_value = request.GET.get('search[value]', '')\n    start = int(request.GET.get('start', 0))\n    length = int(request.GET.get('length', 100))\n    #dd(bureau)\n    treso = []\n    garants = Compagnie.par_bureau(bureau=bureau)\n    for compagnie in garants:",
        "detail": "src.comptabilite.views",
        "documentation": {}
    },
    {
        "label": "datatable_facture_compagnie_specifique",
        "kind": 2,
        "importPath": "src.comptabilite.views",
        "description": "src.comptabilite.views",
        "peekOfCode": "def datatable_facture_compagnie_specifique(request):\n    items_per_page = int(request.GET.get('length', 10))\n    page_number = int(request.GET.get('start', 0)) // items_per_page + 1\n    sort_column_index = int(request.GET.get('order[0][column]', 0))\n    sort_direction = request.GET.get('order[0][dir]', 'asc')\n    compagnie_id = request.GET.get('compagnie_id', '').strip()\n    search_numero = request.GET.get('search_numero', '').strip()\n    search_compagnie = request.GET.get('search_compagnie', '').strip()\n    search_date_debut = request.GET.get('search_date_debut', '').strip()\n    search_date_fin = request.GET.get('search_date_fin', '').strip()",
        "detail": "src.comptabilite.views",
        "documentation": {}
    },
    {
        "label": "export_bordereaux_ordonnances_paye",
        "kind": 2,
        "importPath": "src.comptabilite.views",
        "description": "src.comptabilite.views",
        "peekOfCode": "def export_bordereaux_ordonnances_paye(request):\n    try:\n        # Retrieve the BordereauOrdonnancement instances with statut_paiement = 'PAYE'\n        queryset = BordereauOrdonnancement.objects.filter(\n            bureau=request.user.bureau,\n            statut_paiement=StatutPaiementSinistre.PAYE,  # Use the choice constant\n        ).order_by('-id')\n        # Create an Excel response\n        response = HttpResponse(content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')\n        response['Content-Disposition'] = 'attachment; filename=\"LISTE_DES_BORDEREAUX_PAYES.xlsx\"'",
        "detail": "src.comptabilite.views",
        "documentation": {}
    },
    {
        "label": "bordereaux_payes_datatable",
        "kind": 2,
        "importPath": "src.comptabilite.views",
        "description": "src.comptabilite.views",
        "peekOfCode": "def bordereaux_payes_datatable(request):\n    items_per_page = 10\n    page_number = request.GET.get('page')\n    start = int(request.GET.get('start', 0))\n    length = int(request.GET.get('length', items_per_page))\n    sort_column_index = int(request.GET.get('order[0][column]'))\n    sort_direction = request.GET.get('order[0][dir]')\n    search_numero_bordereau = request.GET.get('search_numero_bordereau', '')\n    search_periode_comptable = request.GET.get('search_periode_comptable', '')\n    search_prestataire = request.GET.get('search_prestataire', '')",
        "detail": "src.comptabilite.views",
        "documentation": {}
    },
    {
        "label": "regenerate_bordereau_pdf",
        "kind": 2,
        "importPath": "src.comptabilite.views",
        "description": "src.comptabilite.views",
        "peekOfCode": "def regenerate_bordereau_pdf(request, paiement_comptable_id):\n    # Fetch the PaiementComptable instance\n    paiement_comptable = get_object_or_404(PaiementComptable, id=paiement_comptable_id)\n    # Retrieve the associated BordereauOrdonnancement\n    bordereau = paiement_comptable.bordereau_ordonnancement\n    # Retrieve all sinistres associated with the bordereau\n    liste_sinistres = Sinistre.objects.filter(bordereau_ordonnancement=bordereau, statut_validite=StatutValidite.VALIDE)\n    # Get unique compagnies concerned by the sinistres\n    liste_garant_concernes_ids = liste_sinistres.values_list('compagnie', flat=True).distinct()\n    liste_garant_concernes = Compagnie.objects.filter(id__in=liste_garant_concernes_ids)",
        "detail": "src.comptabilite.views",
        "documentation": {}
    },
    {
        "label": "paiements_comptables_datatable",
        "kind": 2,
        "importPath": "src.comptabilite.views",
        "description": "src.comptabilite.views",
        "peekOfCode": "def paiements_comptables_datatable(request):\n    items_per_page = 10\n    page_number = request.GET.get('page')\n    start = int(request.GET.get('start', 0))\n    length = int(request.GET.get('length', items_per_page))\n    sort_column_index = int(request.GET.get('order[0][column]'))\n    sort_direction = request.GET.get('order[0][dir]')\n    search_numero_paiement_comptable = request.GET.get('search_numero_paiement_comptable', '')\n    search_numero_bordereau_ord = request.GET.get('search_numero_bordereau_ord', '')\n    search_periode_comptable = request.GET.get('search_periode_comptable', '')",
        "detail": "src.comptabilite.views",
        "documentation": {}
    },
    {
        "label": "export_paiements_comptables",
        "kind": 2,
        "importPath": "src.comptabilite.views",
        "description": "src.comptabilite.views",
        "peekOfCode": "def export_paiements_comptables(request):\n    if request.method == 'POST':\n        # Récupérer les paramètres de filtre\n        search_numero_paiement_comptable = request.POST.get('search_numero_paiement_comptable', '')\n        search_numero_bordereau_ord = request.POST.get('search_numero_bordereau_ord', '')\n        search_periode_comptable = request.POST.get('search_periode_comptable', '')\n        search_type_remboursement = request.POST.get('search_type_remboursement', '')\n        search_prestataire = request.POST.get('search_prestataire', '')\n        search_adherent_principal = request.POST.get('search_adherent_principal', '')\n        # Filtrer les données selon les paramètres",
        "detail": "src.comptabilite.views",
        "documentation": {}
    },
    {
        "label": "generer_bordereau_reglement_ordonnancement_pdf",
        "kind": 2,
        "importPath": "src.comptabilite.views",
        "description": "src.comptabilite.views",
        "peekOfCode": "def generer_bordereau_reglement_ordonnancement_pdf(request, operation_id):\n    operation = Operation.objects.get(id=operation_id)\n    reglements = OperationReglement.objects.filter(operation=operation)\n    pdf = render_pdf('courriers/bordereau_reglement_compagnie.html', {'operation': operation, 'reglements': reglements})\n    pdf_file = PyPDF2.PdfReader(pdf)\n    nombre_pages = len(pdf_file.pages)\n    contexte = {\n        'operation': operation,\n    }\n    pdf = render_pdf('courriers/bordereau_reglement_compagnie.html', contexte)",
        "detail": "src.comptabilite.views",
        "documentation": {}
    },
    {
        "label": "detail_bordereau_ordonnancement_datatable",
        "kind": 2,
        "importPath": "src.comptabilite.views",
        "description": "src.comptabilite.views",
        "peekOfCode": "def detail_bordereau_ordonnancement_datatable(request, bordereau_id):\n    items_per_page = 10\n    page_number = request.GET.get('page')\n    # start = int(request.GET.get('start', 0))\n    length = int(request.GET.get('length', items_per_page))\n    # sort_column_index = int(request.GET.get('order[0][column]'))\n    # sort_direction = request.GET.get('order[0][dir]')\n    search_numero_bordereau = request.GET.get('search_numero_bordereau', '')\n    search_numero_sinistre = request.GET.get('search_numero_sinistre', '')\n    search_prestataire = request.GET.get('search_prestataire', '')",
        "detail": "src.comptabilite.views",
        "documentation": {}
    },
    {
        "label": "calculer_montant_accepte_total",
        "kind": 2,
        "importPath": "src.comptabilite.views",
        "description": "src.comptabilite.views",
        "peekOfCode": "def calculer_montant_accepte_total(garant_id, bordereau_id):\n    bordereau = BordereauOrdonnance.objects.get(id=bordereau_id)\n    query_params = {'bordereau_ordonnancement': bordereau}\n    if garant_id:\n        query_params['compagnie'] = Compagnie.objects.get(id=garant_id)\n    liste_sinistres_bordereau = Sinistre.objects.filter(**query_params)\n    montant_accepte_total = sum(item.montant_remb_accepte for item in liste_sinistres_bordereau)\n    if not garant_id:\n        montant_accepte_total = bordereau.montant_total_impaye\n    # Formatage du montant_accepte_total avec 0 décimales",
        "detail": "src.comptabilite.views",
        "documentation": {}
    },
    {
        "label": "update_montant_accepte_total",
        "kind": 2,
        "importPath": "src.comptabilite.views",
        "description": "src.comptabilite.views",
        "peekOfCode": "def update_montant_accepte_total(request):\n    garant_id = request.GET.get('garant_id')\n    bordereau_id = request.GET.get('bordereau_id')\n    # Effectuez le traitement nécessaire pour récupérer le montant_accepte_total en fonction des variables\n    # Dans cet exemple, je suppose que vous avez une méthode ou une logique pour calculer le montant_accepte_total\n    montant_accepte_total = calculer_montant_accepte_total(garant_id, bordereau_id)\n    # Renvoyez la réponse JSON\n    return JsonResponse({'montant_accepte_total': montant_accepte_total})\ndef add_mise_en_reglement_ordonnancement(request):\n    if request.method == 'POST':",
        "detail": "src.comptabilite.views",
        "documentation": {}
    },
    {
        "label": "add_mise_en_reglement_ordonnancement",
        "kind": 2,
        "importPath": "src.comptabilite.views",
        "description": "src.comptabilite.views",
        "peekOfCode": "def add_mise_en_reglement_ordonnancement(request):\n    if request.method == 'POST':\n        devise = request.POST.get('devise')\n        mode_reglement = request.POST.get('mode_reglement')\n        compte_tresorerie = request.POST.get('compte_tresorerie')\n        nature_operation_code = \"REGSIN\"\n        nature_operation = NatureOperation.objects.filter(code=nature_operation_code).first()\n        #enregistrer les infos dans operation\n        nombre_quittances = 0\n        montant_total_regle = 0",
        "detail": "src.comptabilite.views",
        "documentation": {}
    },
    {
        "label": "add_mise_en_reglement_ordonnancement_par_garant",
        "kind": 2,
        "importPath": "src.comptabilite.views",
        "description": "src.comptabilite.views",
        "peekOfCode": "def add_mise_en_reglement_ordonnancement_par_garant(request):\n    with transaction.atomic():\n        if request.method == 'POST':\n            compagnie_id = request.POST.get('compagnie_id', '')\n            code_mode_de_reglement = request.POST.get('garant_moyens_paiement_id', '')\n            numero_piece = request.POST.get('numero_piece', '')\n            ordre_de = request.POST.get('ordre_de', '')\n            iban = request.POST.get('iban', '')\n            date_de_paiement = request.POST.get('date_paiement', '')\n            numero_bordereau = request.POST.get('numero', '')",
        "detail": "src.comptabilite.views",
        "documentation": {}
    },
    {
        "label": "genreate_bordereau_reglement_par_garant",
        "kind": 2,
        "importPath": "src.comptabilite.views",
        "description": "src.comptabilite.views",
        "peekOfCode": "def genreate_bordereau_reglement_par_garant(request, bordereau_id, compagnie_id):\n    mode_reglement_id = request.POST.get('garant_moyens_paiement_id', '')\n    numero_piece = request.POST.get('numero_piece', '')\n    ordre_de = request.POST.get('ordre_de', '')\n    numero_iban = request.POST.get('iban', '')\n    date_paiement = request.POST.get('date_paiement', '')\n    numero_bordereau = request.POST.get('numero', '')\n    montant_a_regler = request.POST.get('montant_a_regler', '').replace(\" \", \"\")\n    sinistres_par_garants = []\n    bordereau = BordereauOrdonnance.objects.get(id=bordereau_id)",
        "detail": "src.comptabilite.views",
        "documentation": {}
    },
    {
        "label": "genreate_bordereau_reglement_assure_par_garant",
        "kind": 2,
        "importPath": "src.comptabilite.views",
        "description": "src.comptabilite.views",
        "peekOfCode": "def genreate_bordereau_reglement_assure_par_garant(request, bordereau_id, assure_id, compagnie_id):\n    mode_reglement_id = request.POST.get('garant_moyens_paiement_id', '')\n    numero_piece = request.POST.get('numero_piece', '')\n    ordre_de = request.POST.get('ordre_de', '')\n    numero_iban = request.POST.get('iban', '')\n    date_paiement = request.POST.get('date_paiement', '')\n    numero_bordereau = request.POST.get('numero', '')\n    montant_a_regler = request.POST.get('montant_a_regler', '').replace(\" \", \"\")\n    sinistres_par_garants = []\n    bordereau = BordereauOrdonnance.objects.get(id=bordereau_id)",
        "detail": "src.comptabilite.views",
        "documentation": {}
    },
    {
        "label": "generer_bordereau_reglement_ordonnancement_par_garant_pdf",
        "kind": 2,
        "importPath": "src.comptabilite.views",
        "description": "src.comptabilite.views",
        "peekOfCode": "def generer_bordereau_reglement_ordonnancement_par_garant_pdf(request, operation_id):\n    operation = Operation.objects.get(id=operation_id)\n    reglements = OperationReglement.objects.filter(operation=operation)\n    pdf = render_pdf('courriers/bordereau_reglement_compagnie.html', {'operation': operation, 'reglements': reglements})\n    pdf_file = PyPDF2.PdfReader(pdf)\n    nombre_pages = len(pdf_file.pages)\n    contexte = {\n        'operation': operation,\n    }\n    pdf = render_pdf('courriers/bordereau_reglement_compagnie.html', contexte)",
        "detail": "src.comptabilite.views",
        "documentation": {}
    },
    {
        "label": "bordereau_ordonnancement_pdf",
        "kind": 2,
        "importPath": "src.comptabilite.views",
        "description": "src.comptabilite.views",
        "peekOfCode": "def bordereau_ordonnancement_pdf(request):\n    bordereau = BordereauOrdonnancement.objects.get(id=15747)\n    compagnie_id = None\n    pdf = genreate_bordereau_reglement_assure_par_garant(request, bordereau.id, bordereau.assure.id, compagnie_id)\n    return JsonResponse(\n        {'statut': 1, 'message': 'Bordereau de paiement généré avec succèss',\n         'pdf': pdf.url}, status=200)\n@method_decorator(login_required, name=\"dispatch\")\nclass PaiementsRealises(TemplateView):\n    template_name = 'comptabilite/paiements-realises.html'",
        "detail": "src.comptabilite.views",
        "documentation": {}
    },
    {
        "label": "edition_lettre_cheque_datatable",
        "kind": 2,
        "importPath": "src.comptabilite.views",
        "description": "src.comptabilite.views",
        "peekOfCode": "def edition_lettre_cheque_datatable(request):\n    items_per_page = 10\n    page_number = request.GET.get('page')\n    start = int(request.GET.get('start', 0))\n    length = int(request.GET.get('length', items_per_page))\n    sort_column_index = int(request.GET.get('order[0][column]'))\n    sort_direction = request.GET.get('order[0][dir]')\n    search_numero_paiement_comptable = request.GET.get('search_numero_paiement_comptable', '')\n    search_numero_bordereau_ord = request.GET.get('search_numero_bordereau_ord', '')\n    search_periode_comptable = request.GET.get('search_periode_comptable', '')",
        "detail": "src.comptabilite.views",
        "documentation": {}
    },
    {
        "label": "submit_edition_lettre_cheque",
        "kind": 2,
        "importPath": "src.comptabilite.views",
        "description": "src.comptabilite.views",
        "peekOfCode": "def submit_edition_lettre_cheque(request):\n    # TODO : CODE_PAYS_YY_MM\n    # try:\n    with transaction.atomic():\n        # print(\"periode \" + request.POST.get('periode_id'))\n        # print(\"search adh \" + request.POST.get('search_adh'))\n        # print(\"prestataire \" + request.POST.get('prestataire_id'))\n        # print(\"selectedItems\" + request.POST.get('selectedItems'))\n        # pprint(\"ADH ID\")\n        # print(request.POST.get('search_adh'))",
        "detail": "src.comptabilite.views",
        "documentation": {}
    },
    {
        "label": "edition_lettre_cheque_pdf",
        "kind": 2,
        "importPath": "src.comptabilite.views",
        "description": "src.comptabilite.views",
        "peekOfCode": "def edition_lettre_cheque_pdf(request):\n    paiements = PaiementComptable.objects.filter(bureau=request.user.bureau, mode_reglement_id=5)[:2]\n    contexte = {\n        'paiements': paiements,\n        'date_edition': timezone.now().strftime(\"%d/%m/%Y\")\n    }\n    pdf = render_pdf('courriers/lettre_cheque/sn_cboa_model.html', contexte)\n    # Update bordereau data and save\n    #paiement.fichier.save(f'lettre_cheque_{paiement.numero}.pdf', File(pdf))\n    #paiement.save()",
        "detail": "src.comptabilite.views",
        "documentation": {}
    },
    {
        "label": "ajax_reglements_a_reverser_compagnie",
        "kind": 2,
        "importPath": "src.comptabilite.views",
        "description": "src.comptabilite.views",
        "peekOfCode": "def ajax_reglements_a_reverser_compagnie(request, compagnie_id):\n    polices = Police.objects.filter(compagnie_id=compagnie_id)\n    reglements_compagnies = ReglementReverseCompagnie.objects.filter(quittance__police__in=polices, statut_reversement_compagnie=StatutReversementCompagnie.NON_REVERSE, statut_validite=StatutValidite.VALIDE).exclude(quittance__nature_quittance__code=\"Ristourne\").exclude(quittance__type_quittance__code=\"HONORAIRE\")\n    pprint(polices)\n    return render(request, 'reglements_a_reverser_by_compagnie.html', {'reglements_compagnies':reglements_compagnies})\n@login_required\ndef add_reglement_compagnie(request):\n    if request.method == 'POST':\n        devise = request.POST.get('devise')\n        mode_reglement = request.POST.get('mode_reglement')",
        "detail": "src.comptabilite.views",
        "documentation": {}
    },
    {
        "label": "add_reglement_compagnie",
        "kind": 2,
        "importPath": "src.comptabilite.views",
        "description": "src.comptabilite.views",
        "peekOfCode": "def add_reglement_compagnie(request):\n    if request.method == 'POST':\n        devise = request.POST.get('devise')\n        mode_reglement = request.POST.get('mode_reglement')\n        compte_tresorerie = request.POST.get('compte_tresorerie')\n        banque = request.POST.get('banque')\n        numero_piece = request.POST.get('numero_piece')\n        date_paiement = request.POST.get('date_paiement')\n        reglement = request.POST.getlist('reglement')\n        reglements_selectionnes = request.POST.getlist('reglement_selectionne')",
        "detail": "src.comptabilite.views",
        "documentation": {}
    },
    {
        "label": "generer_bordereau_reglement_compagnie_pdf",
        "kind": 2,
        "importPath": "src.comptabilite.views",
        "description": "src.comptabilite.views",
        "peekOfCode": "def generer_bordereau_reglement_compagnie_pdf(request, operation_id):\n    operation = Operation.objects.get(id=operation_id)\n    option_reglements = OperationReglement.objects.filter(operation=operation)\n    compagnie = option_reglements.first().reglement.quittance.compagnie if option_reglements.first() and option_reglements.first().reglement and option_reglements.first().reglement.quittance else None\n    bureau = option_reglements.first().reglement.bureau if option_reglements.first() and option_reglements.first().reglement else None\n    # dd(option_reglements.first())\n    total_montant_compagnie = 0\n    total_montant_com_courtage = 0\n    total_montant_com_gestion = 0\n    total_montant_com_intermediaire = 0",
        "detail": "src.comptabilite.views",
        "documentation": {}
    },
    {
        "label": "ajax_encaissement_commissions",
        "kind": 2,
        "importPath": "src.comptabilite.views",
        "description": "src.comptabilite.views",
        "peekOfCode": "def ajax_encaissement_commissions(request, compagnie_id):\n    polices = Police.objects.filter(compagnie_id=compagnie_id)\n    reglements_compagnies = ReglementReverseCompagnie.objects.filter(quittance__police__in=polices, statut_reversement_compagnie=StatutReversementCompagnie.NON_REVERSE, statut_validite=StatutValidite.VALIDE)\n    return render(request, 'reglements_a_reverser_by_compagnie.html', {'reglements_compagnies':reglements_compagnies})\n@login_required\ndef ajax_reglements_reverses(request, compagnie_id):\n    polices = Police.objects.filter(compagnie_id=compagnie_id)\n    reglements_compagnies = ReglementReverseCompagnie.objects.filter(quittance__police__in=polices, statut_reversement_compagnie=StatutReversementCompagnie.REVERSE, statut_validite=StatutValidite.VALIDE).exclude(statut_commission=StatutEncaissementCommission.ENCAISSEE)\n    pprint(reglements_compagnies)\n    return render(request, 'reglements_reverses.html', {'reglements_compagnies':reglements_compagnies})",
        "detail": "src.comptabilite.views",
        "documentation": {}
    },
    {
        "label": "ajax_reglements_reverses",
        "kind": 2,
        "importPath": "src.comptabilite.views",
        "description": "src.comptabilite.views",
        "peekOfCode": "def ajax_reglements_reverses(request, compagnie_id):\n    polices = Police.objects.filter(compagnie_id=compagnie_id)\n    reglements_compagnies = ReglementReverseCompagnie.objects.filter(quittance__police__in=polices, statut_reversement_compagnie=StatutReversementCompagnie.REVERSE, statut_validite=StatutValidite.VALIDE).exclude(statut_commission=StatutEncaissementCommission.ENCAISSEE)\n    pprint(reglements_compagnies)\n    return render(request, 'reglements_reverses.html', {'reglements_compagnies':reglements_compagnies})\n@login_required\ndef add_encaissement_commission(request):\n    if request.method == 'POST':\n        # dd(request)\n        devise = request.POST.get('devise')",
        "detail": "src.comptabilite.views",
        "documentation": {}
    },
    {
        "label": "add_encaissement_commission",
        "kind": 2,
        "importPath": "src.comptabilite.views",
        "description": "src.comptabilite.views",
        "peekOfCode": "def add_encaissement_commission(request):\n    if request.method == 'POST':\n        # dd(request)\n        devise = request.POST.get('devise')\n        mode_reglement = request.POST.get('mode_reglement')\n        compte_tresorerie = request.POST.get('compte_tresorerie')\n        #banque_id = request.POST.get('banque')\n        banque_emettrice = request.POST.get('banque_emettrice')\n        numero_piece = request.POST.get('numero_piece')\n        date_paiement = request.POST.get('date_paiement')",
        "detail": "src.comptabilite.views",
        "documentation": {}
    },
    {
        "label": "ajax_reglements_reverses_court_gest",
        "kind": 2,
        "importPath": "src.comptabilite.views",
        "description": "src.comptabilite.views",
        "peekOfCode": "def ajax_reglements_reverses_court_gest(request, compagnie_id, type):\n    polices = Police.objects.filter(compagnie_id=compagnie_id)\n    reglements_compagnies = ReglementReverseCompagnie.objects.filter(quittance__police__in=polices, statut_reversement_compagnie=StatutReversementCompagnie.REVERSE, statut_validite=StatutValidite.VALIDE).exclude(statut_commission=StatutEncaissementCommission.ENCAISSEE)\n    for reglement_compagnie in reglements_compagnies:\n        #dd(reglement_compagnie)\n        #reglements_compagnies.exclude(id=reglement_compagnie.id)\n        #print(f\"view 1 - {reglement_compagnie.montant_com_courtage_solde()}\")\n        #print(f\"view 2 - {reglement_compagnie.montant_journal_debit() - reglement_compagnie.montant_journal_credit()}\")\n        if type == \"courtage\":\n            if reglement_compagnie.montant_com_courtage_solde() != 0 and reglement_compagnie.montant_com_courtage_solde() != (reglement_compagnie.montant_journal_debit_courtage() - reglement_compagnie.montant_journal_credit_courtage()):",
        "detail": "src.comptabilite.views",
        "documentation": {}
    },
    {
        "label": "add_encaissement_com_court_gest",
        "kind": 2,
        "importPath": "src.comptabilite.views",
        "description": "src.comptabilite.views",
        "peekOfCode": "def add_encaissement_com_court_gest(request, type):\n    if request.method == 'POST':\n        # dd(request)\n        devise = request.POST.get('devise')\n        mode_reglement = request.POST.get('mode_reglement')\n        compte_tresorerie = request.POST.get('compte_tresorerie')\n        #banque_id = request.POST.get('banque')\n        banque_emettrice = request.POST.get('banque_emettrice')\n        numero_piece = request.POST.get('numero_piece')\n        date_paiement = request.POST.get('date_paiement')",
        "detail": "src.comptabilite.views",
        "documentation": {}
    },
    {
        "label": "generer_bordereau_encaissement_compagnie_pdf",
        "kind": 2,
        "importPath": "src.comptabilite.views",
        "description": "src.comptabilite.views",
        "peekOfCode": "def generer_bordereau_encaissement_compagnie_pdf(request, operation_id):\n    operation = Operation.objects.get(id=operation_id)\n    encaissement_commissions = EncaissementCommission.objects.filter(operation=operation)\n    compagnie = encaissement_commissions.first().reglement.quittance.compagnie if encaissement_commissions.first() and encaissement_commissions.first().reglement and encaissement_commissions.first().reglement.quittance else None\n    bureau = encaissement_commissions.first().reglement.bureau if encaissement_commissions.first() and encaissement_commissions.first().reglement else None\n    # dd(option_reglements.first())\n    total_montant_compagnie = 0\n    total_montant_com_courtage = 0\n    total_montant_com_gestion = 0\n    total_montant_com_intermediaire = 0",
        "detail": "src.comptabilite.views",
        "documentation": {}
    },
    {
        "label": "get_montant_caution",
        "kind": 2,
        "importPath": "src.comptabilite.views",
        "description": "src.comptabilite.views",
        "peekOfCode": "def get_montant_caution(bureau, compagnie=None):\n    queryset = Caution.par_bureau(bureau).filter(date_fin_effet__isnull=True, status=True)\n    if compagnie:\n       queryset = queryset.filter(compagnie=compagnie)\n    mcaution = queryset.aggregate(mcaution=Sum('montant'))['mcaution'] or 0\n    return mcaution\n    # return queryset.annotate(\n    #     montant_caution=Sum('montant'),\n    #     created_at_caution=Min('caution__created_at')\n    # )",
        "detail": "src.comptabilite.views",
        "documentation": {}
    },
    {
        "label": "get_montant_sinistre_regle",
        "kind": 2,
        "importPath": "src.comptabilite.views",
        "description": "src.comptabilite.views",
        "peekOfCode": "def get_montant_sinistre_regle(bureau, compagnie=None, month=None):\n    queryset = Sinistre.objects.filter(\n        prestataire__bureau=bureau,\n        statut_paiement=StatutPaiementSinistre.PAYE,\n        statut_validite=StatutValidite.VALIDE,\n        dossier_sinistre_id__isnull=False,\n        facture_compagnie_id__isnull=True,\n    )\n    if month:\n        queryset = queryset.filter(date_paiement__month=month)",
        "detail": "src.comptabilite.views",
        "documentation": {}
    },
    {
        "label": "get_montant_sinistre_reclame",
        "kind": 2,
        "importPath": "src.comptabilite.views",
        "description": "src.comptabilite.views",
        "peekOfCode": "def get_montant_sinistre_reclame(bureau, compagnie=None):\n    queryset = FactureCompagnie.par_bureau(bureau)\n    if compagnie:\n        queryset = queryset.filter(compagnie=compagnie)\n    return queryset.aggregate(total_restant=Sum('montant_restant'))['total_restant'] or 0\ndef prepare_camembert_data(bureau, compagnie=None):\n    # Preparer les données pour le camembert\n    label_global_fdr = \"FDR\"\n    valeur_global_fdr = get_montant_caution(bureau, compagnie)\n    couleur_global_fdr = \"#B7482B\"",
        "detail": "src.comptabilite.views",
        "documentation": {}
    },
    {
        "label": "prepare_camembert_data",
        "kind": 2,
        "importPath": "src.comptabilite.views",
        "description": "src.comptabilite.views",
        "peekOfCode": "def prepare_camembert_data(bureau, compagnie=None):\n    # Preparer les données pour le camembert\n    label_global_fdr = \"FDR\"\n    valeur_global_fdr = get_montant_caution(bureau, compagnie)\n    couleur_global_fdr = \"#B7482B\"\n    stroke_couleur_global_fdr = \"#B7482B\"\n    label_global_sinistre_regle = \"Sinistres réglés\"\n    valeur_global_sinistre_regle = int(get_montant_sinistre_regle(bureau=bureau, compagnie=compagnie))\n    couleur_global_sinistre_regle = \"#B8B8B8\"\n    stroke_couleur_global_sinistre_regle = \"#B8B8B8\"",
        "detail": "src.comptabilite.views",
        "documentation": {}
    },
    {
        "label": "get_camembert_data_detail_par_garant",
        "kind": 2,
        "importPath": "src.comptabilite.views",
        "description": "src.comptabilite.views",
        "peekOfCode": "def get_camembert_data_detail_par_garant(request, compagnie_id):\n    compagnie_id = compagnie_id\n    compagnie = Compagnie.objects.get(id=compagnie_id)\n    bureau = compagnie.bureau if compagnie else None;\n    data = prepare_camembert_data(bureau, compagnie)\n    pie_data = [\n        {\n            \"label\": data[\"label_global_fdr\"],\n            \"value\": data[\"valeur_global_fdr\"],\n            \"color\": data[\"couleur_global_fdr\"]",
        "detail": "src.comptabilite.views",
        "documentation": {}
    },
    {
        "label": "get_sum_fdr_per_month",
        "kind": 2,
        "importPath": "src.comptabilite.views",
        "description": "src.comptabilite.views",
        "peekOfCode": "def get_sum_fdr_per_month(bureau, month, compagnie=None):\n    queryset = Caution.par_bureau(bureau).filter(date_fin_effet__isnull=True, status=True)\n    if compagnie:\n        queryset = queryset.filter(compagnie=compagnie)\n    total_montant = queryset.filter(\n        created_at__month=month,\n        # created_at__year=year\n    ).aggregate(\n        total_montant=Sum('montant')\n    )['total_montant']",
        "detail": "src.comptabilite.views",
        "documentation": {}
    },
    {
        "label": "get_consumption_per_month",
        "kind": 2,
        "importPath": "src.comptabilite.views",
        "description": "src.comptabilite.views",
        "peekOfCode": "def get_consumption_per_month(bureau, month, compagnie=None):\n    queryset_sinistres_reclames_non_regles = FactureCompagnie.par_bureau(bureau)\n    queryset_sinistres_regles = Sinistre.par_bureau(bureau)\n    if compagnie:\n        queryset_sinistres_reclames_non_regles = queryset_sinistres_reclames_non_regles.filter(compagnie=compagnie)\n        queryset_sinistres_regles = queryset_sinistres_regles.filter(compagnie=compagnie)\n    # sinistres a refacturer\n    sinistre_regles = queryset_sinistres_regles.filter(\n                date_paiement__month=month,\n                statut_paiement=StatutPaiementSinistre.PAYE,",
        "detail": "src.comptabilite.views",
        "documentation": {}
    },
    {
        "label": "get_treso_per_month",
        "kind": 2,
        "importPath": "src.comptabilite.views",
        "description": "src.comptabilite.views",
        "peekOfCode": "def get_treso_per_month(bureau, month, compagnie=None):\n    return 0\ndef prepare_chart_bar_data(bureau, compagnie=None):\n    current_month = datetime.datetime.now().month  # Mois courant (1 pour janvier, 12 pour décembre)\n    # Récupérer les données pour chaque mois\n    months = [calendar.month_name[i] for i in range(1, current_month + 1)]  # [\"January\", \"February\", ..., \"June\"]\n    # Convertir les mois en français si nécessaire (certaines configurations peuvent ne pas utiliser locale)\n    months_fr = [calendar.month_name[i].capitalize() for i in range(1, current_month + 1)]\n    sum_fdr_data = []\n    sum_consumption_data = []",
        "detail": "src.comptabilite.views",
        "documentation": {}
    },
    {
        "label": "prepare_chart_bar_data",
        "kind": 2,
        "importPath": "src.comptabilite.views",
        "description": "src.comptabilite.views",
        "peekOfCode": "def prepare_chart_bar_data(bureau, compagnie=None):\n    current_month = datetime.datetime.now().month  # Mois courant (1 pour janvier, 12 pour décembre)\n    # Récupérer les données pour chaque mois\n    months = [calendar.month_name[i] for i in range(1, current_month + 1)]  # [\"January\", \"February\", ..., \"June\"]\n    # Convertir les mois en français si nécessaire (certaines configurations peuvent ne pas utiliser locale)\n    months_fr = [calendar.month_name[i].capitalize() for i in range(1, current_month + 1)]\n    sum_fdr_data = []\n    sum_consumption_data = []\n    sum_tresorerie_data = []\n    for month in range(1, current_month + 1):",
        "detail": "src.comptabilite.views",
        "documentation": {}
    },
    {
        "label": "prepare_chart_line_data",
        "kind": 2,
        "importPath": "src.comptabilite.views",
        "description": "src.comptabilite.views",
        "peekOfCode": "def prepare_chart_line_data(bureau, compagnie=None):\n    sin_regles_data = []\n    current_month = datetime.datetime.now().month\n    # Récupérer les données pour chaque mois\n    months = [calendar.month_name[i] for i in range(1, current_month + 1)]\n    months_fr = [calendar.month_name[i].capitalize() for i in range(1, current_month + 1)]\n    for month in range(1, current_month + 1):\n        sini_regles = int(get_montant_sinistre_regle(bureau=bureau, compagnie=compagnie, month=month))\n        # sum_tresorerie = get_treso_per_month(bureau=bureau, month=month)\n        sin_regles_data.append(sini_regles)",
        "detail": "src.comptabilite.views",
        "documentation": {}
    },
    {
        "label": "ajax_reglements_apporteurs",
        "kind": 2,
        "importPath": "src.comptabilite.views",
        "description": "src.comptabilite.views",
        "peekOfCode": "def ajax_reglements_apporteurs(request, compagnie_id):\n    polices = Police.objects.filter(compagnie_id=compagnie_id)\n    reglements_compagnies = ReglementReverseCompagnie.objects.filter(quittance__police__in=polices, statut_reversement_compagnie=StatutReversementCompagnie.NON_REVERSE, statut_validite=StatutValidite.VALIDE)\n    return render(request, 'reglements_a_reverser_by_compagnie.html', {'reglements_compagnies':reglements_compagnies})\n@method_decorator(login_required, name='dispatch')\nclass ExecutionRequeteExcelComptaView(TemplateView):\n    template_name = 'comptabilite/execution_requete_excel_compta.html'\n    model = Sinistre\n    def get(self, request, *args, **kwargs):\n        #TODO , filtrer sur le bureau : prestataire__bureau=request.user.bureau",
        "detail": "src.comptabilite.views",
        "documentation": {}
    },
    {
        "label": "alert_consumption",
        "kind": 2,
        "importPath": "src.comptabilite.views",
        "description": "src.comptabilite.views",
        "peekOfCode": "def alert_consumption():\n    try:\n        bureaux = Bureau.objects.filter(mailinglist__statut=True).distinct()\n    except Exception as e:\n        print(f\"Erreur lors de la récupération des bureaux : {e}\")\n        return False\n    holding_mail = None\n    try:\n        holding_mail = MailingList.objects.filter(type_alerte=TypeAlerte.HOLDING).first()\n    except Exception as e:",
        "detail": "src.comptabilite.views",
        "documentation": {}
    },
    {
        "label": "create_periode_comptable",
        "kind": 2,
        "importPath": "src.comptabilite.views",
        "description": "src.comptabilite.views",
        "peekOfCode": "def create_periode_comptable(request):\n    locale.setlocale(locale.LC_TIME, 'fr_FR.UTF-8')\n    email = 'equipedev.os@inov.africa'\n    cron_name = \"CRÉATION DE LA PÉRIODE COMPTABLE\"\n    frequency = \" À 00:00 de chaque 1er jour du mois\"\n    state = \"En attente\"\n    message = \"\"\n    # Obtenir le mois et l'année actuels\n    now = timezone.now()\n    mois = now.month",
        "detail": "src.comptabilite.views",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "src.configurations.management.commands.load_background_request_task",
        "description": "src.configurations.management.commands.load_background_request_task",
        "peekOfCode": "class Command(BaseCommand):\n    help = 'Executer les requêtes en background.'\n    def handle(self, *args, **options):\n        tasks = BackgroundQueryTask.objects.filter(status=\"ENATT\").all()\n        print(\"task\")\n        print(tasks)\n        print(len(tasks))\n        send_dev_notification_background_task_mail(\"a.tissi@inov.africa\", f'Demarrage Executions requêtes en background {len(tasks)} taches en attente')\n        for task in tasks:\n            try:",
        "detail": "src.configurations.management.commands.load_background_request_task",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "src.configurations.management.commands.load_background_request_task_test",
        "description": "src.configurations.management.commands.load_background_request_task_test",
        "peekOfCode": "class Command(BaseCommand):\n    help = 'Executer les requêtes en background.'\n    def handle(self, *args, **options):\n        send_notification_background_task_mail('a.tissi@inov.africa', None)",
        "detail": "src.configurations.management.commands.load_background_request_task_test",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.configurations.migrations.0001_initial",
        "description": "src.configurations.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('auth', '0012_alter_user_first_name_max_length'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='User',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "src.configurations.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.configurations.migrations.0002_initial",
        "description": "src.configurations.migrations.0002_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('configurations', '0001_initial'),\n        ('auth', '0012_alter_user_first_name_max_length'),\n        ('production', '0001_initial'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='user',",
        "detail": "src.configurations.migrations.0002_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.configurations.migrations.0003_banque_nom_complet",
        "description": "src.configurations.migrations.0003_banque_nom_complet",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('configurations', '0002_initial'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='banque',\n            name='nom_complet',\n            field=models.TextField(blank=True, null=True),\n        ),",
        "detail": "src.configurations.migrations.0003_banque_nom_complet",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.configurations.migrations.0004_remove_apporteur_apporteur_international",
        "description": "src.configurations.migrations.0004_remove_apporteur_apporteur_international",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('configurations', '0003_banque_nom_complet'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='apporteur',\n            name='apporteur_international',\n        ),\n    ]",
        "detail": "src.configurations.migrations.0004_remove_apporteur_apporteur_international",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.configurations.migrations.0005_remove_paramproduitcompagnie_taux_com_gestion",
        "description": "src.configurations.migrations.0005_remove_paramproduitcompagnie_taux_com_gestion",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('configurations', '0004_remove_apporteur_apporteur_international'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='paramproduitcompagnie',\n            name='taux_com_gestion',\n        ),\n    ]",
        "detail": "src.configurations.migrations.0005_remove_paramproduitcompagnie_taux_com_gestion",
        "documentation": {}
    },
    {
        "label": "AdminGroupeBureauAdmInLine",
        "kind": 6,
        "importPath": "src.configurations.admin",
        "description": "src.configurations.admin",
        "peekOfCode": "class AdminGroupeBureauAdmInLine(admin.TabularInline):\n    model = AdminGroupeBureau\n    def formfield_for_foreignkey(self, db_field, request, **kwargs):\n        if db_field.name == \"bureau\":\n            kwargs[\"queryset\"] = Bureau.objects.filter(status=True)\n        return super().formfield_for_foreignkey(db_field, request, **kwargs)\nclass ActeWaspitoAdmin(admin.ModelAdmin):\n    list_display = ('libelle_fr', 'libelle_en', 'code_waspito','acte','cotation','prix','status')\n    list_per_page = 10\nclass TaxeInline(admin.TabularInline):",
        "detail": "src.configurations.admin",
        "documentation": {}
    },
    {
        "label": "ActeWaspitoAdmin",
        "kind": 6,
        "importPath": "src.configurations.admin",
        "description": "src.configurations.admin",
        "peekOfCode": "class ActeWaspitoAdmin(admin.ModelAdmin):\n    list_display = ('libelle_fr', 'libelle_en', 'code_waspito','acte','cotation','prix','status')\n    list_per_page = 10\nclass TaxeInline(admin.TabularInline):\n    model = BureauTaxe\n    extra = 1\nclass FonctionAdmin(admin.ModelAdmin):\n    list_display = ('libelle',)\n    search_fields = ('libelle',)\n    list_filter = ('libelle',)",
        "detail": "src.configurations.admin",
        "documentation": {}
    },
    {
        "label": "TaxeInline",
        "kind": 6,
        "importPath": "src.configurations.admin",
        "description": "src.configurations.admin",
        "peekOfCode": "class TaxeInline(admin.TabularInline):\n    model = BureauTaxe\n    extra = 1\nclass FonctionAdmin(admin.ModelAdmin):\n    list_display = ('libelle',)\n    search_fields = ('libelle',)\n    list_filter = ('libelle',)\n    list_per_page = 10\n#@admin.register(SinistreVeos)\nclass SinistreVeosAdmin(ImportExportModelAdmin):",
        "detail": "src.configurations.admin",
        "documentation": {}
    },
    {
        "label": "FonctionAdmin",
        "kind": 6,
        "importPath": "src.configurations.admin",
        "description": "src.configurations.admin",
        "peekOfCode": "class FonctionAdmin(admin.ModelAdmin):\n    list_display = ('libelle',)\n    search_fields = ('libelle',)\n    list_filter = ('libelle',)\n    list_per_page = 10\n#@admin.register(SinistreVeos)\nclass SinistreVeosAdmin(ImportExportModelAdmin):\n    list_display = ('ID_SIN', 'NUMERO_DOSSIER', 'FRAIS_REEL', 'TICKET_MODERATEUR', 'DEPASSEMENT_EXCLUSION',\n                    'PART_ASSURE', 'PART_COMPAGNIE', 'DATE_SINISTRE', 'CODE_ACTE',\n                    'CODE_AFFECTION', 'ID_PER_PRESTA', 'ID_NPOL', 'ID_MED_PRESC', 'ID_ADHERENT',",
        "detail": "src.configurations.admin",
        "documentation": {}
    },
    {
        "label": "SinistreVeosAdmin",
        "kind": 6,
        "importPath": "src.configurations.admin",
        "description": "src.configurations.admin",
        "peekOfCode": "class SinistreVeosAdmin(ImportExportModelAdmin):\n    list_display = ('ID_SIN', 'NUMERO_DOSSIER', 'FRAIS_REEL', 'TICKET_MODERATEUR', 'DEPASSEMENT_EXCLUSION',\n                    'PART_ASSURE', 'PART_COMPAGNIE', 'DATE_SINISTRE', 'CODE_ACTE',\n                    'CODE_AFFECTION', 'ID_PER_PRESTA', 'ID_NPOL', 'ID_MED_PRESC', 'ID_ADHERENT',\n                    'STATUT_IMPORT')\n    search_fields = ('ID_SIN', 'NUMERO_DOSSIER', 'ID_PER_PRESTA')\n    list_filter = ('STATUT_IMPORT', 'DATE_SINISTRE')\n    list_per_page = 10\nclass TarifAdmin(admin.ModelAdmin):\n    form: TarifForm",
        "detail": "src.configurations.admin",
        "documentation": {}
    },
    {
        "label": "TarifAdmin",
        "kind": 6,
        "importPath": "src.configurations.admin",
        "description": "src.configurations.admin",
        "peekOfCode": "class TarifAdmin(admin.ModelAdmin):\n    form: TarifForm\n    list_per_page = 30\n    list_display = ('acte', 'lettre_cle_classique', 'coef_classique', 'pu_classique', 'cout_classique', 'pu_mutuelle', 'cout_mutuelle', 'pu_public_hg', 'cout_public_hg', 'pu_public_chu', 'cout_public_chu', 'pu_public_ica', 'cout_public_ica')\n    list_filter = ('acte', )  # Vous pouvez ajouter d'autres champs de filtrage si nécessaire\n    search_fields = ('acte', )  # Vous pouvez ajouter d'autres champs de recherche si nécessaire\nclass TarifExcelAdmin(ImportExportModelAdmin):\n    list_display = ('CODE_REGROUPEMENT_INOV', 'LIBELLE_ACTE', 'CODE_ACTE', 'LETTRE_CLE_CLASSIQUE', 'COEF_CLASSIQUE', 'PU_CLASSIQUE', 'COUT_CLASSIQUE', 'PU_MUTUELLE', 'COUT_MUTUELLE', 'PU_PUBLIC_HG', 'COUT_PUBLIC_HG')\n    list_filter = ('CODE_REGROUPEMENT_INOV', 'LIBELLE_ACTE', 'CODE_ACTE')  # Vous pouvez ajouter d'autres champs de filtrage si nécessaire\n    search_fields = ('CODE_REGROUPEMENT_INOV', 'LIBELLE_ACTE', 'CODE_ACTE')  # Vous pouvez ajouter d'autres champs de recherche si nécessaire",
        "detail": "src.configurations.admin",
        "documentation": {}
    },
    {
        "label": "TarifExcelAdmin",
        "kind": 6,
        "importPath": "src.configurations.admin",
        "description": "src.configurations.admin",
        "peekOfCode": "class TarifExcelAdmin(ImportExportModelAdmin):\n    list_display = ('CODE_REGROUPEMENT_INOV', 'LIBELLE_ACTE', 'CODE_ACTE', 'LETTRE_CLE_CLASSIQUE', 'COEF_CLASSIQUE', 'PU_CLASSIQUE', 'COUT_CLASSIQUE', 'PU_MUTUELLE', 'COUT_MUTUELLE', 'PU_PUBLIC_HG', 'COUT_PUBLIC_HG')\n    list_filter = ('CODE_REGROUPEMENT_INOV', 'LIBELLE_ACTE', 'CODE_ACTE')  # Vous pouvez ajouter d'autres champs de filtrage si nécessaire\n    search_fields = ('CODE_REGROUPEMENT_INOV', 'LIBELLE_ACTE', 'CODE_ACTE')  # Vous pouvez ajouter d'autres champs de recherche si nécessaire\n    list_per_page = 10\nclass CompagnieVeosAdmin(ImportExportModelAdmin):\n    list_display = (\"ID_PER\", \"CODE\", \"NOM\",  \"COM_APPORT_COMPTANT\",  \"COM_APPORT_TERME\",  \"COM_GESTION\", \"TELEPHONE\", \"EMAIL\", \"ADRESSE\", \"BUREAU\", \"STATUT_IMPORT\")\n    list_filter = (\"CODE\", \"NOM\", \"BUREAU\")\n    search_fields = (\"CODE\", \"NOM\", \"BUREAU\")\n    list_per_page = 20",
        "detail": "src.configurations.admin",
        "documentation": {}
    },
    {
        "label": "CompagnieVeosAdmin",
        "kind": 6,
        "importPath": "src.configurations.admin",
        "description": "src.configurations.admin",
        "peekOfCode": "class CompagnieVeosAdmin(ImportExportModelAdmin):\n    list_display = (\"ID_PER\", \"CODE\", \"NOM\",  \"COM_APPORT_COMPTANT\",  \"COM_APPORT_TERME\",  \"COM_GESTION\", \"TELEPHONE\", \"EMAIL\", \"ADRESSE\", \"BUREAU\", \"STATUT_IMPORT\")\n    list_filter = (\"CODE\", \"NOM\", \"BUREAU\")\n    search_fields = (\"CODE\", \"NOM\", \"BUREAU\")\n    list_per_page = 20\nclass SecteurActiviteAdmin(admin.ModelAdmin):\n    list_display = ('libelle', 'status', 'created_at')\nclass ClientVeosAdmin(ImportExportModelAdmin):\n    list_display = ('ID_PER', 'CODE', 'NOM', 'PRENOMS', 'DATE_NAISSANCE', 'TELEPHONE_FIXE', 'TELEPHONE_MOBILE', 'EMAIL', 'VILLE', 'ADRESSE', 'TYPE_PER', 'LANG', 'PAYS', 'BUREAU', 'STATUT_IMPORT')\n    list_filter = ('ID_PER', 'CODE', 'NOM', 'PRENOMS','TYPE_PER','BUREAU', 'STATUT_IMPORT')",
        "detail": "src.configurations.admin",
        "documentation": {}
    },
    {
        "label": "SecteurActiviteAdmin",
        "kind": 6,
        "importPath": "src.configurations.admin",
        "description": "src.configurations.admin",
        "peekOfCode": "class SecteurActiviteAdmin(admin.ModelAdmin):\n    list_display = ('libelle', 'status', 'created_at')\nclass ClientVeosAdmin(ImportExportModelAdmin):\n    list_display = ('ID_PER', 'CODE', 'NOM', 'PRENOMS', 'DATE_NAISSANCE', 'TELEPHONE_FIXE', 'TELEPHONE_MOBILE', 'EMAIL', 'VILLE', 'ADRESSE', 'TYPE_PER', 'LANG', 'PAYS', 'BUREAU', 'STATUT_IMPORT')\n    list_filter = ('ID_PER', 'CODE', 'NOM', 'PRENOMS','TYPE_PER','BUREAU', 'STATUT_IMPORT')\n    search_fields = ('ID_PER', 'CODE', 'NOM', 'PRENOMS','TYPE_PER','BUREAU', 'STATUT_IMPORT')\n    list_per_page = 20\nclass PoliceVeosAdmin(ImportExportModelAdmin):\n    list_display = ('NUMERO',)\n    list_per_page = 20",
        "detail": "src.configurations.admin",
        "documentation": {}
    },
    {
        "label": "ClientVeosAdmin",
        "kind": 6,
        "importPath": "src.configurations.admin",
        "description": "src.configurations.admin",
        "peekOfCode": "class ClientVeosAdmin(ImportExportModelAdmin):\n    list_display = ('ID_PER', 'CODE', 'NOM', 'PRENOMS', 'DATE_NAISSANCE', 'TELEPHONE_FIXE', 'TELEPHONE_MOBILE', 'EMAIL', 'VILLE', 'ADRESSE', 'TYPE_PER', 'LANG', 'PAYS', 'BUREAU', 'STATUT_IMPORT')\n    list_filter = ('ID_PER', 'CODE', 'NOM', 'PRENOMS','TYPE_PER','BUREAU', 'STATUT_IMPORT')\n    search_fields = ('ID_PER', 'CODE', 'NOM', 'PRENOMS','TYPE_PER','BUREAU', 'STATUT_IMPORT')\n    list_per_page = 20\nclass PoliceVeosAdmin(ImportExportModelAdmin):\n    list_display = ('NUMERO',)\n    list_per_page = 20\nclass ApporteurVeosAdmin(ImportExportModelAdmin):\n    list_display = (\"ID_NPOL\", \"ID_PER_APPORTEUR\", \"NOM_APPORTEUR\", \"PRENOM_APPORTEUR\", \"STATUT_IMPORT\")",
        "detail": "src.configurations.admin",
        "documentation": {}
    },
    {
        "label": "PoliceVeosAdmin",
        "kind": 6,
        "importPath": "src.configurations.admin",
        "description": "src.configurations.admin",
        "peekOfCode": "class PoliceVeosAdmin(ImportExportModelAdmin):\n    list_display = ('NUMERO',)\n    list_per_page = 20\nclass ApporteurVeosAdmin(ImportExportModelAdmin):\n    list_display = (\"ID_NPOL\", \"ID_PER_APPORTEUR\", \"NOM_APPORTEUR\", \"PRENOM_APPORTEUR\", \"STATUT_IMPORT\")\n    list_filter = (\"ID_NPOL\", \"ID_PER_APPORTEUR\", \"NOM_APPORTEUR\", \"PRENOM_APPORTEUR\")\n    search_fields = (\"ID_NPOL\", \"ID_PER_APPORTEUR\", \"NOM_APPORTEUR\", \"PRENOM_APPORTEUR\")\n    list_per_page = 20\nclass FormuleVeosAdmin(ImportExportModelAdmin):\n    list_display = (\"CODE_FORMULE\", \"LIBELLE_FORMULE\", \"NOM_ASSURE\", \"NUMERO_ASSURE\", \"ID_NPOL\", \"NUMERO_POLICE\", \"LIGNE1\",  \"LIGNE2\",  \"LIGNE3\",  \"LIGNE4\", \"LIGNE5\")",
        "detail": "src.configurations.admin",
        "documentation": {}
    },
    {
        "label": "ApporteurVeosAdmin",
        "kind": 6,
        "importPath": "src.configurations.admin",
        "description": "src.configurations.admin",
        "peekOfCode": "class ApporteurVeosAdmin(ImportExportModelAdmin):\n    list_display = (\"ID_NPOL\", \"ID_PER_APPORTEUR\", \"NOM_APPORTEUR\", \"PRENOM_APPORTEUR\", \"STATUT_IMPORT\")\n    list_filter = (\"ID_NPOL\", \"ID_PER_APPORTEUR\", \"NOM_APPORTEUR\", \"PRENOM_APPORTEUR\")\n    search_fields = (\"ID_NPOL\", \"ID_PER_APPORTEUR\", \"NOM_APPORTEUR\", \"PRENOM_APPORTEUR\")\n    list_per_page = 20\nclass FormuleVeosAdmin(ImportExportModelAdmin):\n    list_display = (\"CODE_FORMULE\", \"LIBELLE_FORMULE\", \"NOM_ASSURE\", \"NUMERO_ASSURE\", \"ID_NPOL\", \"NUMERO_POLICE\", \"LIGNE1\",  \"LIGNE2\",  \"LIGNE3\",  \"LIGNE4\", \"LIGNE5\")\n    list_filter = (\"CODE_FORMULE\", \"NUMERO_ASSURE\", \"NUMERO_POLICE\", \"NUM_SOC\")\n    search_fields = (\"CODE_FORMULE\", \"NUMERO_ASSURE\", \"NUMERO_POLICE\", \"NUM_SOC\")\n    list_per_page = 20",
        "detail": "src.configurations.admin",
        "documentation": {}
    },
    {
        "label": "FormuleVeosAdmin",
        "kind": 6,
        "importPath": "src.configurations.admin",
        "description": "src.configurations.admin",
        "peekOfCode": "class FormuleVeosAdmin(ImportExportModelAdmin):\n    list_display = (\"CODE_FORMULE\", \"LIBELLE_FORMULE\", \"NOM_ASSURE\", \"NUMERO_ASSURE\", \"ID_NPOL\", \"NUMERO_POLICE\", \"LIGNE1\",  \"LIGNE2\",  \"LIGNE3\",  \"LIGNE4\", \"LIGNE5\")\n    list_filter = (\"CODE_FORMULE\", \"NUMERO_ASSURE\", \"NUMERO_POLICE\", \"NUM_SOC\")\n    search_fields = (\"CODE_FORMULE\", \"NUMERO_ASSURE\", \"NUMERO_POLICE\", \"NUM_SOC\")\n    list_per_page = 20\nclass AlimentVeosAdmin(ImportExportModelAdmin):\n    list_display = ('ID_ALIMENT', 'NOM', 'PRENOMS', 'DATE_NAISSANCE', 'GENRE', 'CODE_POSTAL',\n                    'EMAIL', 'NUMERO_FAMILLE', 'TELEPHONE_FIXE', 'TELEPHONE_MOBILE',\n                    'ADRESSE', 'VILLE', 'ADHERENT_PRINCIPAL_ID', 'CODE_QUALITE_BENEFICIAIRE',\n                    'QUALITE_BENEFICIAIRE', 'DATE_ENTREE', 'DATE_SORTIE', 'CD_FORMULE',",
        "detail": "src.configurations.admin",
        "documentation": {}
    },
    {
        "label": "AlimentVeosAdmin",
        "kind": 6,
        "importPath": "src.configurations.admin",
        "description": "src.configurations.admin",
        "peekOfCode": "class AlimentVeosAdmin(ImportExportModelAdmin):\n    list_display = ('ID_ALIMENT', 'NOM', 'PRENOMS', 'DATE_NAISSANCE', 'GENRE', 'CODE_POSTAL',\n                    'EMAIL', 'NUMERO_FAMILLE', 'TELEPHONE_FIXE', 'TELEPHONE_MOBILE',\n                    'ADRESSE', 'VILLE', 'ADHERENT_PRINCIPAL_ID', 'CODE_QUALITE_BENEFICIAIRE',\n                    'QUALITE_BENEFICIAIRE', 'DATE_ENTREE', 'DATE_SORTIE', 'CD_FORMULE',\n                    'LIB_FORMULE', 'CD_COLLEGE', 'LIB_COLLEGE', 'ID_NPOL', 'NUMERO_CARTE')\n    list_filter = ('GENRE', 'CODE_QUALITE_BENEFICIAIRE', 'CD_FORMULE')\n    search_fields = ('NOM', 'PRENOMS', 'EMAIL', 'ADRESSE', 'VILLE', 'NUMERO_CARTE')\n    list_per_page = 10\nclass AlimentBaobabAdmin(ImportExportModelAdmin):",
        "detail": "src.configurations.admin",
        "documentation": {}
    },
    {
        "label": "AlimentBaobabAdmin",
        "kind": 6,
        "importPath": "src.configurations.admin",
        "description": "src.configurations.admin",
        "peekOfCode": "class AlimentBaobabAdmin(ImportExportModelAdmin):\n    list_display = ('num_benef', 'nom', 'prenom', 'formule', 'formule_id')\n    list_filter = ('num_benef', 'nom', 'prenom', 'formule', 'formule_id')\n    search_fields = ('num_benef', 'nom', 'prenom', 'formule', 'formule_id')\n    list_per_page = 10\nclass PrestataireVeosAdmin(ImportExportModelAdmin):\n    list_display = ('ID_PER', 'CODE', 'NAME', 'TELEPHONE', 'TELEPHONE2', 'TELEPHONE3',\n                    'FAX', 'EMAIL', 'ADRESSE', 'VILLE',\n                    'SOCIETE', 'TYPE_PRESTATAIRE', 'SECTEUR')\n    search_fields = ('NAME', 'CODE', 'EMAIL', 'ADRESSE', 'VILLE', 'TYPE_PRESTATAIRE', 'SECTEUR')",
        "detail": "src.configurations.admin",
        "documentation": {}
    },
    {
        "label": "PrestataireVeosAdmin",
        "kind": 6,
        "importPath": "src.configurations.admin",
        "description": "src.configurations.admin",
        "peekOfCode": "class PrestataireVeosAdmin(ImportExportModelAdmin):\n    list_display = ('ID_PER', 'CODE', 'NAME', 'TELEPHONE', 'TELEPHONE2', 'TELEPHONE3',\n                    'FAX', 'EMAIL', 'ADRESSE', 'VILLE',\n                    'SOCIETE', 'TYPE_PRESTATAIRE', 'SECTEUR')\n    search_fields = ('NAME', 'CODE', 'EMAIL', 'ADRESSE', 'VILLE', 'TYPE_PRESTATAIRE', 'SECTEUR')\n    list_per_page = 10\nclass UtilisateurVeosAdmin(ImportExportModelAdmin):\n    list_display = ('ID_PER', 'NOM', 'PRENOM', 'CODE', 'LOGIN', 'EMAIL',\n                    'ID_PRESTA', 'NUM_PRESTA', 'NOM_PRESTA', 'SOCIETE')\n    search_fields = ('NOM', 'PRENOM', 'CODE', 'LOGIN', 'EMAIL', 'ID_PRESTA', 'NUM_PRESTA', 'NOM_PRESTA', 'SOCIETE')",
        "detail": "src.configurations.admin",
        "documentation": {}
    },
    {
        "label": "UtilisateurVeosAdmin",
        "kind": 6,
        "importPath": "src.configurations.admin",
        "description": "src.configurations.admin",
        "peekOfCode": "class UtilisateurVeosAdmin(ImportExportModelAdmin):\n    list_display = ('ID_PER', 'NOM', 'PRENOM', 'CODE', 'LOGIN', 'EMAIL',\n                    'ID_PRESTA', 'NUM_PRESTA', 'NOM_PRESTA', 'SOCIETE')\n    search_fields = ('NOM', 'PRENOM', 'CODE', 'LOGIN', 'EMAIL', 'ID_PRESTA', 'NUM_PRESTA', 'NOM_PRESTA', 'SOCIETE')\n    list_per_page = 10\nclass UtilisateurGrhVeosAdmin(ImportExportModelAdmin):\n    list_display = ('NOM', 'LOGIN', 'ADMIN', 'SUPERVUE', 'ACCES_SANTE',\n                    'NOM_CLIENT', 'CODE_CLIENT')\n    search_fields = ('NOM', 'LOGIN', 'ADMIN', 'SUPERVUE', 'ACCES_SANTE',\n                    'NOM_CLIENT', 'CODE_CLIENT')",
        "detail": "src.configurations.admin",
        "documentation": {}
    },
    {
        "label": "UtilisateurGrhVeosAdmin",
        "kind": 6,
        "importPath": "src.configurations.admin",
        "description": "src.configurations.admin",
        "peekOfCode": "class UtilisateurGrhVeosAdmin(ImportExportModelAdmin):\n    list_display = ('NOM', 'LOGIN', 'ADMIN', 'SUPERVUE', 'ACCES_SANTE',\n                    'NOM_CLIENT', 'CODE_CLIENT')\n    search_fields = ('NOM', 'LOGIN', 'ADMIN', 'SUPERVUE', 'ACCES_SANTE',\n                    'NOM_CLIENT', 'CODE_CLIENT')\n    list_per_page = 10\nclass ChangementFormuleAdmin(ImportExportModelAdmin):\n    list_display = ('NOM', 'PRENOMS', 'NUMERO_CARTE', 'QUALITE_BENEFICIAIRE',\n                    'LIB_FORMULE', 'CD_FORMULE', 'DATE_DEBUT')\n    search_fields = ('NOM', 'PRENOMS', 'NUMERO_CARTE', 'QUALITE_BENEFICIAIRE',",
        "detail": "src.configurations.admin",
        "documentation": {}
    },
    {
        "label": "ChangementFormuleAdmin",
        "kind": 6,
        "importPath": "src.configurations.admin",
        "description": "src.configurations.admin",
        "peekOfCode": "class ChangementFormuleAdmin(ImportExportModelAdmin):\n    list_display = ('NOM', 'PRENOMS', 'NUMERO_CARTE', 'QUALITE_BENEFICIAIRE',\n                    'LIB_FORMULE', 'CD_FORMULE', 'DATE_DEBUT')\n    search_fields = ('NOM', 'PRENOMS', 'NUMERO_CARTE', 'QUALITE_BENEFICIAIRE',\n                    'LIB_FORMULE', 'CD_FORMULE', 'DATE_DEBUT')\n    list_per_page = 10\nclass PrescripteurVeosAdmin(ImportExportModelAdmin):\n    list_display = ('id_per', 'numero', 'nom', 'prenom', 'specialite', 'email',\n                    'telephone', 'ID_PRESTA', 'NUM_PRESTA', 'NOM_PRESTA')\n    search_fields = ('id_per', 'numero', 'nom', 'prenom', 'specialite', 'NUM_PRESTA', 'NOM_PRESTA')",
        "detail": "src.configurations.admin",
        "documentation": {}
    },
    {
        "label": "PrescripteurVeosAdmin",
        "kind": 6,
        "importPath": "src.configurations.admin",
        "description": "src.configurations.admin",
        "peekOfCode": "class PrescripteurVeosAdmin(ImportExportModelAdmin):\n    list_display = ('id_per', 'numero', 'nom', 'prenom', 'specialite', 'email',\n                    'telephone', 'ID_PRESTA', 'NUM_PRESTA', 'NOM_PRESTA')\n    search_fields = ('id_per', 'numero', 'nom', 'prenom', 'specialite', 'NUM_PRESTA', 'NOM_PRESTA')\n    list_per_page = 10\nclass QuittanceVeosAdmin(ImportExportModelAdmin):\n    list_display = ('NUMERO_CLIENT', 'NOM_CLIENT', 'NUMERO_COMPAGNIE', 'NOM_COMPAGNIE', 'NUMERO_APPORTEUR',\n                    'NOM_APPORTEUR', 'CODE_PRODUIT', 'LIBELLE_PRODUIT', 'NUMERO_POLICE', 'ID_NPOL', 'NUMERO_QUITTANCE',\n                    'DATE_EMIS', 'DATE_DEBUT', 'DATE_FIN', 'CODE_TYPE_QUITTANCE', 'LIBELLE_TYPE_QUITTANCE',\n                    'CODE_NATURE_QUITTANCE', 'LIBELLE_NATURE_QUITTANCE', 'CODE_SITUATION_CLIENT',",
        "detail": "src.configurations.admin",
        "documentation": {}
    },
    {
        "label": "QuittanceVeosAdmin",
        "kind": 6,
        "importPath": "src.configurations.admin",
        "description": "src.configurations.admin",
        "peekOfCode": "class QuittanceVeosAdmin(ImportExportModelAdmin):\n    list_display = ('NUMERO_CLIENT', 'NOM_CLIENT', 'NUMERO_COMPAGNIE', 'NOM_COMPAGNIE', 'NUMERO_APPORTEUR',\n                    'NOM_APPORTEUR', 'CODE_PRODUIT', 'LIBELLE_PRODUIT', 'NUMERO_POLICE', 'ID_NPOL', 'NUMERO_QUITTANCE',\n                    'DATE_EMIS', 'DATE_DEBUT', 'DATE_FIN', 'CODE_TYPE_QUITTANCE', 'LIBELLE_TYPE_QUITTANCE',\n                    'CODE_NATURE_QUITTANCE', 'LIBELLE_NATURE_QUITTANCE', 'CODE_SITUATION_CLIENT',\n                    'LIBELLE_SITUATION_CLIENT', 'DATE_SITUATION_CLIENT', 'CODE_SITUATION_COMPAGNIE',\n                    'LIBELLE_SITUATION_COMPAGNIE', 'DATE_SITUATION_COMPAGNIE', 'CODE_SITUATION_APPORTEUR',\n                    'LIBELLE_SITUATION_APPORTEUR', 'DATE_SITUATION_APPORTEUR', 'MOIS_DE_COMPTE', 'PRIME_NETTE',\n                    'CSS', 'CSS_OLEA', 'CARTE_ROSE', 'CONSTAT', 'ACCESSOIRES', 'ACCESSOIRES_CIE', 'TAXES',\n                    'TSVL', 'PRIME_TOTALE', 'PRIME_TTC_HORS_CSS_HORS_CARTE', 'PRIME_TTC', 'TAUX', 'COMMISSION',",
        "detail": "src.configurations.admin",
        "documentation": {}
    },
    {
        "label": "ProfessionAdmin",
        "kind": 6,
        "importPath": "src.configurations.admin",
        "description": "src.configurations.admin",
        "peekOfCode": "class ProfessionAdmin(ImportExportModelAdmin):\n    list_filter = ('name', 'code')\n    list_display = ('name', 'code')\n    search_field = ('name', 'code')\n    list_per_page = 10\nclass BureausAdmin(ImportExportModelAdmin):\n    inlines = [TaxeInline]\n    list_display = ('nom', 'code', 'telephone', 'fax', 'email','tarif_bureau')\n    list_filter = ('nom', 'code', 'telephone', 'fax', 'email', ('pays', admin.RelatedOnlyFieldListFilter))\n    search_field = ('nom', 'code', 'telephone', 'fax', 'email')",
        "detail": "src.configurations.admin",
        "documentation": {}
    },
    {
        "label": "BureausAdmin",
        "kind": 6,
        "importPath": "src.configurations.admin",
        "description": "src.configurations.admin",
        "peekOfCode": "class BureausAdmin(ImportExportModelAdmin):\n    inlines = [TaxeInline]\n    list_display = ('nom', 'code', 'telephone', 'fax', 'email','tarif_bureau')\n    list_filter = ('nom', 'code', 'telephone', 'fax', 'email', ('pays', admin.RelatedOnlyFieldListFilter))\n    search_field = ('nom', 'code', 'telephone', 'fax', 'email')\n    list_per_page = 10\n    def get_queryset(self, request):\n        queryset = super().get_queryset(request)\n        if not request.user.is_superuser:\n            queryset = queryset.filter(id=request.user.bureau.id)",
        "detail": "src.configurations.admin",
        "documentation": {}
    },
    {
        "label": "RetenueAdmin",
        "kind": 6,
        "importPath": "src.configurations.admin",
        "description": "src.configurations.admin",
        "peekOfCode": "class RetenueAdmin(admin.ModelAdmin):\n    list_filter = ('code','libelle')\n    list_display = ('code','libelle','taux','secteur','prestataires')\n    fields = ['code','libelle','taux','secteur','type_prestataire']\n    search_field = ('libelle', 'code')\n    list_per_page = 20\n    def prestataires(self, obj):\n        return ', '.join([ type.name for type in obj.type_prestataire.all() ]) if obj.type_prestataire.count() > 0 else '-'\n    prestataires.allow_tags = True\n    prestataires.short_description = \"Types Prestataires\"",
        "detail": "src.configurations.admin",
        "documentation": {}
    },
    {
        "label": "ParamProduitCompagnieInline",
        "kind": 6,
        "importPath": "src.configurations.admin",
        "description": "src.configurations.admin",
        "peekOfCode": "class ParamProduitCompagnieInline(admin.TabularInline):\n    model = ParamProduitCompagnie\n    extra = 1\nclass CompagnieAdmin(admin.ModelAdmin):\n    inlines = [ParamProduitCompagnieInline]  # , Pres\n    list_display = ('nom', 'code', 'groupe_compagnie', 'type_garant', 'telephone', )\n    list_filter = ('nom', 'code', 'groupe_compagnie', 'type_garant', 'telephone', 'email')\n    search_field = ('nom', 'code', 'groupe_compagnie','type_garant', 'telephone', 'email')\n    list_per_page = 10\n    form = CompagnieAdminForm",
        "detail": "src.configurations.admin",
        "documentation": {}
    },
    {
        "label": "CompagnieAdmin",
        "kind": 6,
        "importPath": "src.configurations.admin",
        "description": "src.configurations.admin",
        "peekOfCode": "class CompagnieAdmin(admin.ModelAdmin):\n    inlines = [ParamProduitCompagnieInline]  # , Pres\n    list_display = ('nom', 'code', 'groupe_compagnie', 'type_garant', 'telephone', )\n    list_filter = ('nom', 'code', 'groupe_compagnie', 'type_garant', 'telephone', 'email')\n    search_field = ('nom', 'code', 'groupe_compagnie','type_garant', 'telephone', 'email')\n    list_per_page = 10\n    form = CompagnieAdminForm\n    def get_queryset(self, request):\n        queryset = super().get_queryset(request)\n        queryset = queryset.filter(bureau=request.user.bureau)",
        "detail": "src.configurations.admin",
        "documentation": {}
    },
    {
        "label": "MotifAdmin",
        "kind": 6,
        "importPath": "src.configurations.admin",
        "description": "src.configurations.admin",
        "peekOfCode": "class MotifAdmin(admin.ModelAdmin):\n    list_display = ('code','libelle',)\nclass PrescripteurAdmin(ImportExportModelAdmin):\n    list_filter = ('nom', 'prenoms', 'numero_ordre')\n    list_display = ('nom', 'prenoms', 'numero_ordre', 'telephone', 'email',)\n    search_field = ('nom', 'prenoms', 'numero_ordre')\nclass TypePrestataireSpecialiteInline(admin.TabularInline):\n    model = SpecialiteTypePresta\n    extra = 1\nclass PrestataireReseauxInline(admin.TabularInline):",
        "detail": "src.configurations.admin",
        "documentation": {}
    },
    {
        "label": "PrescripteurAdmin",
        "kind": 6,
        "importPath": "src.configurations.admin",
        "description": "src.configurations.admin",
        "peekOfCode": "class PrescripteurAdmin(ImportExportModelAdmin):\n    list_filter = ('nom', 'prenoms', 'numero_ordre')\n    list_display = ('nom', 'prenoms', 'numero_ordre', 'telephone', 'email',)\n    search_field = ('nom', 'prenoms', 'numero_ordre')\nclass TypePrestataireSpecialiteInline(admin.TabularInline):\n    model = SpecialiteTypePresta\n    extra = 1\nclass PrestataireReseauxInline(admin.TabularInline):\n    model = PrestataireReseauSoin\n    extra = 1",
        "detail": "src.configurations.admin",
        "documentation": {}
    },
    {
        "label": "TypePrestataireSpecialiteInline",
        "kind": 6,
        "importPath": "src.configurations.admin",
        "description": "src.configurations.admin",
        "peekOfCode": "class TypePrestataireSpecialiteInline(admin.TabularInline):\n    model = SpecialiteTypePresta\n    extra = 1\nclass PrestataireReseauxInline(admin.TabularInline):\n    model = PrestataireReseauSoin\n    extra = 1\nclass TarifPrestataireClientInline(admin.TabularInline):\n    model = TarifPrestataireClient\n    extra = 0\nclass PrescripteurPrestataireInline(admin.TabularInline):",
        "detail": "src.configurations.admin",
        "documentation": {}
    },
    {
        "label": "PrestataireReseauxInline",
        "kind": 6,
        "importPath": "src.configurations.admin",
        "description": "src.configurations.admin",
        "peekOfCode": "class PrestataireReseauxInline(admin.TabularInline):\n    model = PrestataireReseauSoin\n    extra = 1\nclass TarifPrestataireClientInline(admin.TabularInline):\n    model = TarifPrestataireClient\n    extra = 0\nclass PrescripteurPrestataireInline(admin.TabularInline):\n    model = PrescripteurPrestataire\n    extra = 0\nclass PrestataireAdmin(ImportExportModelAdmin):",
        "detail": "src.configurations.admin",
        "documentation": {}
    },
    {
        "label": "TarifPrestataireClientInline",
        "kind": 6,
        "importPath": "src.configurations.admin",
        "description": "src.configurations.admin",
        "peekOfCode": "class TarifPrestataireClientInline(admin.TabularInline):\n    model = TarifPrestataireClient\n    extra = 0\nclass PrescripteurPrestataireInline(admin.TabularInline):\n    model = PrescripteurPrestataire\n    extra = 0\nclass PrestataireAdmin(ImportExportModelAdmin):\n    inlines = [TarifPrestataireClientInline, PrescripteurPrestataireInline] #, PrestataireReseauxInline,\n    list_filter = ('name', 'bureau')\n    list_display = ('name', 'code', 'telephone', 'fax', 'email', 'addresse', 'bureau','fichier_tarifs',)",
        "detail": "src.configurations.admin",
        "documentation": {}
    },
    {
        "label": "PrescripteurPrestataireInline",
        "kind": 6,
        "importPath": "src.configurations.admin",
        "description": "src.configurations.admin",
        "peekOfCode": "class PrescripteurPrestataireInline(admin.TabularInline):\n    model = PrescripteurPrestataire\n    extra = 0\nclass PrestataireAdmin(ImportExportModelAdmin):\n    inlines = [TarifPrestataireClientInline, PrescripteurPrestataireInline] #, PrestataireReseauxInline,\n    list_filter = ('name', 'bureau')\n    list_display = ('name', 'code', 'telephone', 'fax', 'email', 'addresse', 'bureau','fichier_tarifs',)\n    search_field = ('name', 'bureau')\n    list_per_page = 10\n    # overide save_model method to process other actions",
        "detail": "src.configurations.admin",
        "documentation": {}
    },
    {
        "label": "PrestataireAdmin",
        "kind": 6,
        "importPath": "src.configurations.admin",
        "description": "src.configurations.admin",
        "peekOfCode": "class PrestataireAdmin(ImportExportModelAdmin):\n    inlines = [TarifPrestataireClientInline, PrescripteurPrestataireInline] #, PrestataireReseauxInline,\n    list_filter = ('name', 'bureau')\n    list_display = ('name', 'code', 'telephone', 'fax', 'email', 'addresse', 'bureau','fichier_tarifs',)\n    search_field = ('name', 'bureau')\n    list_per_page = 10\n    # overide save_model method to process other actions\n    def save_model(self, request, obj, form, change):\n        super().save_model(request, obj, form, change)\n        # get file and use excel to import in prescripteur table",
        "detail": "src.configurations.admin",
        "documentation": {}
    },
    {
        "label": "TypePrestataireAdmin",
        "kind": 6,
        "importPath": "src.configurations.admin",
        "description": "src.configurations.admin",
        "peekOfCode": "class TypePrestataireAdmin(admin.ModelAdmin):\n    inlines = [TypePrestataireSpecialiteInline]\n    list_display = ('name',)\n    list_filter = ('name',)\n    search_field = ('name',)\n    list_per_page = 10\nclass TypeEtablissementAdmin(admin.ModelAdmin):\n    list_display = ('libelle', 'code')\n    list_filter = ('libelle', 'code')\n    search_field = ('libelle', 'code')",
        "detail": "src.configurations.admin",
        "documentation": {}
    },
    {
        "label": "TypeEtablissementAdmin",
        "kind": 6,
        "importPath": "src.configurations.admin",
        "description": "src.configurations.admin",
        "peekOfCode": "class TypeEtablissementAdmin(admin.ModelAdmin):\n    list_display = ('libelle', 'code')\n    list_filter = ('libelle', 'code')\n    search_field = ('libelle', 'code')\n    list_per_page = 10\nclass SpecialiteAdmin(ImportExportModelAdmin):\n    list_filter = ('name', 'status')\n    list_display = ('name', 'status')\n    search_field = ('name', 'status')\n    list_per_page = 10",
        "detail": "src.configurations.admin",
        "documentation": {}
    },
    {
        "label": "SpecialiteAdmin",
        "kind": 6,
        "importPath": "src.configurations.admin",
        "description": "src.configurations.admin",
        "peekOfCode": "class SpecialiteAdmin(ImportExportModelAdmin):\n    list_filter = ('name', 'status')\n    list_display = ('name', 'status')\n    search_field = ('name', 'status')\n    list_per_page = 10\nclass ParamActeInline(admin.TabularInline):\n    model = ParamActe\n    extra = 1\n    def formfield_for_foreignkey(self, db_field, request, **kwargs):\n        # Filtrer les bureaux pour n'afficher que celui de l'utilisateur connecté",
        "detail": "src.configurations.admin",
        "documentation": {}
    },
    {
        "label": "ParamActeInline",
        "kind": 6,
        "importPath": "src.configurations.admin",
        "description": "src.configurations.admin",
        "peekOfCode": "class ParamActeInline(admin.TabularInline):\n    model = ParamActe\n    extra = 1\n    def formfield_for_foreignkey(self, db_field, request, **kwargs):\n        # Filtrer les bureaux pour n'afficher que celui de l'utilisateur connecté\n        if db_field.name == 'bureau':\n            kwargs['queryset'] = Bureau.objects.filter(pk=request.user.bureau.id)\n        return super().formfield_for_foreignkey(db_field, request, **kwargs)\nclass ActeAdmin(admin.ModelAdmin):\n    inlines = [ParamActeInline]",
        "detail": "src.configurations.admin",
        "documentation": {}
    },
    {
        "label": "ActeAdmin",
        "kind": 6,
        "importPath": "src.configurations.admin",
        "description": "src.configurations.admin",
        "peekOfCode": "class ActeAdmin(admin.ModelAdmin):\n    inlines = [ParamActeInline]\n    list_per_page = 30\n    list_filter = ('type_acte', 'rubrique', 'regroupement_acte', 'libelle', 'accord_automatique')\n    list_display = ('code', 'libelle', 'rubrique', 'regroupement_acte', 'lettre_cle', 'base_calcul_tm', 'delais_controle', 'accord_automatique', 'option_seance', 'specialiste_uniquement', 'status')\n    search_field = ('code', 'libelle',)\n    def get_queryset(self, request):\n        # Filter queryset to show only rows where type_acte is 1\n        queryset = super().get_queryset(request)\n        return queryset.filter(status=1, statut_validite=StatutValidite.VALIDE)",
        "detail": "src.configurations.admin",
        "documentation": {}
    },
    {
        "label": "SousRubriqueRegroupementInline",
        "kind": 6,
        "importPath": "src.configurations.admin",
        "description": "src.configurations.admin",
        "peekOfCode": "class SousRubriqueRegroupementInline(admin.TabularInline):\n    model = SousRubriqueRegroupementActe\n    extra = 1\nclass SousRubriqueAdmin(admin.ModelAdmin):\n    form = SousRubriqueForm\n    inlines = [SousRubriqueRegroupementInline]\n    list_per_page = 30\n    list_filter = ('rubrique', 'libelle',)\n    list_display = ('code', 'libelle', 'rubrique',)\n    search_field = ('code', 'libelle',)",
        "detail": "src.configurations.admin",
        "documentation": {}
    },
    {
        "label": "SousRubriqueAdmin",
        "kind": 6,
        "importPath": "src.configurations.admin",
        "description": "src.configurations.admin",
        "peekOfCode": "class SousRubriqueAdmin(admin.ModelAdmin):\n    form = SousRubriqueForm\n    inlines = [SousRubriqueRegroupementInline]\n    list_per_page = 30\n    list_filter = ('rubrique', 'libelle',)\n    list_display = ('code', 'libelle', 'rubrique',)\n    search_field = ('code', 'libelle',)\nclass RegroupementActeAdmin(admin.ModelAdmin):\n    form = RegroupementActeForm\n    list_per_page = 30",
        "detail": "src.configurations.admin",
        "documentation": {}
    },
    {
        "label": "RegroupementActeAdmin",
        "kind": 6,
        "importPath": "src.configurations.admin",
        "description": "src.configurations.admin",
        "peekOfCode": "class RegroupementActeAdmin(admin.ModelAdmin):\n    form = RegroupementActeForm\n    list_per_page = 30\n    #list_filter = ('rubrique', 'libelle_regroupement', 'code', )\n    list_display = ('rubrique', 'libelle_regroupement', 'code', )\n    search_field = ('rubrique', 'libelle_regroupement', 'code', )\n    def libelle_regroupement(self, obj):\n        return obj.libelle\n    libelle_regroupement.short_description = 'Regroupement'\nclass SousRegroupementActeActeInline(admin.TabularInline):",
        "detail": "src.configurations.admin",
        "documentation": {}
    },
    {
        "label": "SousRegroupementActeActeInline",
        "kind": 6,
        "importPath": "src.configurations.admin",
        "description": "src.configurations.admin",
        "peekOfCode": "class SousRegroupementActeActeInline(admin.TabularInline):\n    model = SousRegroupementActeActe\n    extra = 1\n    def formfield_for_foreignkey(self, db_field, request, **kwargs):\n        # Filtrer les bureaux pour n'afficher que celui de l'utilisateur connecté\n        if db_field.name == 'acte':\n            kwargs['queryset'] = Acte.objects.filter(status=True)# rubrique__code=\"\" filtrer uniquement les actes de la rubrique définit sur le sous-regroupement-acte\n        return super().formfield_for_foreignkey(db_field, request, **kwargs)\nclass SousRegroupementActeAdmin(admin.ModelAdmin):\n    form = SousRegroupementActeForm",
        "detail": "src.configurations.admin",
        "documentation": {}
    },
    {
        "label": "SousRegroupementActeAdmin",
        "kind": 6,
        "importPath": "src.configurations.admin",
        "description": "src.configurations.admin",
        "peekOfCode": "class SousRegroupementActeAdmin(admin.ModelAdmin):\n    form = SousRegroupementActeForm\n    inlines = [SousRegroupementActeActeInline]\n    list_per_page = 30\n    #list_filter = ('rubrique', 'libelle_regroupement', 'code', )\n    list_display = ('libelle_regroupement_acte', 'code', )\n    search_field = ('libelle_regroupement_acte', 'code', )\n    def libelle_regroupement_acte(self, obj):\n        return obj.libelle\n    libelle_regroupement_acte.short_description = \"Sous-regroupement d'actes\"",
        "detail": "src.configurations.admin",
        "documentation": {}
    },
    {
        "label": "MedicamentAdmin",
        "kind": 6,
        "importPath": "src.configurations.admin",
        "description": "src.configurations.admin",
        "peekOfCode": "class MedicamentAdmin(ImportExportModelAdmin):\n    list_per_page = 30\n    list_filter = ('code', 'libelle', 'rubrique', 'accord_automatique',)\n    list_display = ('code', 'libelle', 'rubrique', 'accord_automatique')\n    search_field = ('code', 'libelle',)\n    def get_queryset(self, request):\n         # Filter queryset to show only rows where type_acte is 1\n         queryset = Acte.objects.filter(type_acte__code=\"medicament\")\n         return queryset\nclass AffectionAdmin(ImportExportModelAdmin):",
        "detail": "src.configurations.admin",
        "documentation": {}
    },
    {
        "label": "AffectionAdmin",
        "kind": 6,
        "importPath": "src.configurations.admin",
        "description": "src.configurations.admin",
        "peekOfCode": "class AffectionAdmin(ImportExportModelAdmin):\n    list_filter = ('libelle', 'code_cim_10', 'categorie')\n    list_display = ('libelle', 'code_cim_10', 'categorie')\n    search_field = ('libelle', 'code_cim_10', 'categorie')\n    list_per_page = 20\nclass RubiqueAdmin(ImportExportModelAdmin):\n    list_filter = ('libelle',)\n    list_display = ('code', 'libelle',)\n    search_field = ('libelle',)\n    list_per_page = 20",
        "detail": "src.configurations.admin",
        "documentation": {}
    },
    {
        "label": "RubiqueAdmin",
        "kind": 6,
        "importPath": "src.configurations.admin",
        "description": "src.configurations.admin",
        "peekOfCode": "class RubiqueAdmin(ImportExportModelAdmin):\n    list_filter = ('libelle',)\n    list_display = ('code', 'libelle',)\n    search_field = ('libelle',)\n    list_per_page = 20\nclass ReseauSoinAdmin(ImportExportModelAdmin):\n    inlines = [PrestataireReseauxInline]\n    list_filter = ('nom',)\n    list_display = ('nom',)\n    search_field = ('nom',)",
        "detail": "src.configurations.admin",
        "documentation": {}
    },
    {
        "label": "ReseauSoinAdmin",
        "kind": 6,
        "importPath": "src.configurations.admin",
        "description": "src.configurations.admin",
        "peekOfCode": "class ReseauSoinAdmin(ImportExportModelAdmin):\n    inlines = [PrestataireReseauxInline]\n    list_filter = ('nom',)\n    list_display = ('nom',)\n    search_field = ('nom',)\n    list_per_page = 20\nclass LangueAdmin(admin.ModelAdmin):\n    list_filter = ('libelle',)\n    list_display = ('libelle','code')\n    search_field = ('libelle','code')",
        "detail": "src.configurations.admin",
        "documentation": {}
    },
    {
        "label": "LangueAdmin",
        "kind": 6,
        "importPath": "src.configurations.admin",
        "description": "src.configurations.admin",
        "peekOfCode": "class LangueAdmin(admin.ModelAdmin):\n    list_filter = ('libelle',)\n    list_display = ('libelle','code')\n    search_field = ('libelle','code')\n    list_per_page = 20\nclass PaysAdmin(admin.ModelAdmin):\n    list_filter = ('nom',)\n    list_display = ('nom','code','indicatif', 'poligamie', 'devise')\n    search_field = ('nom','code')\n    list_per_page = 20",
        "detail": "src.configurations.admin",
        "documentation": {}
    },
    {
        "label": "PaysAdmin",
        "kind": 6,
        "importPath": "src.configurations.admin",
        "description": "src.configurations.admin",
        "peekOfCode": "class PaysAdmin(admin.ModelAdmin):\n    list_filter = ('nom',)\n    list_display = ('nom','code','indicatif', 'poligamie', 'devise')\n    search_field = ('nom','code')\n    list_per_page = 20\nclass DeviseAdmin(admin.ModelAdmin):\n    list_filter = ('libelle',)\n    list_display = ('libelle','code')\n    search_field = ('code','libelle')\n    list_per_page = 20",
        "detail": "src.configurations.admin",
        "documentation": {}
    },
    {
        "label": "DeviseAdmin",
        "kind": 6,
        "importPath": "src.configurations.admin",
        "description": "src.configurations.admin",
        "peekOfCode": "class DeviseAdmin(admin.ModelAdmin):\n    list_filter = ('libelle',)\n    list_display = ('libelle','code')\n    search_field = ('code','libelle')\n    list_per_page = 20\nclass ParamProduitCompagnieInline(admin.TabularInline):\n    model = ParamProduitCompagnie\n    extra = 1\nclass ProduitAdmin(admin.ModelAdmin):\n    inlines = [ParamProduitCompagnieInline]",
        "detail": "src.configurations.admin",
        "documentation": {}
    },
    {
        "label": "ParamProduitCompagnieInline",
        "kind": 6,
        "importPath": "src.configurations.admin",
        "description": "src.configurations.admin",
        "peekOfCode": "class ParamProduitCompagnieInline(admin.TabularInline):\n    model = ParamProduitCompagnie\n    extra = 1\nclass ProduitAdmin(admin.ModelAdmin):\n    inlines = [ParamProduitCompagnieInline]\n    list_display = ('nom', 'branche')\n    list_per_page = 20\nclass BrancheAdmin(admin.ModelAdmin):\n    list_per_page = 20\nclass TaxeAdmin(admin.ModelAdmin):",
        "detail": "src.configurations.admin",
        "documentation": {}
    },
    {
        "label": "ProduitAdmin",
        "kind": 6,
        "importPath": "src.configurations.admin",
        "description": "src.configurations.admin",
        "peekOfCode": "class ProduitAdmin(admin.ModelAdmin):\n    inlines = [ParamProduitCompagnieInline]\n    list_display = ('nom', 'branche')\n    list_per_page = 20\nclass BrancheAdmin(admin.ModelAdmin):\n    list_per_page = 20\nclass TaxeAdmin(admin.ModelAdmin):\n    list_filter = ('libelle',)\n    list_display = ('libelle','code')\n    search_field = ('libelle', 'code')",
        "detail": "src.configurations.admin",
        "documentation": {}
    },
    {
        "label": "BrancheAdmin",
        "kind": 6,
        "importPath": "src.configurations.admin",
        "description": "src.configurations.admin",
        "peekOfCode": "class BrancheAdmin(admin.ModelAdmin):\n    list_per_page = 20\nclass TaxeAdmin(admin.ModelAdmin):\n    list_filter = ('libelle',)\n    list_display = ('libelle','code')\n    search_field = ('libelle', 'code')\n    list_per_page = 20\n@admin.register(BaseCalcul)\nclass BaseCalculAdmin(admin.ModelAdmin):\n    list_display = ('libelle', 'code')",
        "detail": "src.configurations.admin",
        "documentation": {}
    },
    {
        "label": "TaxeAdmin",
        "kind": 6,
        "importPath": "src.configurations.admin",
        "description": "src.configurations.admin",
        "peekOfCode": "class TaxeAdmin(admin.ModelAdmin):\n    list_filter = ('libelle',)\n    list_display = ('libelle','code')\n    search_field = ('libelle', 'code')\n    list_per_page = 20\n@admin.register(BaseCalcul)\nclass BaseCalculAdmin(admin.ModelAdmin):\n    list_display = ('libelle', 'code')\n    list_filter = ('libelle', 'code')\n    search_field = ('libelle', 'code')",
        "detail": "src.configurations.admin",
        "documentation": {}
    },
    {
        "label": "BaseCalculAdmin",
        "kind": 6,
        "importPath": "src.configurations.admin",
        "description": "src.configurations.admin",
        "peekOfCode": "class BaseCalculAdmin(admin.ModelAdmin):\n    list_display = ('libelle', 'code')\n    list_filter = ('libelle', 'code')\n    search_field = ('libelle', 'code')\n@admin.register(TypeQuittance)\nclass TypeQuittanceAdmin(admin.ModelAdmin):\n    list_display = ('libelle', 'code')\n    list_filter = ('libelle', 'code')\n    search_field = ('libelle', 'code')\n@admin.register(NatureQuittance)",
        "detail": "src.configurations.admin",
        "documentation": {}
    },
    {
        "label": "TypeQuittanceAdmin",
        "kind": 6,
        "importPath": "src.configurations.admin",
        "description": "src.configurations.admin",
        "peekOfCode": "class TypeQuittanceAdmin(admin.ModelAdmin):\n    list_display = ('libelle', 'code')\n    list_filter = ('libelle', 'code')\n    search_field = ('libelle', 'code')\n@admin.register(NatureQuittance)\nclass NatureQuittanceAdmin(admin.ModelAdmin):\n    list_display = ('libelle', 'code')\n    list_filter = ('libelle', 'code')\n    search_field = ('libelle', 'code')\nclass BanqueAdmin(admin.ModelAdmin):",
        "detail": "src.configurations.admin",
        "documentation": {}
    },
    {
        "label": "NatureQuittanceAdmin",
        "kind": 6,
        "importPath": "src.configurations.admin",
        "description": "src.configurations.admin",
        "peekOfCode": "class NatureQuittanceAdmin(admin.ModelAdmin):\n    list_display = ('libelle', 'code')\n    list_filter = ('libelle', 'code')\n    search_field = ('libelle', 'code')\nclass BanqueAdmin(admin.ModelAdmin):\n    list_display = ('code', 'libelle', 'bureau')\n    form=BanqueAdminForm\n    def save_model(self, request, obj, form, change):\n        # Renseignez le champ bureau uniquement lors de la création d'un nouvel utilisateur\n        if not change:",
        "detail": "src.configurations.admin",
        "documentation": {}
    },
    {
        "label": "BanqueAdmin",
        "kind": 6,
        "importPath": "src.configurations.admin",
        "description": "src.configurations.admin",
        "peekOfCode": "class BanqueAdmin(admin.ModelAdmin):\n    list_display = ('code', 'libelle', 'bureau')\n    form=BanqueAdminForm\n    def save_model(self, request, obj, form, change):\n        # Renseignez le champ bureau uniquement lors de la création d'un nouvel utilisateur\n        if not change:\n            obj.bureau = request.user.bureau\n            obj.created_by = request.user\n        # Appelez la méthode save_model de la classe parente pour effectuer l'enregistrement réel\n        super().save_model(request, obj, form, change)",
        "detail": "src.configurations.admin",
        "documentation": {}
    },
    {
        "label": "TypeDocumentAdmin",
        "kind": 6,
        "importPath": "src.configurations.admin",
        "description": "src.configurations.admin",
        "peekOfCode": "class TypeDocumentAdmin(admin.ModelAdmin):\n    list_display = ('libelle',)\n    list_filter = ('libelle',)\n    search_field = ('libelle',)\nclass CustomUserAdmin(UserAdmin):\n    list_display = ('username', 'last_name', 'first_name', 'prestataire', 'type_utilisateur', 'is_active', 'is_superuser')\n    list_filter = ('username', 'last_name', 'first_name', ('prestataire', admin.RelatedOnlyFieldListFilter), 'prestataire__type_prestataire', ('utilisateur_grh', admin.RelatedOnlyFieldListFilter), 'is_active', 'is_superuser')\n    #search_fields = ('username', 'last_name', 'first_name', 'email', 'prestataire',  'prestataire__type_prestataire', 'is_active', 'is_superuser')\n    list_per_page = 10\n    readonly_fields = ('utilisateur_grh',)",
        "detail": "src.configurations.admin",
        "documentation": {}
    },
    {
        "label": "CustomUserAdmin",
        "kind": 6,
        "importPath": "src.configurations.admin",
        "description": "src.configurations.admin",
        "peekOfCode": "class CustomUserAdmin(UserAdmin):\n    list_display = ('username', 'last_name', 'first_name', 'prestataire', 'type_utilisateur', 'is_active', 'is_superuser')\n    list_filter = ('username', 'last_name', 'first_name', ('prestataire', admin.RelatedOnlyFieldListFilter), 'prestataire__type_prestataire', ('utilisateur_grh', admin.RelatedOnlyFieldListFilter), 'is_active', 'is_superuser')\n    #search_fields = ('username', 'last_name', 'first_name', 'email', 'prestataire',  'prestataire__type_prestataire', 'is_active', 'is_superuser')\n    list_per_page = 10\n    readonly_fields = ('utilisateur_grh',)\n    inlines = [\n        AdminGroupeBureauAdmInLine,\n    ]\n    superuser_fieldsets = (",
        "detail": "src.configurations.admin",
        "documentation": {}
    },
    {
        "label": "ActionLogAdmin",
        "kind": 6,
        "importPath": "src.configurations.admin",
        "description": "src.configurations.admin",
        "peekOfCode": "class ActionLogAdmin(admin.ModelAdmin):\n    form = ActionLogForm\n    list_per_page = 30\n    list_display = ('data_before', 'data_after',)\n    #list_display = ('done_by', 'table', 'row', 'action', 'description', 'data_before', 'data_after',)\n    #search_fields = ('action',)\n    #list_filter = ('action',)\nclass TypeRemboursementAdmin(admin.ModelAdmin):\n    list_display = ('libelle', 'code')\n    list_filter = ('libelle', 'code')",
        "detail": "src.configurations.admin",
        "documentation": {}
    },
    {
        "label": "TypeRemboursementAdmin",
        "kind": 6,
        "importPath": "src.configurations.admin",
        "description": "src.configurations.admin",
        "peekOfCode": "class TypeRemboursementAdmin(admin.ModelAdmin):\n    list_display = ('libelle', 'code')\n    list_filter = ('libelle', 'code')\n    search_field = ('libelle', 'code')\n    list_per_page = 10\nclass TypePrefinancementAdmin(admin.ModelAdmin):\n    list_display = ('libelle', 'code')\n    list_filter = ('libelle', 'code')\n    search_field = ('libelle', 'code')\n    list_per_page = 10",
        "detail": "src.configurations.admin",
        "documentation": {}
    },
    {
        "label": "TypePrefinancementAdmin",
        "kind": 6,
        "importPath": "src.configurations.admin",
        "description": "src.configurations.admin",
        "peekOfCode": "class TypePrefinancementAdmin(admin.ModelAdmin):\n    list_display = ('libelle', 'code')\n    list_filter = ('libelle', 'code')\n    search_field = ('libelle', 'code')\n    list_per_page = 10\n@admin.register(PeriodeComptable)\nclass PeriodeComptableAdmin(ImportExportModelAdmin):\n    list_display = ('libelle', 'mois', 'annee', 'date_debut', 'date_fin')\n    list_filter = ('libelle', 'mois', 'annee')\n    search_field = ('libelle', 'code', 'annee')",
        "detail": "src.configurations.admin",
        "documentation": {}
    },
    {
        "label": "PeriodeComptableAdmin",
        "kind": 6,
        "importPath": "src.configurations.admin",
        "description": "src.configurations.admin",
        "peekOfCode": "class PeriodeComptableAdmin(ImportExportModelAdmin):\n    list_display = ('libelle', 'mois', 'annee', 'date_debut', 'date_fin')\n    list_filter = ('libelle', 'mois', 'annee')\n    search_field = ('libelle', 'code', 'annee')\n    list_per_page = 10\nclass KeyValueDataAdmin(ImportExportModelAdmin):\n    list_display = ('key', 'description', 'statut')\n    list_filter = ('key','statut')\n    search_field = ('key', 'description', 'data')\n    list_per_page = 10",
        "detail": "src.configurations.admin",
        "documentation": {}
    },
    {
        "label": "KeyValueDataAdmin",
        "kind": 6,
        "importPath": "src.configurations.admin",
        "description": "src.configurations.admin",
        "peekOfCode": "class KeyValueDataAdmin(ImportExportModelAdmin):\n    list_display = ('key', 'description', 'statut')\n    list_filter = ('key','statut')\n    search_field = ('key', 'description', 'data')\n    list_per_page = 10\n    formfield_overrides = {\n        # fields.JSONField: {'widget': JSONEditorWidget}, # if django < 3.1\n        models.JSONField: {'widget': JSONEditorWidget(height='500px', width='100%', mode='tree')},\n    }\nclass ModeCreationAdmin(admin.ModelAdmin):",
        "detail": "src.configurations.admin",
        "documentation": {}
    },
    {
        "label": "ModeCreationAdmin",
        "kind": 6,
        "importPath": "src.configurations.admin",
        "description": "src.configurations.admin",
        "peekOfCode": "class ModeCreationAdmin(admin.ModelAdmin):\n    list_display = ('code', 'libelle',)\nclass NatureOperationAdmin(admin.ModelAdmin):\n    list_display = ('code', 'libelle',)\nclass BackgroundQueryTaskAdmin(admin.ModelAdmin):\n    list_display = ('name','auteur','created_at','updated_at','fichier_excel','statut',)\n    list_filter = ('status','created_at',('created_by__bureau', admin.RelatedOnlyFieldListFilter),'created_by__username')\n    search_field = ('name','status','created_by__username')\n    readonly_fields = ('created_at','updated_at','error_message','name','created_by','fichier_excel', 'statut')\n    list_per_page = 10",
        "detail": "src.configurations.admin",
        "documentation": {}
    },
    {
        "label": "NatureOperationAdmin",
        "kind": 6,
        "importPath": "src.configurations.admin",
        "description": "src.configurations.admin",
        "peekOfCode": "class NatureOperationAdmin(admin.ModelAdmin):\n    list_display = ('code', 'libelle',)\nclass BackgroundQueryTaskAdmin(admin.ModelAdmin):\n    list_display = ('name','auteur','created_at','updated_at','fichier_excel','statut',)\n    list_filter = ('status','created_at',('created_by__bureau', admin.RelatedOnlyFieldListFilter),'created_by__username')\n    search_field = ('name','status','created_by__username')\n    readonly_fields = ('created_at','updated_at','error_message','name','created_by','fichier_excel', 'statut')\n    list_per_page = 10\n    superuser_fieldsets = (\n        ('Général', {",
        "detail": "src.configurations.admin",
        "documentation": {}
    },
    {
        "label": "BackgroundQueryTaskAdmin",
        "kind": 6,
        "importPath": "src.configurations.admin",
        "description": "src.configurations.admin",
        "peekOfCode": "class BackgroundQueryTaskAdmin(admin.ModelAdmin):\n    list_display = ('name','auteur','created_at','updated_at','fichier_excel','statut',)\n    list_filter = ('status','created_at',('created_by__bureau', admin.RelatedOnlyFieldListFilter),'created_by__username')\n    search_field = ('name','status','created_by__username')\n    readonly_fields = ('created_at','updated_at','error_message','name','created_by','fichier_excel', 'statut')\n    list_per_page = 10\n    superuser_fieldsets = (\n        ('Général', {\n            'fields': ('name', 'query','file', 'status')\n        }),",
        "detail": "src.configurations.admin",
        "documentation": {}
    },
    {
        "label": "ApporteurInternationalAdmin",
        "kind": 6,
        "importPath": "src.configurations.admin",
        "description": "src.configurations.admin",
        "peekOfCode": "class ApporteurInternationalAdmin(admin.ModelAdmin):\n    list_display = ('code', 'nom', 'pays')\n    form=ApporteurInternationalForm\nclass GroupeInterAdmin(admin.ModelAdmin):\n    list_display = ('code', 'nom', 'apporteur', 'status')\n    form=GroupeInterForm\n    def has_add_permission(self, request):\n        if request.user.is_superuser:\n            return True\n        else:",
        "detail": "src.configurations.admin",
        "documentation": {}
    },
    {
        "label": "GroupeInterAdmin",
        "kind": 6,
        "importPath": "src.configurations.admin",
        "description": "src.configurations.admin",
        "peekOfCode": "class GroupeInterAdmin(admin.ModelAdmin):\n    list_display = ('code', 'nom', 'apporteur', 'status')\n    form=GroupeInterForm\n    def has_add_permission(self, request):\n        if request.user.is_superuser:\n            return True\n        else:\n            return False\n    def has_delete_permission(self, request, obj=None):\n        return False",
        "detail": "src.configurations.admin",
        "documentation": {}
    },
    {
        "label": "ModelLettreChequeAdmin",
        "kind": 6,
        "importPath": "src.configurations.admin",
        "description": "src.configurations.admin",
        "peekOfCode": "class ModelLettreChequeAdmin(admin.ModelAdmin):\n    list_display = ('libelle','banque','auteur','statut',)\n    list_filter = ('statut',('bureau', admin.RelatedOnlyFieldListFilter),('banque', admin.RelatedOnlyFieldListFilter))\n    search_field = ('libelle','banque__libelle')\n    # readonly_fields = ('created_at','updated_at','error_message','name','created_by','fichier_excel', 'statut')\n    list_per_page = 10\n    fieldsets = (\n        ('Général', {\n            'fields': ('libelle', 'banque', 'model', 'statut')\n        }),",
        "detail": "src.configurations.admin",
        "documentation": {}
    },
    {
        "label": "BordereauLettreChequeAdmin",
        "kind": 6,
        "importPath": "src.configurations.admin",
        "description": "src.configurations.admin",
        "peekOfCode": "class BordereauLettreChequeAdmin(admin.ModelAdmin):\n    list_display = ('libelle','created_at','nombre','edite_par','action',)\n    list_filter = ('libelle', 'created_at',)\n    search_field = ('libelle', 'created_at','created_by')\n    readonly_fields = ('created_at','edite_par','fichier_pdf',)\n    list_per_page = 10\n    superuser_fieldsets = (\n        ('Général', {\n            'fields': ('libelle', 'model_lettre_cheque','nombre', 'fichier_pdf')\n        }),",
        "detail": "src.configurations.admin",
        "documentation": {}
    },
    {
        "label": "MailingListAdminForm",
        "kind": 6,
        "importPath": "src.configurations.admin",
        "description": "src.configurations.admin",
        "peekOfCode": "class MailingListAdminForm(forms.ModelForm):\n    class Meta:\n        model = MailingList\n        fields = '__all__'\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        if self.instance and self.instance.pk:\n            # Si l'instance existe déjà, ne pas modifier created_by\n            self.fields['created_by'].required = False\n            self.fields['updated_by'].required = False",
        "detail": "src.configurations.admin",
        "documentation": {}
    },
    {
        "label": "MailingListAdmin",
        "kind": 6,
        "importPath": "src.configurations.admin",
        "description": "src.configurations.admin",
        "peekOfCode": "class MailingListAdmin(admin.ModelAdmin):\n    form = MailingListAdminForm\n    def get_form(self, request, obj=None, **kwargs):\n        form = super().get_form(request, obj, **kwargs)\n        form.user = request.user  # Passe l'utilisateur connecté au formulaire\n        return form\n    def save_model(self, request, obj, form, change):\n        if not change:  # Si l'objet est nouveau (création)\n            obj.created_by = request.user\n        obj.updated_by = request.user",
        "detail": "src.configurations.admin",
        "documentation": {}
    },
    {
        "label": "PeriodeVeosAdmin",
        "kind": 6,
        "importPath": "src.configurations.admin",
        "description": "src.configurations.admin",
        "peekOfCode": "class PeriodeVeosAdmin(ImportExportModelAdmin):\n    list_display = ('ID_NPOL', 'NUM_POL', 'DATEEFFET', 'ECHEANCE',\t'DEBUTEFFETOLD', 'FINEFFETOLD',\t'DUREE')\n    search_fields = ('ID_NPOL', 'NUM_POL', 'DATEEFFET', 'ECHEANCE',\t'DEBUTEFFETOLD', 'FINEFFETOLD',\t'DUREE')\n    list_per_page = 10\nclass StatExcelWsBobyAdmin(admin.ModelAdmin):\n    list_display = ('libelle_fr', 'code_ws', 'status')\n    form=StatExcelWsBobyForm\n    def has_add_permission(self, request):\n        if request.user.is_superuser:\n            return True",
        "detail": "src.configurations.admin",
        "documentation": {}
    },
    {
        "label": "StatExcelWsBobyAdmin",
        "kind": 6,
        "importPath": "src.configurations.admin",
        "description": "src.configurations.admin",
        "peekOfCode": "class StatExcelWsBobyAdmin(admin.ModelAdmin):\n    list_display = ('libelle_fr', 'code_ws', 'status')\n    form=StatExcelWsBobyForm\n    def has_add_permission(self, request):\n        if request.user.is_superuser:\n            return True\n        else:\n            return False\n    def has_delete_permission(self, request, obj=None):\n        return False",
        "detail": "src.configurations.admin",
        "documentation": {}
    },
    {
        "label": "ComptePrestataireVeosAdmin",
        "kind": 6,
        "importPath": "src.configurations.admin",
        "description": "src.configurations.admin",
        "peekOfCode": "class ComptePrestataireVeosAdmin(ImportExportModelAdmin):\n    list_display = ('CODE_PRESTATAIRE', 'NOM_PRESTATAIRE', 'EMAIL', 'REMBOURSEMENT_ORDRE_DE',\t'TYPE_PRESTATAIRE', 'SECTEUR_PRESTATAIRE',\t'OBSERVATION')\n    search_fields = ('CODE_PRESTATAIRE', 'NOM_PRESTATAIRE', 'EMAIL', 'REMBOURSEMENT_ORDRE_DE',\t'TYPE_PRESTATAIRE', 'SECTEUR_PRESTATAIRE',\t'OBSERVATION')\n    list_per_page = 10\nclass BusinessUnitAdmin(ImportExportModelAdmin):\n    list_filter = ('libelle', 'status', 'created_at')\n    list_display = ('libelle', 'status', 'created_at')\n    search_field = ('libelle', 'status', 'created_at')\n    list_per_page = 10\nclass GarantieBrancheAdmin(admin.ModelAdmin):",
        "detail": "src.configurations.admin",
        "documentation": {}
    },
    {
        "label": "BusinessUnitAdmin",
        "kind": 6,
        "importPath": "src.configurations.admin",
        "description": "src.configurations.admin",
        "peekOfCode": "class BusinessUnitAdmin(ImportExportModelAdmin):\n    list_filter = ('libelle', 'status', 'created_at')\n    list_display = ('libelle', 'status', 'created_at')\n    search_field = ('libelle', 'status', 'created_at')\n    list_per_page = 10\nclass GarantieBrancheAdmin(admin.ModelAdmin):\n    form = GarantieBrancheForm\n    list_display = ['branche', 'get_garanties', 'status', 'created_at', 'updated_at']\n    list_filter = ['branche', 'status']\n    search_fields = ['branche__nom', 'garantie__nom']",
        "detail": "src.configurations.admin",
        "documentation": {}
    },
    {
        "label": "GarantieBrancheAdmin",
        "kind": 6,
        "importPath": "src.configurations.admin",
        "description": "src.configurations.admin",
        "peekOfCode": "class GarantieBrancheAdmin(admin.ModelAdmin):\n    form = GarantieBrancheForm\n    list_display = ['branche', 'get_garanties', 'status', 'created_at', 'updated_at']\n    list_filter = ['branche', 'status']\n    search_fields = ['branche__nom', 'garantie__nom']\n    def save_model(self, request, obj, form, change):\n        \"\"\"\n        Gérer la sauvegarde en associant branche et garanties via IDs\n        \"\"\"\n        branche = form.cleaned_data['branche']",
        "detail": "src.configurations.admin",
        "documentation": {}
    },
    {
        "label": "GarantieFormuleAdmin",
        "kind": 6,
        "importPath": "src.configurations.admin",
        "description": "src.configurations.admin",
        "peekOfCode": "class GarantieFormuleAdmin(admin.ModelAdmin):\n    form = GarantieFormuleForm\n    list_display = ['formule', 'get_garanties', 'status', 'created_at', 'updated_at']\n    list_filter = ['formule', 'status']\n    search_fields = ['formule__libelle', 'garantie__nom']\n    def save_model(self, request, obj, form, change):\n        \"\"\"\n        Gérer la sauvegarde en associant branche et garanties via IDs\n        \"\"\"\n        formule = form.cleaned_data['formule']",
        "detail": "src.configurations.admin",
        "documentation": {}
    },
    {
        "label": "admin.site",
        "kind": 5,
        "importPath": "src.configurations.admin",
        "description": "src.configurations.admin",
        "peekOfCode": "admin.site = custom_admin_site\nadmin.site.site_header = 'INOV'\nclass AdminGroupeBureauAdmInLine(admin.TabularInline):\n    model = AdminGroupeBureau\n    def formfield_for_foreignkey(self, db_field, request, **kwargs):\n        if db_field.name == \"bureau\":\n            kwargs[\"queryset\"] = Bureau.objects.filter(status=True)\n        return super().formfield_for_foreignkey(db_field, request, **kwargs)\nclass ActeWaspitoAdmin(admin.ModelAdmin):\n    list_display = ('libelle_fr', 'libelle_en', 'code_waspito','acte','cotation','prix','status')",
        "detail": "src.configurations.admin",
        "documentation": {}
    },
    {
        "label": "admin.site.site_header",
        "kind": 5,
        "importPath": "src.configurations.admin",
        "description": "src.configurations.admin",
        "peekOfCode": "admin.site.site_header = 'INOV'\nclass AdminGroupeBureauAdmInLine(admin.TabularInline):\n    model = AdminGroupeBureau\n    def formfield_for_foreignkey(self, db_field, request, **kwargs):\n        if db_field.name == \"bureau\":\n            kwargs[\"queryset\"] = Bureau.objects.filter(status=True)\n        return super().formfield_for_foreignkey(db_field, request, **kwargs)\nclass ActeWaspitoAdmin(admin.ModelAdmin):\n    list_display = ('libelle_fr', 'libelle_en', 'code_waspito','acte','cotation','prix','status')\n    list_per_page = 10",
        "detail": "src.configurations.admin",
        "documentation": {}
    },
    {
        "label": "ConfigurationsConfig",
        "kind": 6,
        "importPath": "src.configurations.apps",
        "description": "src.configurations.apps",
        "peekOfCode": "class ConfigurationsConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'configurations'\n    verbose_name: str = 'Paramétrage'\n    def ready(self):\n        import configurations.signals",
        "detail": "src.configurations.apps",
        "documentation": {}
    },
    {
        "label": "ActionLogForm",
        "kind": 6,
        "importPath": "src.configurations.forms",
        "description": "src.configurations.forms",
        "peekOfCode": "class ActionLogForm(forms.ModelForm):\n    class Meta:\n        model = ActionLog\n        fields = ('data_before',)\nclass PermissionForm(forms.ModelForm):\n    class Meta:\n        model = Permission\n        fields = '__all__'\n        widgets = {\n            'permissions': forms.CheckboxSelectMultiple(),  # Utiliser le widget CheckboxSelectMultiple pour les cases à cocher",
        "detail": "src.configurations.forms",
        "documentation": {}
    },
    {
        "label": "PermissionForm",
        "kind": 6,
        "importPath": "src.configurations.forms",
        "description": "src.configurations.forms",
        "peekOfCode": "class PermissionForm(forms.ModelForm):\n    class Meta:\n        model = Permission\n        fields = '__all__'\n        widgets = {\n            'permissions': forms.CheckboxSelectMultiple(),  # Utiliser le widget CheckboxSelectMultiple pour les cases à cocher\n        }\nclass RegroupementActeForm(forms.ModelForm):\n    class Meta:\n        model = RegroupementActe",
        "detail": "src.configurations.forms",
        "documentation": {}
    },
    {
        "label": "RegroupementActeForm",
        "kind": 6,
        "importPath": "src.configurations.forms",
        "description": "src.configurations.forms",
        "peekOfCode": "class RegroupementActeForm(forms.ModelForm):\n    class Meta:\n        model = RegroupementActe\n        exclude = ['code']  # Exclude the 'code' field from the form\nclass SousRegroupementActeForm(forms.ModelForm):\n    class Meta:\n        model = SousRegroupementActe\n        exclude = ['code']  # Exclude the 'code' field from the form\nclass SousRubriqueForm(forms.ModelForm):\n    class Meta:",
        "detail": "src.configurations.forms",
        "documentation": {}
    },
    {
        "label": "SousRegroupementActeForm",
        "kind": 6,
        "importPath": "src.configurations.forms",
        "description": "src.configurations.forms",
        "peekOfCode": "class SousRegroupementActeForm(forms.ModelForm):\n    class Meta:\n        model = SousRegroupementActe\n        exclude = ['code']  # Exclude the 'code' field from the form\nclass SousRubriqueForm(forms.ModelForm):\n    class Meta:\n        model = SousRubrique\n        exclude = ['code']  # Exclude the 'code' field from the form\nclass ActeAdminForm(forms.ModelForm):\n    class Meta:",
        "detail": "src.configurations.forms",
        "documentation": {}
    },
    {
        "label": "SousRubriqueForm",
        "kind": 6,
        "importPath": "src.configurations.forms",
        "description": "src.configurations.forms",
        "peekOfCode": "class SousRubriqueForm(forms.ModelForm):\n    class Meta:\n        model = SousRubrique\n        exclude = ['code']  # Exclude the 'code' field from the form\nclass ActeAdminForm(forms.ModelForm):\n    class Meta:\n        model = Compagnie\n        exclude = ['delais_carence']  # Excluez le champ bureau du formulaire\nclass TarifForm(forms.ModelForm):\n    class Meta:",
        "detail": "src.configurations.forms",
        "documentation": {}
    },
    {
        "label": "ActeAdminForm",
        "kind": 6,
        "importPath": "src.configurations.forms",
        "description": "src.configurations.forms",
        "peekOfCode": "class ActeAdminForm(forms.ModelForm):\n    class Meta:\n        model = Compagnie\n        exclude = ['delais_carence']  # Excluez le champ bureau du formulaire\nclass TarifForm(forms.ModelForm):\n    class Meta:\n        model = Tarif\n        exclude = ['code_acte']  # Exclude the 'code' field from the form\nclass CompagnieAdminForm(forms.ModelForm):\n    class Meta:",
        "detail": "src.configurations.forms",
        "documentation": {}
    },
    {
        "label": "TarifForm",
        "kind": 6,
        "importPath": "src.configurations.forms",
        "description": "src.configurations.forms",
        "peekOfCode": "class TarifForm(forms.ModelForm):\n    class Meta:\n        model = Tarif\n        exclude = ['code_acte']  # Exclude the 'code' field from the form\nclass CompagnieAdminForm(forms.ModelForm):\n    class Meta:\n        model = Compagnie\n        exclude = ['bureau']  # Excluez le champ bureau du formulaire\nclass BanqueAdminForm(forms.ModelForm):\n    class Meta:",
        "detail": "src.configurations.forms",
        "documentation": {}
    },
    {
        "label": "CompagnieAdminForm",
        "kind": 6,
        "importPath": "src.configurations.forms",
        "description": "src.configurations.forms",
        "peekOfCode": "class CompagnieAdminForm(forms.ModelForm):\n    class Meta:\n        model = Compagnie\n        exclude = ['bureau']  # Excluez le champ bureau du formulaire\nclass BanqueAdminForm(forms.ModelForm):\n    class Meta:\n        model = Banque\n        exclude = ['bureau', 'created_by']  # Excluez le champ bureau du formulaire\nclass ApporteurInternationalForm(forms.ModelForm):\n    class Meta:",
        "detail": "src.configurations.forms",
        "documentation": {}
    },
    {
        "label": "BanqueAdminForm",
        "kind": 6,
        "importPath": "src.configurations.forms",
        "description": "src.configurations.forms",
        "peekOfCode": "class BanqueAdminForm(forms.ModelForm):\n    class Meta:\n        model = Banque\n        exclude = ['bureau', 'created_by']  # Excluez le champ bureau du formulaire\nclass ApporteurInternationalForm(forms.ModelForm):\n    class Meta:\n        model = ApporteurInternational\n        exclude = ['created_by']  # Exclude the 'code' field from the form\nclass GroupeInterForm(forms.ModelForm):\n    class Meta:",
        "detail": "src.configurations.forms",
        "documentation": {}
    },
    {
        "label": "ApporteurInternationalForm",
        "kind": 6,
        "importPath": "src.configurations.forms",
        "description": "src.configurations.forms",
        "peekOfCode": "class ApporteurInternationalForm(forms.ModelForm):\n    class Meta:\n        model = ApporteurInternational\n        exclude = ['created_by']  # Exclude the 'code' field from the form\nclass GroupeInterForm(forms.ModelForm):\n    class Meta:\n        model = GroupeInter\n        exclude = ['updated_at']  # Exclude the 'code' field from the form\nclass StatExcelWsBobyForm(forms.ModelForm):\n    class Meta:",
        "detail": "src.configurations.forms",
        "documentation": {}
    },
    {
        "label": "GroupeInterForm",
        "kind": 6,
        "importPath": "src.configurations.forms",
        "description": "src.configurations.forms",
        "peekOfCode": "class GroupeInterForm(forms.ModelForm):\n    class Meta:\n        model = GroupeInter\n        exclude = ['updated_at']  # Exclude the 'code' field from the form\nclass StatExcelWsBobyForm(forms.ModelForm):\n    class Meta:\n        model = StatExcelWsBoby\n        exclude = ['updated_at']  # Exclude the 'code' field from the form\nclass GarantieBrancheForm(forms.ModelForm):\n    branche = forms.ModelChoiceField(",
        "detail": "src.configurations.forms",
        "documentation": {}
    },
    {
        "label": "StatExcelWsBobyForm",
        "kind": 6,
        "importPath": "src.configurations.forms",
        "description": "src.configurations.forms",
        "peekOfCode": "class StatExcelWsBobyForm(forms.ModelForm):\n    class Meta:\n        model = StatExcelWsBoby\n        exclude = ['updated_at']  # Exclude the 'code' field from the form\nclass GarantieBrancheForm(forms.ModelForm):\n    branche = forms.ModelChoiceField(\n        queryset=Branche.objects.filter(status=True),\n        label=\"Branche\",\n        widget=forms.Select(attrs={'class': 'form-control'})\n    )",
        "detail": "src.configurations.forms",
        "documentation": {}
    },
    {
        "label": "GarantieBrancheForm",
        "kind": 6,
        "importPath": "src.configurations.forms",
        "description": "src.configurations.forms",
        "peekOfCode": "class GarantieBrancheForm(forms.ModelForm):\n    branche = forms.ModelChoiceField(\n        queryset=Branche.objects.filter(status=True),\n        label=\"Branche\",\n        widget=forms.Select(attrs={'class': 'form-control'})\n    )\n    garanties = forms.ModelMultipleChoiceField(\n        queryset=Garantie.objects.all(),\n        label=\"Garanties\",\n        widget=forms.CheckboxSelectMultiple(attrs={'class': 'form-check-input'})",
        "detail": "src.configurations.forms",
        "documentation": {}
    },
    {
        "label": "GarantieFormuleForm",
        "kind": 6,
        "importPath": "src.configurations.forms",
        "description": "src.configurations.forms",
        "peekOfCode": "class GarantieFormuleForm(forms.ModelForm):\n    formule = forms.ModelChoiceField(\n        queryset=Formule.objects.filter(status=True),\n        label=\"formule\",\n        widget=forms.Select(attrs={'class': 'form-control'})\n    )\n    garanties = forms.ModelMultipleChoiceField(\n        queryset=Garantie.objects.all(),\n        label=\"Garanties\",\n        widget=forms.CheckboxSelectMultiple(attrs={'class': 'form-check-input'})",
        "detail": "src.configurations.forms",
        "documentation": {}
    },
    {
        "label": "verify_sql_query",
        "kind": 2,
        "importPath": "src.configurations.helper_config",
        "description": "src.configurations.helper_config",
        "peekOfCode": "def verify_sql_query(query):\n    \"\"\"\n    Verify the SQL query\n    \"\"\"\n    sql_tags_eception = [\"INSERT \", \"insert \", \"UPDATE \", \"update \", \"DELETE \", \"delete \", \"DROP \", \"drop \", \"TRUNCATE \",\n                         \"truncate \", \"ALTER \", \"alter \", \"CREATE \", \"create \", \"RENAME \", \"rename \", \"REPLACE \", \"replace \",\n                         \"GRANT \", \"grant \", \"REVOKE \", \"revoke \", \"LOCK \", \"lock \", \"UNLOCK \", \"unlock \", \"COMMIT \", \"commit \",\n                         \"ROLLBACK \", \"rollback \", \"SAVEPOINT \", \"savepoint \", \"SET \", \"set \", \"START \", \"start \", \"STOP \",\n                         \"stop \", \"KILL \", \"kill \", \"SHUTDOWN \", \"shutdown \", \"SHOW \", \"show \", \"DESCRIBE \", \"describe \",\n                         \"EXPLAIN \", \"explain \", \"USE \", \"use \", \"RESET \", \"reset \", \"PURGE \", \"purge \", \"FLUSH \",",
        "detail": "src.configurations.helper_config",
        "documentation": {}
    },
    {
        "label": "execute_query",
        "kind": 2,
        "importPath": "src.configurations.helper_config",
        "description": "src.configurations.helper_config",
        "peekOfCode": "def execute_query(db_query):\n    with connection.cursor() as cursor:\n        cursor.execute(db_query)\n        columns = [col[0] for col in cursor.description]\n        data = cursor.fetchall()\n        # print(data)\n    return data, columns\ndef execute_query_with_params(query, params=None):\n    with connection.cursor() as cursor:\n        cursor.execute(query, params)",
        "detail": "src.configurations.helper_config",
        "documentation": {}
    },
    {
        "label": "execute_query_with_params",
        "kind": 2,
        "importPath": "src.configurations.helper_config",
        "description": "src.configurations.helper_config",
        "peekOfCode": "def execute_query_with_params(query, params=None):\n    with connection.cursor() as cursor:\n        cursor.execute(query, params)\n        data = cursor.fetchall()\n        columns = [col[0] for col in cursor.description]\n    return data, columns\ndef create_query_background_task(name,query,request):\n    try:\n        task = BackgroundQueryTask(\n            name=name,",
        "detail": "src.configurations.helper_config",
        "documentation": {}
    },
    {
        "label": "create_query_background_task",
        "kind": 2,
        "importPath": "src.configurations.helper_config",
        "description": "src.configurations.helper_config",
        "peekOfCode": "def create_query_background_task(name,query,request):\n    try:\n        task = BackgroundQueryTask(\n            name=name,\n            query=query,\n            created_by=request.user)\n        task.save()\n        request.session['task_id'] = task.id\n        return task.id\n    except Exception as e:",
        "detail": "src.configurations.helper_config",
        "documentation": {}
    },
    {
        "label": "send_notification_background_task_mail",
        "kind": 2,
        "importPath": "src.configurations.helper_config",
        "description": "src.configurations.helper_config",
        "peekOfCode": "def send_notification_background_task_mail(email, task):\n    if email :\n        subject = 'INOV | Requête en arrière-plan notification'\n        message = f'''<!DOCTYPE html>\n                        <html lang=\"fr\">\n                        <head>\n                            <meta charset=\"UTF-8\">\n                            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n                            <title>INOV | Requête en arrière-plan</title>\n                        </head>",
        "detail": "src.configurations.helper_config",
        "documentation": {}
    },
    {
        "label": "send_dev_notification_background_task_mail",
        "kind": 2,
        "importPath": "src.configurations.helper_config",
        "description": "src.configurations.helper_config",
        "peekOfCode": "def send_dev_notification_background_task_mail(email, notification):\n    if email:\n        subject = 'INOV | Requête en arrière-plan notification'\n        message = f'''<!DOCTYPE html>\n                        <html lang=\"fr\">\n                        <head>\n                            <meta charset=\"UTF-8\">\n                            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n                            <title>INOV | Requête en arrière-plan</title>\n                        </head>",
        "detail": "src.configurations.helper_config",
        "documentation": {}
    },
    {
        "label": "send_verification_code",
        "kind": 2,
        "importPath": "src.configurations.helper_config",
        "description": "src.configurations.helper_config",
        "peekOfCode": "def send_verification_code(request, email):\n    if 'verification_code_sent' not in request.session:\n        # code = random_number_token(length=6)\n        # generate the code\n        hotp = pyotp.HOTP(settings.OTP_SECRET_KEY, digits=6)\n        code_verification = int(datetime.datetime.now().strftime(\"%Y%m%d%H%M%S\"))\n        code = hotp.at(code_verification)\n        request.session['verification_code'] = code\n        request.session['email'] = email\n        send_otp_mail(email, code)",
        "detail": "src.configurations.helper_config",
        "documentation": {}
    },
    {
        "label": "send_otp_mail",
        "kind": 2,
        "importPath": "src.configurations.helper_config",
        "description": "src.configurations.helper_config",
        "peekOfCode": "def send_otp_mail(email, otp):\n    subject = 'Code de Vérification'\n    message = f'''<!DOCTYPE html>\n                    <html lang=\"fr\">\n                    <head>\n                        <meta charset=\"UTF-8\">\n                        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n                        <title>Code de Vérification</title>\n                    </head>\n                    <body>",
        "detail": "src.configurations.helper_config",
        "documentation": {}
    },
    {
        "label": "ForcePasswordChangeMiddleware",
        "kind": 6,
        "importPath": "src.configurations.middlewares",
        "description": "src.configurations.middlewares",
        "peekOfCode": "class ForcePasswordChangeMiddleware:\n    def __init__(self, get_response):\n        pprint('ForcePasswordChangeMiddleware')\n        self.get_response = get_response\n    def __call__(self, request):\n        if request.user.is_authenticated:\n            # Enregistre la dernière page visitée dans la session\n            request.session['last_visited'] = request.path\n            request.session['last_ip_adress'] = request.META.get('REMOTE_ADDR')\n            request.session['last_visit_time'] = datetime.datetime.now().isoformat()  # Enregistre la date au format ISO",
        "detail": "src.configurations.middlewares",
        "documentation": {}
    },
    {
        "label": "AnonymousUserMiddleware",
        "kind": 6,
        "importPath": "src.configurations.middlewares",
        "description": "src.configurations.middlewares",
        "peekOfCode": "class AnonymousUserMiddleware:\n    def __init__(self, get_response):\n        self.get_response = get_response\n    def __call__(self, request):\n        # Vérifie si l'utilisateur est anonyme\n        '''if request.user.is_anonymous and not request.path.startswith('/login'):\n            pprint(\"-- ANONYME USER CONNECTED, REDIRECTING TO LOGIN PAGE\")\n            # Redirige vers la page de connexion\n            login_url = \"/login\"  # Assurez-vous d'avoir une URL nommée 'login'\n            return redirect(login_url)",
        "detail": "src.configurations.middlewares",
        "documentation": {}
    },
    {
        "label": "AuthRedirectMiddleware",
        "kind": 6,
        "importPath": "src.configurations.middlewares",
        "description": "src.configurations.middlewares",
        "peekOfCode": "class AuthRedirectMiddleware:\n    def __init__(self, get_response):\n        self.get_response = get_response\n    def __call__(self, request):\n        if request.user.is_authenticated and not request.session.get('is_verified', False) and not request.path_info.startswith('/grh/'):\n            if request.path != reverse('verify_code'):\n                return HttpResponseRedirect(reverse('verify_code'))\n        response = self.get_response(request)\n        return response",
        "detail": "src.configurations.middlewares",
        "documentation": {}
    },
    {
        "label": "TypeApporteur",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class TypeApporteur(models.Model):\n    code = models.CharField(max_length=10, blank=True, null=True)\n    libelle = models.CharField(max_length=50, blank=True, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    def __str__(self):\n        return self.libelle\n    class Meta:\n        db_table = 'type_apporteur'\n        verbose_name = \"Type d'apporteurs\"",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "PeriodeComptable",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class PeriodeComptable(models.Model):\n    libelle = models.CharField(max_length=100, blank=True, null=True)\n    mois = models.IntegerField(null=True)\n    annee = models.IntegerField(null=True)\n    date_debut = models.DateField(blank=False, null=True)\n    date_fin = models.DateField(blank=False, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    def __str__(self):\n        return self.libelle",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "TypeRemboursement",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class TypeRemboursement(models.Model):\n    libelle = models.CharField(max_length=100, blank=True, null=True)\n    code = models.CharField(max_length=10, unique=True, blank=True, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    status = models.BooleanField(default=True)\n    def __str__(self):\n        return self.libelle\n    class Meta:\n        db_table = 'type_remboursement'",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "Product",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class Product(models.Model):\n    name = models.CharField(max_length=255, null=True)\n    description = models.CharField(max_length=255, null=True)\n    price = models.IntegerField(null=True)\n    category = models.CharField(max_length=100, null=True)\n    image_url = models.CharField(max_length=255, null=True)\n    class Meta:\n        db_table = 'product'\nclass CompagnieVeos(models.Model):\n    ID_PER = models.CharField(max_length=100, null=True)",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "CompagnieVeos",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class CompagnieVeos(models.Model):\n    ID_PER = models.CharField(max_length=100, null=True)\n    CODE = models.CharField(max_length=100, null=True)\n    NOM = models.CharField(max_length=255, null=True)\n    COM_APPORT_COMPTANT = models.CharField(max_length=100, null=True)\n    COM_APPORT_TERME = models.CharField(max_length=100, null=True)\n    COM_GESTION = models.CharField(max_length=100, null=True)\n    TELEPHONE = models.CharField(max_length=100, null=True)\n    EMAIL = models.CharField(max_length=100, null=True)\n    ADRESSE = models.CharField(max_length=255, null=True)",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "ClientVeos",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class ClientVeos(models.Model):\n    ID_PER = models.CharField(max_length=100, null=True)\n    CODE = models.CharField(max_length=100, null=True)\n    NOM = models.CharField(max_length=255, null=True)\n    PRENOMS = models.CharField(max_length=100, null=True)\n    DATE_NAISSANCE = models.CharField(max_length=100, null=True)\n    TELEPHONE_FIXE = models.CharField(max_length=100, null=True)\n    TELEPHONE_MOBILE = models.CharField(max_length=100, null=True)\n    EMAIL = models.CharField(max_length=100, null=True)\n    VILLE = models.CharField(max_length=100, null=True)",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "PoliceVeos",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class PoliceVeos(models.Model):\n    NUMERO = models.CharField(max_length=100, null=True)\n    NUMERO_PROVISOIRE = models.CharField(max_length=100, null=True)\n    PRIME_TTC = models.CharField(max_length=100, null=True)\n    PRIME_NET = models.CharField(max_length=100, null=True)\n    DATE_DEBUT_EFFET = models.CharField(max_length=100, null=True)\n    DATE_MVT = models.CharField(max_length=100, null=True)\n    DATE_FIN_EFFET = models.CharField(max_length=100, null=True)\n    MOTIF = models.CharField(max_length=100, null=True)\n    ID_NPOL = models.CharField(max_length=100, null=True)",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "FormuleVeos",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class FormuleVeos(models.Model):\n    ID_FORMULE = models.CharField(max_length=100, null=True)\n    CODE_FORMULE = models.CharField(max_length=100, null=True)\n    LIBELLE_FORMULE = models.CharField(max_length=255, null=True)\n    NOM_ASSURE = models.CharField(max_length=255, null=True)\n    NUMERO_ASSURE = models.CharField(max_length=100, null=True)\n    ID_NPOL = models.CharField(max_length=100, null=True)\n    NUMERO_POLICE = models.CharField(max_length=100, null=True)\n    DATE_DEBUT = models.CharField(max_length=100, null=True)\n    DATE_FIN = models.CharField(max_length=100, null=True)",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "SinistreVeos",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class SinistreVeos(models.Model):\n    ID_SIN = models.CharField(max_length=100, null=True)\n    FRAIS_REEL = models.CharField(max_length=100, null=True)\n    TICKET_MODERATEUR = models.CharField(max_length=100, null=True)\n    PART_ASSURE = models.CharField(max_length=100, null=True)\n    PART_COMPAGNIE = models.CharField(max_length=100, null=True)\n    CLIENT = models.CharField(max_length=255, null=True)\n    ID_NPOL = models.CharField(max_length=255, null=True)\n    ID_PER_PRESTA = models.CharField(max_length=255, null=True)\n    ID_ADHERENT = models.CharField(max_length=255, null=True)",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "AlimentVeos",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class AlimentVeos(models.Model):\n    ID_ALIMENT = models.CharField(max_length=100, null=True)\n    NOM = models.CharField(max_length=100, null=True)\n    PRENOMS = models.CharField(max_length=100, null=True)\n    DATE_NAISSANCE = models.DateField(blank=False, null=True)\n    GENRE = models.CharField(max_length=1, null=True)\n    CODE_POSTAL = models.CharField(max_length=100, null=True)\n    EMAIL = models.CharField(max_length=100, null=True)\n    NUMERO_FAMILLE = models.IntegerField(null=True)\n    TELEPHONE_FIXE = models.CharField(max_length=100, null=True)",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "PrestataireVeos",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class PrestataireVeos(models.Model):\n    ID_PER = models.CharField(max_length=100, null=True)\n    CODE = models.CharField(max_length=100, null=True)\n    NAME = models.CharField(max_length=255, null=True)\n    TELEPHONE = models.CharField(max_length=100, null=True)\n    TELEPHONE2 = models.CharField(max_length=100, null=True)\n    TELEPHONE3 = models.CharField(max_length=100, null=True)\n    FAX = models.CharField(max_length=100, null=True)\n    EMAIL = models.CharField(max_length=100, null=True)\n    ADRESSE = models.CharField(max_length=255, null=True)",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "UtilisateurVeos",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class UtilisateurVeos(models.Model):\n    ID_PER = models.CharField(max_length=100, null=True)\n    NOM = models.CharField(max_length=100, null=True)\n    PRENOM = models.CharField(max_length=255, null=True)\n    CODE = models.CharField(max_length=100, null=True)\n    LOGIN = models.CharField(max_length=100, null=True)\n    EMAIL = models.CharField(max_length=100, null=True)\n    ID_PRESTA = models.CharField(max_length=100, null=True)\n    NUM_PRESTA = models.CharField(max_length=100, null=True)\n    NOM_PRESTA = models.CharField(max_length=100, null=True)",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "UtilisateurGrhVeos",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class UtilisateurGrhVeos(models.Model):\n    NOM = models.CharField(max_length=255, null=True)\n    LOGIN = models.CharField(max_length=255, null=True)\n    ADMIN = models.CharField(max_length=255, null=True)\n    SUPERVUE = models.CharField(max_length=255, null=True)\n    ACCES_SANTE = models.CharField(max_length=255, null=True)\n    NOM_CLIENT = models.TextField(null=True)\n    CODE_CLIENT = models.CharField(max_length=255, null=True)\n    BUREAU = models.CharField(max_length=255, null=True)\n    STATUT_IMPORT = models.BooleanField(default=False)",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "AlimentMatricule",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class AlimentMatricule(models.Model):\n    ID_ADH = models.CharField(max_length=100, null=True)\n    NOM = models.CharField(max_length=100, null=True)\n    PRENOMS = models.CharField(max_length=100, null=True)\n    NUMERO_CARTE = models.CharField(max_length=100, null=True)\n    MATRICULE = models.CharField(max_length=100, null=True)\n    STATUT_IMPORT = models.BooleanField(default=False)\n    class Meta:\n        db_table = 'aliment_matricule'\nclass ChangementFormule(models.Model):",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "ChangementFormule",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class ChangementFormule(models.Model):\n    NOM = models.CharField(max_length=100, null=True)\n    PRENOMS = models.CharField(max_length=100, null=True)\n    NUMERO_CARTE = models.CharField(max_length=100, null=True)\n    QUALITE_BENEFICIAIRE = models.CharField(max_length=100, null=True)\n    LIB_FORMULE = models.CharField(max_length=100, null=True)\n    CD_FORMULE = models.CharField(max_length=100, null=True)\n    DATE_DEBUT = models.DateField(blank=False, null=True)\n    MOTIF = models.CharField(max_length=255, null=True)\n    STATUT_IMPORT = models.BooleanField(default=False)",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "Periodicite",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class Periodicite(models.Model):\n    libelle = models.CharField(max_length=100, blank=True, null=True)\n    code = models.CharField(max_length=10, blank=True, null=True)\n    nombre_jours = models.IntegerField(blank=True, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    def __str__(self):\n        return self.libelle\n    class Meta:\n        db_table = 'periodicite'",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "JourFerie",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class JourFerie(models.Model):\n    libelle = models.CharField(max_length=50, blank=True, null=True)\n    date = models.DateField(null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    def __str__(self):\n        return self.libelle\n    class Meta:\n        db_table = 'jour_ferie'\n        verbose_name = 'Jour férié'",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "TypeTarif",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class TypeTarif(models.Model):\n    libelle = models.CharField(max_length=50, blank=True, null=True)\n    code = models.CharField(max_length=50, blank=True, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    def __str__(self):\n        return self.libelle\n    class Meta:\n        db_table = 'type_tarifs'\n        verbose_name = 'Type de tarif'",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "Secteur",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class Secteur(models.Model):\n    libelle = models.CharField(max_length=50, blank=True, null=True)\n    code = models.CharField(max_length=50, blank=True, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    def __str__(self):\n        return self.libelle\n    class Meta:\n        db_table = 'secteur'\n        verbose_name = 'Secteur'",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "TypeEtablissement",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class TypeEtablissement(models.Model):\n    libelle = models.CharField(max_length=50, blank=True, null=True)\n    code = models.CharField(max_length=50, blank=True, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    def __str__(self):\n        return self.libelle\n    class Meta:\n        db_table = 'type_etablissement'\n        verbose_name = \"Type d'établissement\"",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "Taxe",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class Taxe(models.Model):\n    libelle = models.CharField(max_length=50, blank=True, null=True)\n    code = models.CharField(max_length=10, blank=True, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    def __str__(self):\n        return self.libelle\n    class Meta:\n        db_table = 'taxes'\n        verbose_name = 'Taxe'",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "Devise",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class Devise(models.Model):\n    libelle = models.CharField(max_length=50, blank=True, null=True)\n    code = models.CharField(max_length=10, blank=True, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    def __str__(self):\n        return self.libelle\n    class Meta:\n        db_table = 'devises'\n        verbose_name = 'Devise'",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "Pays",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class Pays(models.Model):\n    nom = models.CharField(max_length=50, blank=True, null=True)\n    code = models.CharField(max_length=5, blank=True, null=True)\n    indicatif = models.CharField(max_length=5, blank=True, null=True)\n    poligamie = models.BooleanField(default=False)\n    devise = models.ForeignKey(Devise, null=True, on_delete=models.RESTRICT)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    def __str__(self):\n        return self.nom",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "Bureau",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class Bureau(models.Model):\n    CA_TYPE = (\n        ('EMISSION', 'EMISSION'),\n        ('REVERSEMENT', 'REVERSEMENT'),\n    )\n    pays = models.ForeignKey(Pays, null=True, on_delete=models.RESTRICT)\n    nom = models.CharField(max_length=255)\n    code = models.CharField(max_length=255)\n    code_courtier = models.CharField(max_length=255, blank=True, null=True)\n    telephone = models.CharField(max_length=255, blank=True, default=None, null=True)",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "BureauTaxe",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class BureauTaxe(models.Model):\n    bureau = models.ForeignKey(Bureau, null=True, on_delete=models.RESTRICT)\n    taxe = models.ForeignKey(Taxe, null=True, on_delete=models.RESTRICT)\n    taux = models.FloatField(blank=True, null=True)\n    montant = models.BigIntegerField(blank=True, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    class Meta:\n        db_table = 'bureau_taxes'\n        verbose_name = 'Taxe appliquée'",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "Retenue",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class Retenue(models.Model):\n    bureau = models.ForeignKey(Bureau, null=True, on_delete=models.RESTRICT)\n    secteur = models.ForeignKey(Secteur, on_delete=models.RESTRICT, blank=True, null=True)\n    type_prestataire = models.ManyToManyField('configurations.TypePrestataire', verbose_name=\"Types Prestataires\", blank=True , related_name='type_prestataire')\n    libelle = models.CharField(max_length=50, blank=True, null=True)\n    code = models.CharField(max_length=10, blank=True, null=True)\n    taux = models.FloatField(blank=True, null=True)    \n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    class Meta:",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "TypeGarant",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class TypeGarant(models.Model):\n    libelle = models.CharField(max_length=50, blank=True, null=True)\n    code = models.CharField(max_length=50, blank=True, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    def __str__(self):\n        return self.libelle\n    class Meta:\n        db_table = 'type_garants'\n        verbose_name = 'Type de garant'",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "GroupeCompagnie",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class GroupeCompagnie(models.Model):\n    code = models.CharField(max_length=255, blank=True, default=None, null=True)\n    nom = models.CharField(max_length=255)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    status = models.BooleanField(default=True)\n    def __str__(self):\n        return self.nom\n    class Meta:\n        db_table = 'groupe_compagnie'",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "Compagnie",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class Compagnie(models.Model):\n    type_garant = models.ForeignKey(TypeGarant, on_delete=models.RESTRICT, null=True)\n    groupe_compagnie = models.ForeignKey(GroupeCompagnie, on_delete=models.RESTRICT, null=True)\n    nom = models.CharField(max_length=255)\n    code = models.CharField(max_length=255, unique=True)\n    code_courtier = models.CharField(max_length=25, blank=True, null=True)\n    telephone = models.CharField(max_length=255, blank=True, default=None, null=True)\n    fax = models.CharField(max_length=255, blank=True, default=None, null=True)\n    email = models.EmailField(max_length=255, blank=True, default=None, null=True)\n    adresse = models.CharField(max_length=255, blank=True, default=None, null=True)",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "TypePrestataire",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class TypePrestataire(models.Model):\n    name = models.CharField(max_length=255)\n    code = models.CharField(max_length=10)\n    veos_code = models.CharField(max_length=10, null=True, blank=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    status = models.BooleanField(default=True)\n    def __str__(self):\n        return self.name\n    class Meta:",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "Prestataire",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class Prestataire(models.Model):\n    id_per = models.CharField(max_length=255, blank=True, null=True)\n    name = models.CharField(max_length=255)\n    code = models.CharField(max_length=255, unique=True)\n    veos_code_soc = models.CharField(max_length=255, blank=True, default=None, null=True)\n    veos_type_pres = models.CharField(max_length=255, blank=True, default=None, null=True)\n    telephone = models.CharField(max_length=255, blank=True, default=None, null=True)\n    fax = models.CharField(max_length=255, blank=True, default=None, null=True)\n    email = models.EmailField(max_length=255, blank=True, default=None, null=True)\n    addresse = models.CharField(max_length=255, blank=True, default=None, null=True)",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "Specialite",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class Specialite(models.Model):\n    name = models.CharField(max_length=255)\n    code = models.CharField(max_length=255, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    status = models.BooleanField(default=True)\n    is_specialite = models.BooleanField(default=True)\n    def __str__(self):\n        return self.name\n    class Meta:",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "Prescripteur",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class Prescripteur(models.Model):\n    bureau = models.ForeignKey(Bureau, on_delete=models.RESTRICT, null=True)\n    veos_code_specialite = models.CharField(max_length=50, blank=True, null=True)\n    veos_id_per = models.CharField(max_length=50, blank=True, null=True)\n    nom = models.CharField(max_length=50, blank=True, null=True)\n    prenoms = models.CharField(max_length=50, blank=True, null=True)\n    specialite = models.ForeignKey(Specialite, null=True, on_delete=models.RESTRICT)\n    numero_ordre = models.CharField(max_length=50, blank=True, null=True)\n    telephone = models.CharField(max_length=100, blank=True, null=True)\n    email = models.CharField(max_length=50, blank=True, null=True)",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "PrescripteurVeos",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class PrescripteurVeos(models.Model):\n    id_per = models.CharField(max_length=200, blank=True, null=True)\n    numero = models.CharField(max_length=200, blank=True, null=True)\n    nom = models.CharField(max_length=150, blank=True, null=True)\n    prenom = models.CharField(max_length=150, blank=True, null=True)\n    specialite = models.CharField(max_length=150, blank=True, null=True)\n    email = models.CharField(max_length=50, blank=True, null=True)\n    telephone = models.CharField(max_length=100, blank=True, null=True)\n    ID_PRESTA = models.CharField(max_length=50, blank=True, null=True)\n    NUM_PRESTA = models.CharField(max_length=100, blank=True, null=True)",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "QuittanceVeos",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class QuittanceVeos(models.Model):\n    NUMERO_CLIENT = models.CharField(max_length=255, null=True)\n    NOM_CLIENT = models.CharField(max_length=255, null=True)\n    NUMERO_COMPAGNIE = models.CharField(max_length=255, null=True)\n    NOM_COMPAGNIE = models.CharField(max_length=255, null=True)\n    NUMERO_APPORTEUR = models.CharField(max_length=255, null=True)\n    NOM_APPORTEUR = models.CharField(max_length=255, null=True)\n    CODE_PRODUIT = models.CharField(max_length=255, null=True)\n    LIBELLE_PRODUIT = models.CharField(max_length=255, null=True)\n    NUMERO_POLICE = models.CharField(max_length=255, null=True)",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "Stock",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class Stock(models.Model):\n    begin_number = models.IntegerField()\n    end_number = models.IntegerField()\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    status = models.BooleanField(default=True)\n    prestataire = models.ForeignKey(Prestataire, null=True, on_delete=models.RESTRICT)\n    def __str__(self):\n        return self.begin_number + '__' + self.end_number\n    class Meta:",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "SpecialiteTypePresta",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class SpecialiteTypePresta(models.Model):\n    specialite = models.ForeignKey(Specialite, null=True, on_delete=models.RESTRICT)\n    type_prestataire = models.ForeignKey(TypePrestataire, null=True, on_delete=models.RESTRICT)\n    def __str__(self):\n        return self.specialite.name\n    class Meta:\n        db_table = 'specialite_type_presta'\n        verbose_name = 'Spécialité type prestataire'\n        verbose_name_plural = 'Specialités type prestataire'\nclass TypePriseencharge(models.Model):",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "TypePriseencharge",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class TypePriseencharge(models.Model):\n    libelle = models.CharField(max_length=255)\n    code = models.CharField(max_length=255, blank=True, default=None, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    status = models.BooleanField(default=True)\n    statut_selectable = models.BooleanField(default=True)\n    def __str__(self):\n        return self.libelle\n    class Meta:",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "Rubrique",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class Rubrique(models.Model):\n    type_priseencharge = models.ForeignKey(TypePriseencharge, null=True, on_delete=models.RESTRICT, )\n    libelle = models.CharField(max_length=255)\n    code = models.CharField(max_length=255, blank=True, default=None, null=True)\n    base_calcul_tm = models.CharField(choices=BaseCalculTM.choices, max_length=20, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    status = models.BooleanField(default=True)\n    def __str__(self):\n        return self.libelle",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "SousRubrique",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class SousRubrique(models.Model):\n    rubrique = models.ForeignKey(Rubrique, null=True, on_delete=models.RESTRICT, )\n    libelle = models.CharField(max_length=255)\n    code = models.CharField(max_length=255, blank=True, default=None, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    status = models.BooleanField(default=True)\n    def save(self, *args, **kwargs):\n        super().save(*args, **kwargs)\n        if not self.code:",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "TypeActe",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class TypeActe(models.Model):\n    libelle = models.CharField(max_length=50, blank=True, null=True)\n    code = models.CharField(max_length=50, blank=True, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    def __str__(self):\n        return self.libelle\n    class Meta:\n        db_table = 'type_actes'\n        verbose_name = \"Type d'acte\"",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "RegroupementActe",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class RegroupementActe(models.Model):\n    rubrique = models.ForeignKey(Rubrique, null=True, on_delete=models.RESTRICT)\n    libelle = models.CharField(max_length=255)\n    code = models.CharField(max_length=255, blank=True, default=None, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    status = models.BooleanField(default=True)\n    def save(self, *args, **kwargs):\n        super().save(*args, **kwargs)\n        if not self.code:",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "SousRegroupementActe",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class SousRegroupementActe(models.Model):\n    rubrique = models.ForeignKey(Rubrique, null=True, on_delete=models.RESTRICT)\n    libelle = models.CharField(max_length=255)\n    code = models.CharField(max_length=255, blank=True, default=None, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    status = models.BooleanField(default=True)\n    def save(self, *args, **kwargs):\n        super().save(*args, **kwargs)\n        if not self.code:",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "SousRubriqueRegroupementActe",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class SousRubriqueRegroupementActe(models.Model):\n    sous_rubrique = models.ForeignKey(SousRubrique, null=True, on_delete=models.RESTRICT)\n    regroupement_acte = models.ForeignKey(RegroupementActe, null=True, on_delete=models.RESTRICT)\n    statut = models.BooleanField(default=True)\n    class Meta:\n        db_table = 'sous_rubrique_regroupement_acte'\n        verbose_name = \"Contenu de la sous-rubrique\"\n        verbose_name_plural = \"Contenus de la sous-rubrique\"\nclass Acte(models.Model):\n    rubrique = models.ForeignKey(Rubrique, null=True, on_delete=models.RESTRICT)",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "Acte",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class Acte(models.Model):\n    rubrique = models.ForeignKey(Rubrique, null=True, on_delete=models.RESTRICT)\n    regroupement_acte = models.ForeignKey(RegroupementActe, null=True, on_delete=models.RESTRICT)\n    type_acte = models.ForeignKey(TypeActe, null=True, on_delete=models.RESTRICT)\n    libelle = models.CharField(max_length=255)\n    code = models.CharField(max_length=255, unique=True, blank=True, default=None, null=True)\n    lettre_cle = models.CharField(max_length=5, blank=True, null=True)\n    delais_carence = models.IntegerField(blank=True, null=True) #pas utilisé\n    delais_controle = models.IntegerField(blank=True, null=True)\n    base_calcul_tm = models.CharField(choices=BaseCalculTM.choices, default=BaseCalculTM.FRAIS_REEL, max_length=20, null=True)",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "SousRegroupementActeActe",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class SousRegroupementActeActe(models.Model):\n    sous_regroupement_acte = models.ForeignKey(SousRegroupementActe, null=True, on_delete=models.RESTRICT)\n    acte = models.ForeignKey(Acte, null=True, on_delete=models.RESTRICT)\n    statut = models.BooleanField(default=True)\n    class Meta:\n        db_table = 'sous_regroupement_acte_acte'\n        verbose_name = \"Contenu du sous-regroupement d'actes\"\n        verbose_name_plural = \"Contenus du sous-regroupement d'actes\"\nclass Medicament(models.Model):\n    rubrique = models.ForeignKey(Rubrique, null=True, on_delete=models.RESTRICT)",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "Medicament",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class Medicament(models.Model):\n    rubrique = models.ForeignKey(Rubrique, null=True, on_delete=models.RESTRICT)\n    libelle = models.CharField(max_length=255)\n    code = models.CharField(max_length=255, blank=True, default=None, null=True)\n    accord_automatique = models.BooleanField(default=False)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    status = models.BooleanField(default=True)\n    def __str__(self):\n        return self.libelle",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "ActeWaspito",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class ActeWaspito(models.Model):\n    acte = models.ForeignKey(Acte, null=True, on_delete=models.RESTRICT)\n    libelle_en = models.CharField(max_length=255, blank=True, null=True)\n    libelle_fr = models.CharField(max_length=255, blank=True, null=True)\n    code_olea = models.CharField(max_length=20, blank=True, default=None, null=True)\n    code_waspito = models.CharField(max_length=20, blank=True, default=None, null=True)\n    cotation = models.CharField(max_length=20, blank=True, default=None, null=True)\n    prix = models.IntegerField(blank=True, null=True)\n    date_debut = models.DateField(blank=False, null=True)\n    date_fin = models.DateField(blank=False, null=True)",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "CategorieAffection",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class CategorieAffection(models.Model):\n    libelle = models.CharField(max_length=255)\n    code = models.CharField(max_length=255, blank=True, default=None, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    status = models.BooleanField(default=True)\n    def __str__(self):\n        return self.libelle\n    class Meta:\n        db_table = 'categorie_affection'",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "Affection",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class Affection(models.Model):\n    libelle = models.CharField(max_length=255)\n    short_name = models.CharField(max_length=255, blank=True, default=None, null=True)\n    code = models.CharField(max_length=50, null=True)\n    code_cim_10 = models.CharField(max_length=50)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    status = models.BooleanField(default=True)\n    categorie = models.ForeignKey(CategorieAffection, on_delete=models.RESTRICT, null=True)\n    def __str__(self):",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "GroupeNat",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class GroupeNat(models.Model):\n    name = models.CharField(max_length=255)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    status = models.BooleanField(default=True)\n    def __str__(self):\n        return self.name\n    class Meta:\n        db_table = 'groupe_nats'\n        verbose_name = 'GroupeNat'",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "Profession",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class Profession(models.Model):\n    code = models.CharField(max_length=255, blank=True, default=None, null=True)\n    name = models.CharField(max_length=255)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    status = models.BooleanField(default=True)\n    def __str__(self):\n        return self.name\n    class Meta:\n        db_table = 'professions'",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "Civilite",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class Civilite(models.Model):\n    name = models.CharField(max_length=20)\n    code = models.CharField(max_length=5, blank=True, null=True, )\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    status = models.BooleanField(default=True)\n    def __str__(self):\n        return self.name\n    class Meta:\n        db_table = 'civilites'",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "TypeAssure",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class TypeAssure(models.Model):\n    name = models.CharField(max_length=255)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    status = models.BooleanField(default=True)\n    def __str__(self):\n        return self.name\n    class Meta:\n        db_table = 'type_assures'\n        verbose_name = 'TypeAssure'",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "RegroupPersonnel",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class RegroupPersonnel(models.Model):\n    libelle = models.CharField(max_length=255);\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    status = models.BooleanField(default=True)\n    def __str__(self):\n        return self.libelle\n    class Meta:\n        db_table = 'regroup_personne'\n        verbose_name = 'Regroupement Personne'",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "TypePersonne",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class TypePersonne(models.Model):\n    libelle = models.CharField(max_length=50, blank=True, null=True)\n    code = models.CharField(max_length=1, blank=True, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    def __str__(self):\n        return self.libelle\n    class Meta:\n        db_table = 'type_personnes'\n        verbose_name = 'Type de personne'",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "TypeClient",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class TypeClient(models.Model):\n    code = models.CharField(max_length=50, blank=True, null=True)\n    libelle = models.CharField(max_length=50, blank=True, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    def __str__(self):\n        return self.libelle\n    class Meta:\n        db_table = 'type_clients'\n        verbose_name = 'Type de client'",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "Territorialite",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class Territorialite(models.Model):\n    libelle = models.CharField(max_length=100, blank=True, null=True)\n    code = models.CharField(max_length=100, blank=True, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    def __str__(self):\n        return self.libelle\n    class Meta:\n        db_table = 'territorialites'\n        verbose_name = 'Territorialites'",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "TypeProduit",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class TypeProduit(models.Model):\n    nom = models.CharField(max_length=100, blank=True, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    def __str__(self):\n        return f\"{self.nom} - {self.created_at}\"\n    class Meta:\n        db_table = 'type_produit'\n        verbose_name = 'Type Produit'\n        verbose_name_plural = 'Type Produit'",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "Branche",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class Branche(models.Model):\n    code = models.CharField(max_length=10, blank=True, null=True)\n    nom = models.CharField(max_length=100, blank=True, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    status = models.BooleanField(default=True)\n    def __str__(self):\n        return self.nom\n    class Meta:\n        db_table = 'branche'",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "Produit",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class Produit(models.Model):\n    branche = models.ForeignKey(Branche, null=True, on_delete=models.RESTRICT)\n    type_produit = models.ForeignKey(TypeProduit, null=True, on_delete=models.RESTRICT)\n    code = models.CharField(max_length=10, blank=True, null=True)\n    nom = models.CharField(max_length=100, blank=True, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    def __str__(self):\n        return self.nom\n    class Meta:",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "FloatRangeField",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class FloatRangeField(models.FloatField):\n    def __init__(self, verbose_name=None, name=None, min_value=None, max_value=None, **kwargs):\n        self.min_value, self.max_value = min_value, max_value\n        validators = kwargs.pop('validators', [])\n        if min_value is not None:\n            validators.append(MinValueValidator(min_value))\n        super().__init__(verbose_name, name, validators=validators, **kwargs)\n    def formfield(self, **kwargs):\n        defaults = {'min_value': self.min_value, 'max_value': self.max_value}\n        defaults.update(kwargs)",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "ParamProduitCompagnie",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class ParamProduitCompagnie(models.Model):\n    compagnie = models.ForeignKey(Compagnie, related_name=\"taux_com\", on_delete=models.RESTRICT)\n    produit = models.ForeignKey(Produit, null=True, on_delete=models.RESTRICT)\n    taux_com_courtage = FloatRangeField(blank=True, default=None, null=True, min_value=0)\n    taux_com_courtage_terme = FloatRangeField(blank=True, default=None, null=True, min_value=0)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    status = models.BooleanField(default=True)\n    def __str__(self):\n        return f'{self.compagnie} - {self.produit}'",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "Langue",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class Langue(models.Model):\n    code = models.CharField(max_length=10, blank=True, null=True)\n    libelle = models.CharField(max_length=100, blank=True, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    def __str__(self):\n        return self.libelle\n    class Meta:\n        db_table = 'langues'\n        verbose_name = 'Langue'",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "Fractionnement",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class Fractionnement(models.Model):\n    libelle = models.CharField(max_length=100, blank=True, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    def __str__(self):\n        return self.libelle\n    class Meta:\n        db_table = 'fractionnements'\n        verbose_name = 'Fractionnement'\n        verbose_name_plural = 'Fractionnements'",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "ModeReglement",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class ModeReglement(models.Model):\n    libelle = models.CharField(max_length=100, blank=True, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    def __str__(self):\n        return self.libelle\n    class Meta:\n        db_table = 'mode_reglements'\n        verbose_name = 'Mode de règlement'\n        verbose_name_plural = 'Modes de règlement'",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "NatureOperation",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class NatureOperation(models.Model):\n    libelle = models.CharField(max_length=100, blank=True, null=True)\n    code = models.CharField(max_length=10, unique=True, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    def __str__(self):\n        return self.libelle\n    class Meta:\n        db_table = 'nature_operations'\n        verbose_name = \"Nature de l'operation\"",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "Regularisation",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class Regularisation(models.Model):\n    libelle = models.CharField(max_length=100, blank=True, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    def __str__(self):\n        return self.libelle\n    class Meta:\n        db_table = 'regularisations'\n        verbose_name = 'Régularisation'\n        verbose_name_plural = 'Régularisations'",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "TicketModerateur",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class TicketModerateur(models.Model):\n    libelle = models.CharField(max_length=100, blank=True, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    def __str__(self):\n        return self.libelle\n    class Meta:\n        db_table = 'ticket_moderateurs'\n        verbose_name = 'Ticket moderateur'\n        verbose_name_plural = 'Tickets moderateur'",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "TypePrefinancement",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class TypePrefinancement(models.Model):\n    libelle = models.CharField(max_length=100, blank=True, null=True)\n    code = models.CharField(max_length=10, blank=True, null=True)\n    statut = models.fields.CharField(choices=Statut.choices, default=Statut.ACTIF, max_length=15, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    def __str__(self):\n        return self.libelle\n    class Meta:\n        db_table = 'type_prefinancement'",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "ModeCreation",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class ModeCreation(models.Model):\n    libelle = models.CharField(max_length=100, blank=True, null=True)\n    code = models.CharField(max_length=20, blank=True, null=True)\n    statut = models.fields.CharField(choices=Statut.choices, default=Statut.ACTIF, max_length=15, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    def __str__(self):\n        return self.libelle\n    class Meta:\n        db_table = 'mode_creation'",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "Duree",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class Duree(models.Model):\n    libelle = models.CharField(max_length=100, blank=True, null=True)\n    nombre_mois = models.IntegerField(blank=True, null=True)\n    nombre_jours = models.IntegerField(blank=True, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    def __str__(self):\n        return self.libelle\n    class Meta:\n        db_table = 'durees'",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "AuthGroup",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class AuthGroup(Group):\n    # Add your custom field(s) here\n    code = models.CharField(max_length=50)\n    libelle = models.CharField(max_length=255, null=True)\n    status = models.BooleanField(default=True)\nclass TypeUtilisateur(models.Model):\n    code = models.CharField(max_length=100, blank=True, null=True)\n    libelle = models.CharField(max_length=100, blank=True, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "TypeUtilisateur",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class TypeUtilisateur(models.Model):\n    code = models.CharField(max_length=100, blank=True, null=True)\n    libelle = models.CharField(max_length=100, blank=True, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    def __str__(self):\n        return self.libelle\n    class Meta:\n        db_table = 'type_utilisateurs'\n        verbose_name = 'Type utilisateur'",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class User(AbstractUser):\n    bureau = models.ForeignKey(Bureau, null=True, on_delete=models.RESTRICT)\n    type_utilisateur = models.ForeignKey(TypeUtilisateur, null=True, on_delete=models.RESTRICT)\n    prestataire = models.ForeignKey(Prestataire, null=True, blank=True, on_delete=models.RESTRICT)\n    veos_code = models.CharField(max_length=100, blank=True, null=True)\n    veos_code_prestataire = models.CharField(max_length=100, blank=True, null=True)\n    password_type = models.fields.CharField(choices=PasswordType.choices, default=PasswordType.DEFAULT, null=True, max_length=20)\n    # Utilisateur GRH\n    client_grh = models.ManyToManyField('production.Client', verbose_name=\"Client (GRH)\", blank=True,related_name='client_grh')\n    utilisateur_grh = models.ForeignKey('production.Client', verbose_name=\"Client (GRH)\", blank=True, null=True, on_delete=models.RESTRICT)",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "ParamActe",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class ParamActe(models.Model):\n    created_by = models.ForeignKey(User, related_name=\"pa_created_by\", null=True, on_delete=models.RESTRICT)\n    updated_by = models.ForeignKey(User, related_name=\"pa_updated_by\", null=True, on_delete=models.RESTRICT)\n    bureau = models.ForeignKey(Bureau, null=True, on_delete=models.RESTRICT)\n    acte = models.ForeignKey(Acte, null=True, on_delete=models.RESTRICT)\n    delais_controle = models.IntegerField(blank=True, null=True)\n    delais_carence = models.IntegerField(blank=True, null=True)\n    accord_automatique = models.BooleanField(default=False)\n    entente_prealable = models.BooleanField(default=False)\n    specialiste_uniquement = models.BooleanField(default=False)",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "PrescripteurPrestataire",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class PrescripteurPrestataire(models.Model):\n    created_by = models.ForeignKey(User, related_name=\"pp_created_by\", null=True, on_delete=models.RESTRICT)\n    deleted_by = models.ForeignKey(User, related_name=\"pp_deleted_by\", null=True, on_delete=models.RESTRICT)\n    prestataire = models.ForeignKey(Prestataire, null=True, on_delete=models.RESTRICT)\n    prescripteur = models.ForeignKey(Prescripteur, null=True, on_delete=models.RESTRICT)\n    statut_validite = models.fields.CharField(choices=StatutValidite.choices, default=StatutValidite.VALIDE, max_length=15, null=True)\n    observation = models.CharField(max_length=255, blank=True, null=True)\n    deleted_at = models.DateTimeField(blank=True, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    def __str__(self):",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "ApporteurInternational",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class ApporteurInternational(models.Model):\n    created_by = models.ForeignKey(User, null=True, on_delete=models.RESTRICT)\n    pays = models.ForeignKey(Pays, null=True, on_delete=models.RESTRICT)\n    nom = models.CharField(max_length=100, blank=True, default=None, null=True)\n    code = models.CharField(max_length=25, blank=True, default=None, null=True, unique=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    status = models.BooleanField(default=True)\n    def __str__(self):\n        return self.nom",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "Apporteur",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class Apporteur(models.Model):\n    created_by = models.ForeignKey(User, null=True, on_delete=models.RESTRICT)\n    id_per = models.CharField(max_length=25, blank=True, null=True)\n    bureau = models.ForeignKey(Bureau, null=True, on_delete=models.RESTRICT)\n    pays = models.ForeignKey(Pays, null=True, on_delete=models.RESTRICT)\n    type_apporteur = models.ForeignKey(TypeApporteur, null=True, on_delete=models.RESTRICT)\n    type_personne = models.ForeignKey(TypePersonne, null=True, on_delete=models.RESTRICT)\n    #apporteur_international = models.ForeignKey(ApporteurInternational, null=True, on_delete=models.RESTRICT)\n    nom = models.CharField(max_length=100, blank=True, default=None, null=True)\n    prenoms = models.CharField(max_length=100, blank=True, default=None, null=True)",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "GroupeInter",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class GroupeInter(models.Model):\n    apporteur = models.ForeignKey(Apporteur, on_delete=models.RESTRICT, null=True)\n    code = models.CharField(max_length=255, blank=True, default=None, null=True)\n    nom = models.CharField(max_length=255)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    status = models.BooleanField(default=True)\n    def __str__(self):\n        return self.nom\n    class Meta:",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "ApporteurVeos",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class ApporteurVeos(models.Model):\n    NUM_SOC = models.CharField(max_length=100, null=True)\n    LIB_TIT = models.CharField(max_length=100, null=True)\n    NUM_PER = models.CharField(max_length=100, null=True)\n    NOM_PER = models.CharField(max_length=100, null=True)\n    PRENOM_PER = models.CharField(max_length=100, null=True)\n    ADRESSE1_ADR = models.CharField(max_length=255, null=True)\n    ADRESSE2_ADR = models.CharField(max_length=255, null=True)\n    ADRESSE3_ADR = models.CharField(max_length=255, null=True)\n    CD_PST = models.CharField(max_length=100, null=True)",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "ReseauSoin",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class ReseauSoin(models.Model):\n    created_by = models.ForeignKey(User, null=True, on_delete=models.RESTRICT)\n    bureau = models.ForeignKey(Bureau, null=True, on_delete=models.RESTRICT)\n    code = models.CharField(max_length=15, null=True)\n    nom = models.CharField(max_length=255)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    status = models.BooleanField(default=True)\n    def __str__(self):\n        return f'{self.nom}'",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "PrestataireReseauSoin",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class PrestataireReseauSoin(models.Model):\n    created_by = models.ForeignKey(User, null=True, on_delete=models.RESTRICT)\n    removed_by = models.ForeignKey(User, related_name=\"removed_by\", null=True, on_delete=models.RESTRICT)\n    prestataire = models.ForeignKey(Prestataire, related_name=\"ses_reseaux_soins\", on_delete=models.RESTRICT)\n    reseau_soin = models.ForeignKey(ReseauSoin, related_name=\"ses_prestataires\", on_delete=models.RESTRICT)\n    date_integration = models.DateTimeField(blank=True, null=True)\n    date_retrait = models.DateTimeField(blank=True, null=True)\n    statut_validite = models.fields.CharField(choices=StatutValidite.choices, default=StatutValidite.VALIDE, max_length=15, null=True)\n    class Meta:\n        db_table = 'prestataire_reseau_soin'",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "QualiteBeneficiaire",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class QualiteBeneficiaire(models.Model):\n    libelle = models.CharField(max_length=50, blank=True, null=True)\n    code = models.CharField(max_length=10, blank=True, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    def __str__(self):\n        return self.libelle\n    class Meta:\n        db_table = 'qualite_beneficiaire'\n        verbose_name = 'Qualité bénéficiaire'",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "TypeAssurance",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class TypeAssurance(models.Model):\n    libelle = models.CharField(max_length=50, blank=True, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    def __str__(self):\n        return self.libelle\n    class Meta:\n        db_table = 'type_assurance'\n        verbose_name = 'Type assurance'\n        verbose_name_plural = \"Types d'assurance\"",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "ModeCalcul",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class ModeCalcul(models.Model):\n    libelle = models.CharField(max_length=50, blank=True, null=True)\n    code = models.CharField(max_length=30, blank=True, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    def __str__(self):\n        return self.libelle\n    class Meta:\n        db_table = 'modes_calculs'\n        verbose_name = 'Mode de calcul'",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "BaseCalcul",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class BaseCalcul(models.Model):\n    libelle = models.CharField(max_length=50, blank=True, null=True)\n    code = models.CharField(max_length=50, blank=True, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    def __str__(self):\n        return self.libelle\n    class Meta:\n        db_table = 'base_calculs'\n        verbose_name = 'Base de calcul'",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "Banque",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class Banque(models.Model):\n    created_by = models.ForeignKey(User, null=True, on_delete=models.RESTRICT)\n    bureau = models.ForeignKey(Bureau, null=True, on_delete=models.RESTRICT)\n    libelle = models.CharField(max_length=100, blank=True, null=True)\n    code = models.CharField(max_length=50, blank=True, null=True)\n    nom_complet = models.TextField(blank=True, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    status = models.BooleanField(default=True)\n    def __str__(self):",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "CompteTresorerie",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class CompteTresorerie(models.Model):\n    libelle = models.CharField(max_length=100, blank=True, null=True)\n    code = models.CharField(max_length=50, blank=True, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    status = models.BooleanField(default=True)\n    def __str__(self):\n        return self.libelle\n    class Meta:\n        db_table = 'compte_tresorerie'",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "NatureQuittance",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class NatureQuittance(models.Model):\n    libelle = models.CharField(max_length=50, blank=True, null=True)\n    code = models.CharField(max_length=50, blank=True, null=True)\n    code_veos = models.CharField(max_length=50, blank=True, null=True)\n    status = models.BooleanField(default=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    def __str__(self):\n        return self.libelle\n    class Meta:",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "TypeQuittance",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class TypeQuittance(models.Model):\n    libelle = models.CharField(max_length=50, blank=True, null=True)\n    code = models.CharField(max_length=50, blank=True, null=True)\n    code_veos = models.CharField(max_length=50, blank=True, null=True)\n    status = models.BooleanField(default=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    def __str__(self):\n        return self.libelle\n    class Meta:",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "CategorieVehicule",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class CategorieVehicule(models.Model):\n    libelle = models.CharField(max_length=50, blank=True, null=True)\n    code = models.CharField(max_length=50, blank=True, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    def __str__(self):\n        return self.libelle\n    class Meta:\n        db_table = 'categorie_vehicule'\n        verbose_name = 'Catégorie de véhicule'",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "TypeCarosserie",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class TypeCarosserie(models.Model):\n    libelle = models.CharField(max_length=50, blank=True, null=True)\n    code = models.CharField(max_length=50, blank=True, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    def __str__(self):\n        return self.libelle\n    class Meta:\n        db_table = 'type_carosserie'\n        verbose_name = 'Type de carosserie'",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "Carosserie",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class Carosserie(models.Model):\n    libelle = models.CharField(max_length=50, blank=True, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    def __str__(self):\n        return self.libelle\n    class Meta:\n        db_table = 'carosserie'\n        verbose_name = 'Carosseries'\n        verbose_name_plural = \"Carosseries\"",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "Carburant",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class Carburant(models.Model):\n    libelle = models.CharField(max_length=50, blank=True, null=True)\n    code = models.CharField(max_length=50, blank=True, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    def __str__(self):\n        return self.libelle\n    class Meta:\n        db_table = 'carburant'\n        verbose_name = 'Carburants'",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "Usage",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class Usage(models.Model):\n    libelle = models.CharField(max_length=50, blank=True, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    def __str__(self):\n        return self.libelle\n    class Meta:\n        db_table = 'usage'\n        verbose_name = 'Usages'\n        verbose_name_plural = \"Usages\"",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "MarqueVehicule",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class MarqueVehicule(models.Model):\n    libelle = models.CharField(max_length=50, blank=True, null=True)\n    code = models.CharField(max_length=50, blank=True, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    def __str__(self):\n        return self.libelle\n    class Meta:\n        db_table = 'marque_vehicule'\n        verbose_name = 'Marque'",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "Tarif",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class Tarif(models.Model):\n    created_by = models.ForeignKey(User, null=True, on_delete=models.RESTRICT)\n    validated_by = models.ForeignKey(User, related_name=\"validated_by\", null=True, on_delete=models.RESTRICT)\n    deleted_by = models.ForeignKey(User, related_name=\"tarif_deleted_by\", null=True, on_delete=models.RESTRICT)\n    bureau = models.ForeignKey(Bureau, null=True, on_delete=models.RESTRICT)\n    prestataire = models.ForeignKey(Prestataire, null=True, on_delete=models.RESTRICT)\n    #police = models.ForeignKey(Police, null=True, on_delete=models.RESTRICT)\n    acte = models.ForeignKey(Acte, null=True, on_delete=models.RESTRICT)\n    code_acte = models.CharField(max_length=50, blank=True, null=True)\n    lettre_cle_public_hg = models.CharField(max_length=50, blank=True, null=True)",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "TarifExcel",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class TarifExcel(models.Model):\n    CODE_REGROUPEMENT_OLEA = models.CharField(max_length=100, null=True)\n    LIBELLE_ACTE = models.CharField(max_length=100, null=True)\n    CODE_ACTE = models.CharField(max_length=100, null=True)\n    REGROUPEMENT_ACTE = models.CharField(max_length=100, null=True)\n    LETTRE_CLE_CLASSIQUE = models.CharField(max_length=100, null=True)\n    COEF_CLASSIQUE = models.CharField(max_length=100, null=True)\n    PU_CLASSIQUE = models.CharField(max_length=100, null=True)\n    COUT_CLASSIQUE = models.CharField(max_length=100, null=True)\n    LETTRE_CLE_MUTUELLE = models.CharField(max_length=100, null=True)",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "SpecialiteActeAutorise",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class SpecialiteActeAutorise(models.Model):\n    specialite = models.ForeignKey(Specialite, null=True, on_delete=models.RESTRICT)\n    acte = models.ForeignKey(Acte, null=True, on_delete=models.RESTRICT)\n    created_at = models.DateTimeField(auto_now_add=True)\n    def __str__(self):\n        return self.specialite.name + ' peut faire ' + self.acte.libelle\n    class Meta:\n        db_table = 'specialite_acte_autorise'\n        verbose_name = 'Acte autorisé'\n        verbose_name_plural = 'Actes autorisés'",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "ActionLog",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class ActionLog(models.Model):\n    done_by = models.ForeignKey(User, null=True, on_delete=models.RESTRICT)\n    action = models.CharField(max_length=100, blank=True, null=True)\n    description = models.CharField(max_length=255, blank=True, null=True)\n    table = models.CharField(max_length=100, blank=True, null=True)\n    row = models.IntegerField(blank=True, null=True)\n    data_before = models.JSONField(blank=True, null=True)\n    data_after = models.JSONField(blank=True, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "CronLog",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class CronLog(models.Model):\n    action = models.CharField(max_length=100, blank=True, null=True)\n    description = models.CharField(max_length=255, blank=True, null=True)\n    table = models.CharField(max_length=100, blank=True, null=True)\n    row = models.IntegerField(blank=True, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    def __str__(self):\n        return f\"{self.action} data into {self.table} on {self.created_at}\"\n    class Meta:",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "KeyValueData",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class KeyValueData(models.Model):\n    key = models.CharField(max_length=100, blank=False, null=True)\n    description = models.CharField(max_length=255, blank=True, null=True)\n    statut = models.BooleanField(default=True)\n    data = models.JSONField(null=True, blank=True)\n    created_at = models.DateTimeField(verbose_name='Date de creation', auto_now_add=True)\n    updated_at = models.DateTimeField(verbose_name='Date mise à jour', auto_now=True)\n    def __str__(self):\n        return self.key\n    class Meta:",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "WsBoby",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class WsBoby(models.Model):\n    name = models.CharField(max_length=100, blank=True, null=True, unique=True)\n    request = models.TextField(blank=True, null=True)\n    status = models.BooleanField(default=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    def __str__(self):\n        return self.name\n    class Meta:\n        db_table = 'ws_boby'",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "ParamWsBoby",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class ParamWsBoby(models.Model):\n    ws_boby = models.ForeignKey(WsBoby, null=True, on_delete=models.RESTRICT)\n    name = models.CharField(max_length=100, blank=True, null=True)\n    value = models.TextField(blank=True, null=True)\n    status = models.BooleanField(default=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    def __str__(self):\n        return self.name\n    class Meta:",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "BackgroundQueryTask",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class BackgroundQueryTask(models.Model):\n    STATUS = (\n        ('ENATT', 'EN ATTENTE'),\n        ('ENCOURS', 'EN COURS'),\n        ('ECHOUEE', 'ECHOUEE'),\n        ('ANNULLEE', 'ANNULLEE'),\n        ('TERMINEE', 'TERMINEE'),\n    )\n    name = models.CharField(verbose_name='Libellé requête', max_length=255, blank=True, null=True)\n    query = models.TextField(verbose_name='Requête', blank=True, null=True)",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "AdminGroupeBureau",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class AdminGroupeBureau(models.Model):\n    bureau = models.ForeignKey(Bureau, null=True, on_delete=models.RESTRICT)\n    user = models.ForeignKey(User, null=True, on_delete=models.RESTRICT)\n    status = models.BooleanField(default=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    def __str__(self):\n        return f'{self.bureau}'\n    class Meta:\n        db_table = 'admin_groupe_permission'",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "Caution",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class Caution(models.Model):\n    bureau = models.ForeignKey(Bureau, on_delete=models.RESTRICT, null=True)  # Faciliter les req\n    compagnie = models.ForeignKey(Compagnie, null=False, on_delete=models.RESTRICT)\n    created_by = models.ForeignKey(User, null=True, related_name=\"created_by\", on_delete=models.RESTRICT)\n    montant = models.BigIntegerField(null=False)\n    date_debut_effet = models.DateTimeField(default=None)\n    date_fin_effet = models.DateTimeField(null=True, default=None)  # Date_fin_effet plus important que statut\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    status = models.BooleanField(default=True)",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "MailingList",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class MailingList(models.Model):\n    bureau = models.ForeignKey(Bureau, on_delete=models.RESTRICT, null=True)\n    mail_de_diffusion = models.CharField(max_length=100, blank=False, null=True)\n    nombre_alerte = models.IntegerField(null=True, blank=True, validators=[MinValueValidator(0)])\n    type_alerte = models.fields.CharField(choices=TypeAlerte.choices,max_length=15, null=True)\n    statut = models.BooleanField(default=False) # On envoie le mail ou non\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    created_by = models.ForeignKey(User, null=True, blank=True, related_name=\"ml_created_by\", on_delete=models.RESTRICT)\n    updated_by = models.ForeignKey(User, null=True, blank=True, related_name=\"ml_updated_by\", on_delete=models.RESTRICT)",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "AlimentBaobab",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class AlimentBaobab(models.Model):\n    num_benef = models.CharField(max_length=100, blank=True, null=True)\n    prenom = models.CharField(max_length=100, blank=True, null=True)\n    nom = models.CharField(max_length=100, blank=True, null=True)\n    naissance = models.CharField(max_length=100, blank=True, null=True)\n    sexe = models.CharField(max_length=100, blank=True, null=True)\n    carte = models.CharField(max_length=100, blank=True, null=True)\n    lien = models.CharField(max_length=100, blank=True, null=True)\n    famille = models.CharField(max_length=100, blank=True, null=True)\n    etat = models.CharField(max_length=100, blank=True, null=True)",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "ModelLettreCheque",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class ModelLettreCheque(models.Model):\n    bureau = models.ForeignKey(Bureau, null=True, on_delete=models.RESTRICT)\n    banque = models.ForeignKey(Banque, null=True, on_delete=models.RESTRICT)\n    libelle = models.CharField(max_length=100, blank=False, null=True)\n    model = models.CharField('Modèle', max_length=100, blank=False, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    created_by = models.ForeignKey(User, null=True, related_name=\"model_lettre_cheque_created_by\", on_delete=models.RESTRICT)\n    statut = models.BooleanField(default=True)\n    def __str__(self):",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "BordereauLettreCheque",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class BordereauLettreCheque(models.Model):\n    bureau = models.ForeignKey(Bureau, null=True, on_delete=models.RESTRICT)\n    model_lettre_cheque = models.ForeignKey(ModelLettreCheque, null=True, on_delete=models.RESTRICT)\n    libelle = models.CharField('libellé',max_length=100, blank=False, null=True)\n    nombre = models.IntegerField(null=True, blank=True)\n    fichier = models.FileField(upload_to='bordereau_lettre_cheque', blank=True, null=True)\n    created_at = models.DateTimeField(\"date d’édition\", auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    created_by = models.ForeignKey(User, null=True, related_name=\"bordereau_lettre_cheque_created_by\", on_delete=models.RESTRICT)\n    @property",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "PeriodeVeos",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class PeriodeVeos(models.Model):\n    ID_NPOL = models.CharField(max_length=255, null=True)\n    NUM_POL = models.CharField(max_length=255, null=True)\n    DATEEFFET = models.CharField(max_length=255, null=True)\n    ECHEANCE = models.CharField(max_length=255, null=True)\n    DEBUTEFFETOLD = models.CharField(max_length=255, null=True)\n    FINEFFETOLD = models.TextField(null=True)\n    OBSERVATION = models.TextField(null=True)\n    DUREE = models.CharField(max_length=255, null=True)\n    STATUT_IMPORT = models.BooleanField(default=False)",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "StatExcelWsBoby",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class StatExcelWsBoby(models.Model):\n    libelle_fr = models.CharField(max_length=255, blank=True, null=True, unique=True)\n    libelle_en = models.CharField(max_length=255, blank=True, null=True, unique=True)\n    libelle_pt = models.CharField(max_length=255, blank=True, null=True, unique=True)\n    code_ws = models.CharField(max_length=100, blank=True, null=True, unique=True)\n    status = models.BooleanField(default=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    def __str__(self):\n        return self.libelle_fr",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "ComptePrestataireVeos",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class ComptePrestataireVeos(models.Model):\n    CODE_PRESTATAIRE = models.CharField(max_length=255, null=True)\n    NOM_PRESTATAIRE = models.CharField(max_length=255, null=True)\n    EMAIL = models.CharField(max_length=255, null=True)\n    REMBOURSEMENT_ORDRE_DE = models.CharField(max_length=255, null=True)\n    TYPE_PRESTATAIRE = models.CharField(max_length=255, null=True)\n    SECTEUR_PRESTATAIRE = models.CharField(max_length=255, null=True)\n    OBSERVATION = models.TextField(null=True)\n    STATUT_IMPORT = models.BooleanField(default=False)\n    class Meta:",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "BusinessUnit",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class BusinessUnit(models.Model):\n    libelle = models.CharField(max_length=100, blank=True, null=True, unique=True)\n    status = models.BooleanField(default=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    def __str__(self):\n        return f\"{self.libelle} - {self.status} - {self.created_at} - {self.updated_at}\"\n    class Meta:\n        db_table = 'business_unit'\n        verbose_name = 'Business Unit'",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "Formule",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class Formule(models.Model):\n    code = models.CharField(max_length=10, blank=True, null=True)\n    libelle = models.CharField(max_length=100, blank=True, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    status = models.BooleanField(default=True)\n    def __str__(self):\n        return f'{self.code} - {self.libelle} - {self.status} - {self.created_at}'\n    class Meta:\n        db_table = 'formules'",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "Garantie",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class Garantie(models.Model):\n    code = models.CharField(max_length=10, blank=True, null=True)\n    nom = models.CharField(max_length=100, blank=True, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    deleted_at = models.DateTimeField(auto_now=True)\n    status = models.BooleanField(default=True)\n    def __str__(self):\n        return f\"{self.code} - {self.nom}\"\n    class Meta:",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "GarantieBranche",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class GarantieBranche(models.Model):\n    branche = models.ForeignKey(Branche, null=True, on_delete=models.RESTRICT)\n    garantie = models.ForeignKey(Garantie, null=True, on_delete=models.RESTRICT)\n    status = models.BooleanField(default=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    def __str__(self):\n        return f'{self.created_at}'\n    class Meta:\n        db_table = 'garantie_branche'",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "GarantieFormule",
        "kind": 6,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "class GarantieFormule(models.Model):\n    formule = models.ForeignKey(Formule, null=True, on_delete=models.RESTRICT)\n    garantie = models.ForeignKey(Garantie, null=True, on_delete=models.RESTRICT)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    status = models.BooleanField(default=True)\n    def __str__(self):\n        return f'{self.formule} - {self.created_at}'\n    class Meta:\n        db_table = 'garantie_formule'",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "upload_location_bureau",
        "kind": 2,
        "importPath": "src.configurations.models",
        "description": "src.configurations.models",
        "peekOfCode": "def upload_location_bureau(instance, filename):\n    filebase, extension = filename.rsplit('.', 1)\n    file_name = datetime.datetime.now().strftime('%Y%m%d%H%M%S')\n    return 'bureaux/tarifs/%s.%s' % (file_name, extension)\nclass Bureau(models.Model):\n    CA_TYPE = (\n        ('EMISSION', 'EMISSION'),\n        ('REVERSEMENT', 'REVERSEMENT'),\n    )\n    pays = models.ForeignKey(Pays, null=True, on_delete=models.RESTRICT)",
        "detail": "src.configurations.models",
        "documentation": {}
    },
    {
        "label": "ActeResource",
        "kind": 6,
        "importPath": "src.configurations.resources",
        "description": "src.configurations.resources",
        "peekOfCode": "class ActeResource(resources.ModelResource):\n    class Meta:\n        model = Acte\n        fields = ('name',)\n        exclude = ('id',)\nclass AffectionResource(resources.ModelResource):\n    class Meta:\n        model = Affection\n        fields = ('name',)\n        exclude = ('id',)   ",
        "detail": "src.configurations.resources",
        "documentation": {}
    },
    {
        "label": "AffectionResource",
        "kind": 6,
        "importPath": "src.configurations.resources",
        "description": "src.configurations.resources",
        "peekOfCode": "class AffectionResource(resources.ModelResource):\n    class Meta:\n        model = Affection\n        fields = ('name',)\n        exclude = ('id',)   \nclass PrestataireResource(resources.ModelResource):\n    class Meta:\n        model = Prestataire\n        fields = ('name',)\n        exclude = ('id',) ",
        "detail": "src.configurations.resources",
        "documentation": {}
    },
    {
        "label": "PrestataireResource",
        "kind": 6,
        "importPath": "src.configurations.resources",
        "description": "src.configurations.resources",
        "peekOfCode": "class PrestataireResource(resources.ModelResource):\n    class Meta:\n        model = Prestataire\n        fields = ('name',)\n        exclude = ('id',) \nclass RubriqueResource(resources.ModelResource):\n    class Meta:\n        model = Prestataire\n        fields = ('name',)\n        exclude = ('id',)",
        "detail": "src.configurations.resources",
        "documentation": {}
    },
    {
        "label": "RubriqueResource",
        "kind": 6,
        "importPath": "src.configurations.resources",
        "description": "src.configurations.resources",
        "peekOfCode": "class RubriqueResource(resources.ModelResource):\n    class Meta:\n        model = Prestataire\n        fields = ('name',)\n        exclude = ('id',)",
        "detail": "src.configurations.resources",
        "documentation": {}
    },
    {
        "label": "handle_login",
        "kind": 2,
        "importPath": "src.configurations.signals",
        "description": "src.configurations.signals",
        "peekOfCode": "def handle_login(sender, request, user, **kwargs):\n    pprint(\"handle_login\")\n    pprint(user)\n    # Get the user's current password hash\n    current_password_hash = user.password\n    # Check if the password hash has changed\n    if user.check_password(current_password_hash):\n        # Password has not changed\n        pprint(\"Password has not changed\")\n        return",
        "detail": "src.configurations.signals",
        "documentation": {}
    },
    {
        "label": "password_changed",
        "kind": 5,
        "importPath": "src.configurations.signals",
        "description": "src.configurations.signals",
        "peekOfCode": "password_changed = Signal()\n@receiver(user_logged_in)\ndef handle_login(sender, request, user, **kwargs):\n    pprint(\"handle_login\")\n    pprint(user)\n    # Get the user's current password hash\n    current_password_hash = user.password\n    # Check if the password hash has changed\n    if user.check_password(current_password_hash):\n        # Password has not changed",
        "detail": "src.configurations.signals",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "src.configurations.urls",
        "description": "src.configurations.urls",
        "peekOfCode": "urlpatterns = [\n    #path('generate_numero_famille_all/', views.generate_numero_famille_all, name='generate_numero_famille_all'),\n    #path('generer_nombre_famille_du_mois_all/', views.generer_nombre_famille_du_mois_all, name='generer_nombre_famille_du_mois_all'),\n    #path('create_mouvements_incorporation_aliments/', views.create_mouvements_incorporation_aliments, name='create_mouvements_incorporation_aliments'),\n    #path('create_mouvements_sortie_aliments/', views.create_mouvements_sortie_aliments, name='create_mouvements_sortie_aliments'),\n    path('recalculer_parts_sinistres_sucaf/', views.recalculer_parts_sinistres_sucaf, name='recalculer_parts_sinistres_sucaf'),\n    path('corriger_param_produit_compagnie/', views.corriger_param_produit_compagnie, name='corriger_param_produit_compagnie'),\n    path('update_matricule/', views.update_matricule, name='update_matricule'),\n    #path('openai_complete/', openai_complete, name='openai_complete'),\n    path('disponibilite_upd/', views.disponibilite_upd, name='disponibilite_upd'),",
        "detail": "src.configurations.urls",
        "documentation": {}
    },
    {
        "label": "TarifsView",
        "kind": 6,
        "importPath": "src.configurations.views",
        "description": "src.configurations.views",
        "peekOfCode": "class TarifsView(PermissionRequiredMixin, TemplateView):\n    permission_required = \"configurations.view_prestataire\"\n    template_name = 'tarifs/tarifs.html'\n    model = Prestataire\n    def get(self, request, *args, **kwargs):\n        context_original = self.get_context_data(**kwargs)\n        rubriques = Rubrique.objects.filter(status=True)\n        regroupements_actes = RegroupementActe.objects.filter(status=True)\n        #\n        tarifs_exists = Tarif.objects.filter(bureau=self.request.user.bureau).exists()",
        "detail": "src.configurations.views",
        "documentation": {}
    },
    {
        "label": "PrestatairesView",
        "kind": 6,
        "importPath": "src.configurations.views",
        "description": "src.configurations.views",
        "peekOfCode": "class PrestatairesView(PermissionRequiredMixin, TemplateView):\n    permission_required = \"configurations.view_prestataire\"\n    template_name = 'prestataires/prestataires.html'\n    model = Prestataire\n    def get(self, request, *args, **kwargs):\n        context_original = self.get_context_data(**kwargs)\n        secteurs = Secteur.objects.all()\n        bureaux = Bureau.objects.filter(id=request.user.bureau.pk)\n        types_prestataires = TypePrestataire.objects.all()\n        types_etablissements = TypeEtablissement.objects.all()",
        "detail": "src.configurations.views",
        "documentation": {}
    },
    {
        "label": "DetailsPrestatairesView",
        "kind": 6,
        "importPath": "src.configurations.views",
        "description": "src.configurations.views",
        "peekOfCode": "class DetailsPrestatairesView(TemplateView):\n    permission_required = \"production.view_prestataires\"\n    template_name = 'prestataires/prestataire_details.html'\n    model = Prestataire\n    def get(self, request, prestataire_id, *args, **kwargs):\n        context_original = self.get_context_data(**kwargs)\n        prestataire = Prestataire.objects.filter(id=prestataire_id, bureau=request.user.bureau).first()\n        if prestataire:\n            clients = Client.objects.all()\n            specialities = Specialite.objects.all()",
        "detail": "src.configurations.views",
        "documentation": {}
    },
    {
        "label": "ReseauxSoinsView",
        "kind": 6,
        "importPath": "src.configurations.views",
        "description": "src.configurations.views",
        "peekOfCode": "class ReseauxSoinsView(PermissionRequiredMixin, TemplateView):\n    permission_required = \"configurations.view_prestataire\"\n    template_name = 'reseaux_soins/reseaux_soins.html'\n    model = Prestataire\n    def get(self, request, *args, **kwargs):\n        context_original = self.get_context_data(**kwargs)\n        secteurs = Secteur.objects.all()\n        bureaux = Bureau.objects.filter(id=request.user.bureau.pk)\n        types_prestataires = TypePrestataire.objects.all()\n        types_etablissements = TypeEtablissement.objects.all()",
        "detail": "src.configurations.views",
        "documentation": {}
    },
    {
        "label": "DetailsReseauSoinView",
        "kind": 6,
        "importPath": "src.configurations.views",
        "description": "src.configurations.views",
        "peekOfCode": "class DetailsReseauSoinView(PermissionRequiredMixin, TemplateView):\n    permission_required = \"configurations.view_prestataire\"\n    template_name = 'reseaux_soins/reseau_soin_details.html'\n    model = ReseauSoin\n    def get(self, request, reseau_soin_id, *args, **kwargs):\n        context_original = self.get_context_data(**kwargs)\n        reseau_soin = ReseauSoin.objects.get(id=reseau_soin_id, status=True)\n        prestataires = PrestataireReseauSoin.objects.filter(reseau_soin_id=reseau_soin_id)\n        types_prestataires = TypePrestataire.objects.all()\n        context_perso = {",
        "detail": "src.configurations.views",
        "documentation": {}
    },
    {
        "label": "GroupePermissionsView",
        "kind": 6,
        "importPath": "src.configurations.views",
        "description": "src.configurations.views",
        "peekOfCode": "class GroupePermissionsView(TemplateView):\n    template_name = 'groupes/groupes_permissions.html'\n    model = Permission\n    def get(self, request, groupe_id, *args, **kwargs):\n        context_original = self.get_context_data(**kwargs)\n        groupes = AuthGroup.objects.all()\n        permissions = Permission.objects.all().order_by('content_type_id')\n        context_perso = {\n            'groupes': groupes,\n            'permissions': permissions",
        "detail": "src.configurations.views",
        "documentation": {}
    },
    {
        "label": "WsBobyView",
        "kind": 6,
        "importPath": "src.configurations.views",
        "description": "src.configurations.views",
        "peekOfCode": "class WsBobyView(TemplateView):\n    # permission_required = \"configurations.view_prestataire\"\n    template_name = 'ws_bobys/bobys.html'\n    model = WsBoby\n    def get_context_data(self, **kwargs):\n        return {\n            **super().get_context_data(**kwargs),\n            **admin.site.each_context(self.request),\n            \"opts\": self.model._meta,\n        }",
        "detail": "src.configurations.views",
        "documentation": {}
    },
    {
        "label": "WsBobyCreateView",
        "kind": 6,
        "importPath": "src.configurations.views",
        "description": "src.configurations.views",
        "peekOfCode": "class WsBobyCreateView(TemplateView):\n    # permission_required = \"configurations.view_prestataire\"\n    template_name = 'ws_bobys/add_boby.html'\n    model = WsBoby\n    def get_context_data(self, **kwargs):\n        return {\n            **super().get_context_data(**kwargs),\n            **admin.site.each_context(self.request),\n            \"opts\": self.model._meta,\n        }",
        "detail": "src.configurations.views",
        "documentation": {}
    },
    {
        "label": "WsBobyEditeView",
        "kind": 6,
        "importPath": "src.configurations.views",
        "description": "src.configurations.views",
        "peekOfCode": "class WsBobyEditeView(TemplateView):\n    # permission_required = \"configurations.view_prestataire\"\n    template_name = 'ws_bobys/edite_boby.html'\n    model = WsBoby\n    def get(self, request, ws_boby_id, *args, **kwargs):\n        context_original = self.get_context_data(**kwargs)\n        ws_boby = WsBoby.objects.get(id=ws_boby_id)\n        context_perso = {\n            'ws_boby': ws_boby\n        }",
        "detail": "src.configurations.views",
        "documentation": {}
    },
    {
        "label": "ActesView",
        "kind": 6,
        "importPath": "src.configurations.views",
        "description": "src.configurations.views",
        "peekOfCode": "class ActesView(PermissionRequiredMixin, TemplateView):\n    permission_required = \"configurations.view_acte\"\n    template_name = 'acte/actes.html'\n    model = Acte\n    def get(self, request, *args, **kwargs):\n        context_original = self.get_context_data(**kwargs)\n        rubriques = Rubrique.objects.filter(status=True)\n        liste_regroupements_actes = RegroupementActe.objects.filter(status=True)\n        regroupements_actes = {\n            rubrique.pk: [",
        "detail": "src.configurations.views",
        "documentation": {}
    },
    {
        "label": "ConnectedUsersView",
        "kind": 6,
        "importPath": "src.configurations.views",
        "description": "src.configurations.views",
        "peekOfCode": "class ConnectedUsersView(PermissionRequiredMixin, TemplateView):\n    permission_required = \"configurations.view_prestataire\"\n    template_name = 'users/connected_users.html'\n    model = User\n    def format_duration(self, duration):\n        if duration is None:\n            return \"0:00:00\"\n        total_seconds = int(duration.total_seconds())\n        hours, remainder = divmod(total_seconds, 3600)\n        minutes, seconds = divmod(remainder, 60)",
        "detail": "src.configurations.views",
        "documentation": {}
    },
    {
        "label": "DbSuperAdminQueryView",
        "kind": 6,
        "importPath": "src.configurations.views",
        "description": "src.configurations.views",
        "peekOfCode": "class DbSuperAdminQueryView(TemplateView):\n    template_name = 'db_query/db_super_admin_query.html'\n    model = Aliment\n    def get(self, request, *args, **kwargs):\n        # TODO , filtrer sur le bureau : prestataire__bureau=request.user.bureau\n        query_datas = [\n            {\n                \"query_label\": \"MODIFICATION DE DATE D'ENTREE DE BÉNÉFICIAIRE\",\n                \"query_name\": \"BENEF_ENTREE_MODIF\",\n            },",
        "detail": "src.configurations.views",
        "documentation": {}
    },
    {
        "label": "generate_numero_famille_all",
        "kind": 2,
        "importPath": "src.configurations.views",
        "description": "src.configurations.views",
        "peekOfCode": "def generate_numero_famille_all(request):\n    aliments = Aliment.objects.filter(qualite_beneficiaire__code=\"AD\", numero_famille__isnull=True)\n    if aliments:\n        for aliment in aliments:\n            numero_famille = generate_numero_famille_for_existing_aliment(aliment)\n            aliment.numero_famille = numero_famille\n            aliment.save()\n        response = {\n            'statut': 1,\n            'message': str(aliments.count()) + ' NUMEROS DE FAMILLES GENERES AVEC SUCCÈS'",
        "detail": "src.configurations.views",
        "documentation": {}
    },
    {
        "label": "generer_nombre_famille_du_mois_all",
        "kind": 2,
        "importPath": "src.configurations.views",
        "description": "src.configurations.views",
        "peekOfCode": "def generer_nombre_famille_du_mois_all(request):\n    aliments = Aliment.objects.filter(qualite_beneficiaire__code=\"AD\", numero_famille_du_mois__isnull=True)\n    if aliments:\n        for aliment in aliments:\n            aliment.numero_famille_du_mois = generer_nombre_famille_du_mois_for_existing_aliment(aliment)\n            aliment.save()\n        response = {\n            'statut': 1,\n            'message': str(aliments.count()) + ' NOMBRE FAMILLES DU MOIS GENERES AVEC SUCCÈS'\n        }",
        "detail": "src.configurations.views",
        "documentation": {}
    },
    {
        "label": "create_mouvements_incorporation_aliments",
        "kind": 2,
        "importPath": "src.configurations.views",
        "description": "src.configurations.views",
        "peekOfCode": "def create_mouvements_incorporation_aliments(request):\n    aliments_formules = AlimentFormule.objects.filter(statut_validite=StatutValidite.VALIDE)\n    cpt = 0\n    if aliments_formules:\n        for af in aliments_formules:\n            if af.formule and af.formule.police:\n                police = af.formule.police\n                aliment = af.aliment\n                date_mouvement = af.date_debut\n                motif = \"Incorporation\"",
        "detail": "src.configurations.views",
        "documentation": {}
    },
    {
        "label": "create_mouvements_sortie_aliments",
        "kind": 2,
        "importPath": "src.configurations.views",
        "description": "src.configurations.views",
        "peekOfCode": "def create_mouvements_sortie_aliments(request):\n    aliments_formules = AlimentFormule.objects.filter(statut_validite=StatutValidite.VALIDE)\n    cpt = 0\n    if aliments_formules:\n        for af in aliments_formules:\n            if af.formule and af.formule.police:\n                if af.aliment.date_sortie:\n                    police = af.formule.police\n                    aliment = af.aliment\n                    date_mouvement = af.aliment.date_sortie",
        "detail": "src.configurations.views",
        "documentation": {}
    },
    {
        "label": "recalculer_parts_sinistres_sucaf",
        "kind": 2,
        "importPath": "src.configurations.views",
        "description": "src.configurations.views",
        "peekOfCode": "def recalculer_parts_sinistres_sucaf(request):\n    sinistres = Sinistre.objects.filter(police_id=207, type_prefinancement_id=3, dossier_sinistre_id__isnull=False)\n    #dd(sinistres)\n    cpt = 0\n    if sinistres:\n        for sinistre in sinistres:\n            taux_couverture = sinistre.formulegarantie.taux_couverture\n            taux_tm = sinistre.formulegarantie.taux_tm\n            part_compagnie = Decimal(taux_couverture/100) * sinistre.frais_reel - sinistre.depassement\n            part_assure = Decimal(taux_tm/100) * sinistre.frais_reel + sinistre.depassement",
        "detail": "src.configurations.views",
        "documentation": {}
    },
    {
        "label": "corriger_param_produit_compagnie",
        "kind": 2,
        "importPath": "src.configurations.views",
        "description": "src.configurations.views",
        "peekOfCode": "def corriger_param_produit_compagnie(request):\n    dd(\"DEJA EXECUTE, PAS BESOIN DE REEXECUTER, CONSERVER POUR UN USAGE ULTERIEUR\")\n    '''\n    #marquer les compagnies qui ont des params taux différents\n    compagnies = Compagnie.objects.all().order_by('id')\n    cpt = 0\n    for compagnie in compagnies:\n        pprint(f'------ TRAITEMENT DES PARAMS DE LA COMPAGNIE: {compagnie.nom} (id={compagnie.id}) ------')\n        params = ParamProduitCompagnie.objects.filter(compagnie=compagnie).order_by('id')\n        pprint('params.count()')",
        "detail": "src.configurations.views",
        "documentation": {}
    },
    {
        "label": "update_matricule",
        "kind": 2,
        "importPath": "src.configurations.views",
        "description": "src.configurations.views",
        "peekOfCode": "def update_matricule(request):\n    #marquer les compagnies qui ont des params taux différents\n    aliments_matricules = AlimentMatricule.objects.all().order_by('id')\n    if aliments_matricules:\n        for am in aliments_matricules:\n            carte = Carte.objects.filter(numero=am.NUMERO_CARTE).order_by('id')\n            aliment = carte.aliment\n            aliment.matricule_employe = am.MATRICULE\n            aliment.save()\n        response = {",
        "detail": "src.configurations.views",
        "documentation": {}
    },
    {
        "label": "correction_affections",
        "kind": 2,
        "importPath": "src.configurations.views",
        "description": "src.configurations.views",
        "peekOfCode": "def correction_affections(request):\n    affections = Affection.objects.all()\n    #dd(affections)\n    cpt = 0\n    if affections:\n        for affection in affections:\n            cpt = cpt + 1\n        response = {\n            'statut': 1,\n            'message': str(cpt) + \" AFFECTIONS CORRIGEES AVEC SUCCÈS\"",
        "detail": "src.configurations.views",
        "documentation": {}
    },
    {
        "label": "disponibilite_upd",
        "kind": 2,
        "importPath": "src.configurations.views",
        "description": "src.configurations.views",
        "peekOfCode": "def disponibilite_upd(request):\n    message = {}\n    message['heure'] = \"LE SERVEUR PREND EN COMPTES LES CHANGEMENTS EFFECTUÉS DANS LE CODE - 19/12/2023 21:00\"\n    dd(message)\ndef redirecttohome(request):\n    return redirect('/')\ndef clear_cache(request):\n    cache.clear()\n    return redirect('/')\n@login_required",
        "detail": "src.configurations.views",
        "documentation": {}
    },
    {
        "label": "redirecttohome",
        "kind": 2,
        "importPath": "src.configurations.views",
        "description": "src.configurations.views",
        "peekOfCode": "def redirecttohome(request):\n    return redirect('/')\ndef clear_cache(request):\n    cache.clear()\n    return redirect('/')\n@login_required\ndef custom_password_change(request):\n    if request.method == 'POST':\n        form = PasswordChangeForm(user=request.user, data=request.POST)\n        if form.is_valid():",
        "detail": "src.configurations.views",
        "documentation": {}
    },
    {
        "label": "clear_cache",
        "kind": 2,
        "importPath": "src.configurations.views",
        "description": "src.configurations.views",
        "peekOfCode": "def clear_cache(request):\n    cache.clear()\n    return redirect('/')\n@login_required\ndef custom_password_change(request):\n    if request.method == 'POST':\n        form = PasswordChangeForm(user=request.user, data=request.POST)\n        if form.is_valid():\n            user = form.save()\n            # Additional logic after password change if needed",
        "detail": "src.configurations.views",
        "documentation": {}
    },
    {
        "label": "custom_password_change",
        "kind": 2,
        "importPath": "src.configurations.views",
        "description": "src.configurations.views",
        "peekOfCode": "def custom_password_change(request):\n    if request.method == 'POST':\n        form = PasswordChangeForm(user=request.user, data=request.POST)\n        if form.is_valid():\n            user = form.save()\n            # Additional logic after password change if needed\n            user.password_type = PasswordType.CUSTOM\n            user.save()\n            pprint(\"Password has changed\")\n            return redirect('/')  # Redirect to password change success page",
        "detail": "src.configurations.views",
        "documentation": {}
    },
    {
        "label": "set_bureau",
        "kind": 2,
        "importPath": "src.configurations.views",
        "description": "src.configurations.views",
        "peekOfCode": "def set_bureau(request):\n    if request.method == 'POST':\n        user = request.user\n        if user.is_superuser or user.is_admin_group:\n            bureau_id = request.POST.get('bureau_id')\n            bureau = Bureau.objects.get(pk=bureau_id)\n            user.bureau = bureau\n            user.save()\n    # Get the previous URL from the 'HTTP_REFERER' header, if available\n    previous_page = request.META.get('HTTP_REFERER')",
        "detail": "src.configurations.views",
        "documentation": {}
    },
    {
        "label": "tarifs_datatable",
        "kind": 2,
        "importPath": "src.configurations.views",
        "description": "src.configurations.views",
        "peekOfCode": "def tarifs_datatable(request):\n    items_per_page = 10\n    page_number = request.GET.get('page')\n    start = int(request.GET.get('start', 0))\n    length = int(request.GET.get('length', items_per_page))\n    sort_column_index = int(request.GET.get('order[0][column]'))\n    sort_direction = request.GET.get('order[0][dir]')\n    search_rubrique = request.GET.get('search_rubrique', '')\n    search_code = request.GET.get('search_code', '')\n    search_libelle = request.GET.get('search_libelle', '')",
        "detail": "src.configurations.views",
        "documentation": {}
    },
    {
        "label": "popup_detail_tarif",
        "kind": 2,
        "importPath": "src.configurations.views",
        "description": "src.configurations.views",
        "peekOfCode": "def popup_detail_tarif(request, tarif_id):\n    tarif = Tarif.objects.get(id=tarif_id)\n    return render(request, 'tarifs/modal_details_tarif.html', {'tarif': tarif})\ndef add_tarif(request):\n    '''\n    if request.method == 'POST':\n        name = request.POST.get('name')\n        lettre_cle_public_hg = models.CharField(max_length=50, blank=True, null=True)\n        coef_public_hg = models.CharField(max_length=50, blank=True, null=True)\n        pu_public_hg = models.IntegerField(null=True)",
        "detail": "src.configurations.views",
        "documentation": {}
    },
    {
        "label": "add_tarif",
        "kind": 2,
        "importPath": "src.configurations.views",
        "description": "src.configurations.views",
        "peekOfCode": "def add_tarif(request):\n    '''\n    if request.method == 'POST':\n        name = request.POST.get('name')\n        lettre_cle_public_hg = models.CharField(max_length=50, blank=True, null=True)\n        coef_public_hg = models.CharField(max_length=50, blank=True, null=True)\n        pu_public_hg = models.IntegerField(null=True)\n        cout_public_hg = models.IntegerField(null=True)\n        lettre_cle_public_chu = models.CharField(max_length=50, blank=True, null=True)\n        coef_public_chu = models.CharField(max_length=50, blank=True, null=True)",
        "detail": "src.configurations.views",
        "documentation": {}
    },
    {
        "label": "tarifs_prestataire_datatable",
        "kind": 2,
        "importPath": "src.configurations.views",
        "description": "src.configurations.views",
        "peekOfCode": "def tarifs_prestataire_datatable(request, prestataire_id):\n    items_per_page = 10\n    page_number = request.GET.get('page')\n    start = int(request.GET.get('start', 0))\n    length = int(request.GET.get('length', items_per_page))\n    sort_column_index = int(request.GET.get('order[0][column]'))\n    sort_direction = request.GET.get('order[0][dir]')\n    search_rubrique = request.GET.get('search_rubrique', '')\n    search_code = request.GET.get('search_code', '')\n    search_libelle = request.GET.get('search_libelle', '')",
        "detail": "src.configurations.views",
        "documentation": {}
    },
    {
        "label": "generate_modele_tarifs_excel",
        "kind": 2,
        "importPath": "src.configurations.views",
        "description": "src.configurations.views",
        "peekOfCode": "def generate_modele_tarifs_excel(request, prestataire_id):\n    prestataire = Prestataire.objects.get(id=prestataire_id)\n    # Données à inclure dans le DataFrame\n    actes = Acte.objects.filter(type_acte__code=\"acte\", status=True).order_by('rubrique_id')\n    # Créer un Workbook et accéder à la première feuille\n    wb = Workbook()\n    ws = wb.active\n    # Données à inclure dans le DataFrame\n    data = {\n        'CODE_RUBRIQUE': [],",
        "detail": "src.configurations.views",
        "documentation": {}
    },
    {
        "label": "import_tarif_pestataire",
        "kind": 2,
        "importPath": "src.configurations.views",
        "description": "src.configurations.views",
        "peekOfCode": "def import_tarif_pestataire(request, prestataire_id):\n    # try:\n    # Charger le fichier Excel depuis la requête\n    file = request.FILES['fichier_import_tarif']\n    # Lire le fichier Excel avec pandas\n    df = pd.read_excel(file)\n    rows_count = 0\n    # Parcourir les lignes du DataFrame\n    for index, row in df.iterrows():\n        # Récupérer le code de l'acte",
        "detail": "src.configurations.views",
        "documentation": {}
    },
    {
        "label": "prestataires_datatable",
        "kind": 2,
        "importPath": "src.configurations.views",
        "description": "src.configurations.views",
        "peekOfCode": "def prestataires_datatable(request):\n    items_per_page = 10\n    page_number = request.GET.get('page')\n    start = int(request.GET.get('start', 0))\n    length = int(request.GET.get('length', items_per_page))\n    sort_column_index = int(request.GET.get('order[0][column]'))\n    sort_direction = request.GET.get('order[0][dir]')\n    search_nom = request.GET.get('search_nom', '')\n    search_code = request.GET.get('search_code', '')\n    search_type = request.GET.get('search_type', '')",
        "detail": "src.configurations.views",
        "documentation": {}
    },
    {
        "label": "export_prestaitaires",
        "kind": 2,
        "importPath": "src.configurations.views",
        "description": "src.configurations.views",
        "peekOfCode": "def export_prestaitaires(request):\n    if request.method == 'POST':\n        # Récupérer les paramètres de filtre\n        search_nom = request.GET.get('search_nom', '')\n        search_code = request.GET.get('search_code', '')\n        search_type = request.GET.get('search_type', '')\n        search_value = request.GET.get('search[value]', '')\n        # Filtrer les données selon les paramètres\n        prestataires = Prestataire.objects.filter(bureau=request.user.bureau)\n        if search_nom:",
        "detail": "src.configurations.views",
        "documentation": {}
    },
    {
        "label": "add_prestataire",
        "kind": 2,
        "importPath": "src.configurations.views",
        "description": "src.configurations.views",
        "peekOfCode": "def add_prestataire(request):\n    if request.method == 'POST':\n        name = request.POST.get('name')\n        rb_ordre = request.POST.get('rb_ordre')\n        code = request.POST.get('code')\n        telephone = request.POST.get('telephone')\n        fax = request.POST.get('fax')\n        email = request.POST.get('email')\n        fax = request.POST.get('fax')\n        ville = request.POST.get('ville')",
        "detail": "src.configurations.views",
        "documentation": {}
    },
    {
        "label": "popup_modifier_prestataire",
        "kind": 2,
        "importPath": "src.configurations.views",
        "description": "src.configurations.views",
        "peekOfCode": "def popup_modifier_prestataire(request, prestataire_id):\n    prestataire = Prestataire.objects.get(id=prestataire_id)\n    secteurs = Secteur.objects.all()\n    types_prestataires = TypePrestataire.objects.all()\n    types_etablissements = TypeEtablissement.objects.all()\n    return render(request, 'prestataires/modal_modifier_prestataire.html', {\n        'prestataire': prestataire,\n        'secteurs': secteurs,\n        'types_prestataires': types_prestataires,\n        'types_etablissements': types_etablissements",
        "detail": "src.configurations.views",
        "documentation": {}
    },
    {
        "label": "update_prestataire",
        "kind": 2,
        "importPath": "src.configurations.views",
        "description": "src.configurations.views",
        "peekOfCode": "def update_prestataire(request, prestataire_id):\n    if request.method == 'POST':\n        prestataire = Prestataire.objects.filter(id=prestataire_id).first()\n        type_prestataire_id = request.POST.get('type_prestataire_id')\n        secteur_id = request.POST.get('secteur_id')\n        type_etablissement_id = request.POST.get('type_etablissement_id')\n        prestataire.name = request.POST.get('name')\n        prestataire.rb_ordre = request.POST.get('rb_ordre')\n        prestataire.telephone = request.POST.get('telephone')\n        prestataire.email = request.POST.get('email')",
        "detail": "src.configurations.views",
        "documentation": {}
    },
    {
        "label": "add_reseau_soin_prestataire",
        "kind": 2,
        "importPath": "src.configurations.views",
        "description": "src.configurations.views",
        "peekOfCode": "def add_reseau_soin_prestataire(request, prestataire_id):\n    if request.method == 'POST':\n        reseaux_soins_ids = request.POST.getlist('reseaux_soins_ids')\n        reseaux_soins = ReseauSoin.objects.filter(id__in=reseaux_soins_ids)\n        # enregistrer ses réseaux de soins\n        for reseau_soin in reseaux_soins:\n            prs = PrestataireReseauSoin(reseau_soin=reseau_soin, prestataire_id=prestataire_id, created_by=request.user,\n                                        date_integration=datetime.datetime.now(tz=timezone.utc))\n            prs.save()\n        response = {",
        "detail": "src.configurations.views",
        "documentation": {}
    },
    {
        "label": "retirer_reseau_soin_prestataire",
        "kind": 2,
        "importPath": "src.configurations.views",
        "description": "src.configurations.views",
        "peekOfCode": "def retirer_reseau_soin_prestataire(request, prs_id):\n    if request.method == 'POST':\n        # enregistrer ses réseaux de soins\n        prs = PrestataireReseauSoin.objects.get(id=prs_id)\n        prs.statut_validite = StatutValidite.CLOTURE\n        prs.date_retrait = datetime.datetime.now(tz=timezone.utc)\n        prs.removed_by = request.user\n        prs.save()\n        response = {\n            'statut': 1,",
        "detail": "src.configurations.views",
        "documentation": {}
    },
    {
        "label": "add_prescripteur",
        "kind": 2,
        "importPath": "src.configurations.views",
        "description": "src.configurations.views",
        "peekOfCode": "def add_prescripteur(request):\n    if request.method == 'POST':\n        pprint(request.POST)\n        nom = request.POST.get('nom')\n        prenoms = request.POST.get('prenoms')\n        numero_ordre = request.POST.get('numero_ordre')\n        email = request.POST.get('email')\n        telephone = request.POST.get('telephone')\n        prestataire_id = request.POST.get('prestataire_id')\n        specialite_id = request.POST.get('specialite_id')",
        "detail": "src.configurations.views",
        "documentation": {}
    },
    {
        "label": "import_prescripteurs",
        "kind": 2,
        "importPath": "src.configurations.views",
        "description": "src.configurations.views",
        "peekOfCode": "def import_prescripteurs(request, prestataire_id):\n    if request.method == 'POST':\n        # get file and use excel to import in prescripteur table\n        fichier = request.FILES['fichier_import_prescripteurs']\n        fs = FileSystemStorage(location='prestataires/upload_prescripteurs/')\n        file_name_renamed = fichier.name.replace(\" \", \"_\")\n        filename = fs.save(file_name_renamed, fichier)\n        uploaded_file_url = fs.url(filename)\n        uploaded_file_full_path = fs.path(filename)\n        prestataire = Prestataire.objects.get(id=prestataire_id)",
        "detail": "src.configurations.views",
        "documentation": {}
    },
    {
        "label": "prescripteurs_by_prestataire",
        "kind": 2,
        "importPath": "src.configurations.views",
        "description": "src.configurations.views",
        "peekOfCode": "def prescripteurs_by_prestataire(request, prestataire_id):\n    prestataire_prescripteur = PrescripteurPrestataire.objects.filter(prestataire_id=prestataire_id)\n    prescripteurs = []\n    for pp in prestataire_prescripteur:\n        if pp.prescripteur not in prescripteurs:\n            prescripteurs.append(pp.prescripteur)\n    prescripteurs_serialize = serializers.serialize('json', prescripteurs)\n    return HttpResponse(prescripteurs_serialize, content_type='application/json')\n# PRESCRIPTEUR\ndef prescripteurs_prestataires_datatable(request, prestataire_id):",
        "detail": "src.configurations.views",
        "documentation": {}
    },
    {
        "label": "prescripteurs_prestataires_datatable",
        "kind": 2,
        "importPath": "src.configurations.views",
        "description": "src.configurations.views",
        "peekOfCode": "def prescripteurs_prestataires_datatable(request, prestataire_id):\n    items_per_page = 10\n    page_number = request.GET.get('page')\n    start = int(request.GET.get('start', 0))\n    length = int(request.GET.get('length', items_per_page))\n    sort_column_index = int(request.GET.get('order[0][column]'))\n    sort_direction = request.GET.get('order[0][dir]')\n    #   search_nom = request.GET.get('search_nom', '')\n    search_numero_ordre = request.GET.get('search_numero_ordre', '')\n    search_specialite = request.GET.get('search_specialite', '')",
        "detail": "src.configurations.views",
        "documentation": {}
    },
    {
        "label": "popup_modifier_prescripteur",
        "kind": 2,
        "importPath": "src.configurations.views",
        "description": "src.configurations.views",
        "peekOfCode": "def popup_modifier_prescripteur(request, prescripteur_id):\n    prescripteur = Prescripteur.objects.filter(id=prescripteur_id).first()\n    specialites = Specialite.objects.all()\n    prestataires = Prestataire.objects.filter(status=True, bureau=request.user.bureau)\n    return render(request, 'prestataires/modal_modifier_prescripteur.html', {\n        'prescripteur':prescripteur,\n        'specialites':specialites,\n        'prestataires': prestataires\n    })\ndef update_prescripteur(request, prescripteur_id):",
        "detail": "src.configurations.views",
        "documentation": {}
    },
    {
        "label": "update_prescripteur",
        "kind": 2,
        "importPath": "src.configurations.views",
        "description": "src.configurations.views",
        "peekOfCode": "def update_prescripteur(request, prescripteur_id):\n    if request.method == 'POST':\n        prescripteur = Prescripteur.objects.filter(id=prescripteur_id).first()\n        #   email = request.POST.get('email')\n        specialite_id = request.POST.get('specialite_id')\n        prescripteur.nom = request.POST.get('nom')\n        prescripteur.prenoms = request.POST.get('prenoms')\n        prescripteur.numero_ordre = request.POST.get('numero_ordre')\n        prescripteur.telephone = request.POST.get('telephone')\n        prescripteur.specialite_id = specialite_id",
        "detail": "src.configurations.views",
        "documentation": {}
    },
    {
        "label": "retirer_prescripteur_prestataire",
        "kind": 2,
        "importPath": "src.configurations.views",
        "description": "src.configurations.views",
        "peekOfCode": "def retirer_prescripteur_prestataire(request, prestataire_id, prescripteur_id):\n    if request.method == 'POST':\n        prescripteur_prestataire = PrescripteurPrestataire.objects.filter(prescripteur_id=prescripteur_id,\n                                                                  prestataire_id=prestataire_id,\n                                                                  statut_validite=StatutValidite.VALIDE).update(\n            statut_validite=StatutValidite.CLOTURE,\n            deleted_by=request.user,\n            deleted_at=datetime.datetime.now(tz=timezone.utc),\n        )\n        response = {",
        "detail": "src.configurations.views",
        "documentation": {}
    },
    {
        "label": "reseauxsoins_datatable",
        "kind": 2,
        "importPath": "src.configurations.views",
        "description": "src.configurations.views",
        "peekOfCode": "def reseauxsoins_datatable(request):\n    items_per_page = 10\n    page_number = request.GET.get('page')\n    start = int(request.GET.get('start', 0))\n    length = int(request.GET.get('length', items_per_page))\n    sort_column_index = int(request.GET.get('order[0][column]'))\n    sort_direction = request.GET.get('order[0][dir]')\n    search_value = request.GET.get('search[value]', '')\n    queryset = ReseauSoin.objects.filter(status=True, bureau=request.user.bureau)\n    if search_value:",
        "detail": "src.configurations.views",
        "documentation": {}
    },
    {
        "label": "add_reseau_soin",
        "kind": 2,
        "importPath": "src.configurations.views",
        "description": "src.configurations.views",
        "peekOfCode": "def add_reseau_soin(request):\n    if request.method == 'POST':\n        name = request.POST.get('name')\n        if request.user.bureau:\n            cpt_reseau_soin_bureau = ReseauSoin.objects.filter(bureau=request.user.bureau).count() + 1\n            # Mettre a jour le code\n            code_bureau = request.user.bureau.code\n            code = str(code_bureau) + 'RXS' + '-' + str(cpt_reseau_soin_bureau).zfill(4)\n            reseau_soin = ReseauSoin.objects.create(\n                created_by=request.user,",
        "detail": "src.configurations.views",
        "documentation": {}
    },
    {
        "label": "popup_modifier_reseau_soin",
        "kind": 2,
        "importPath": "src.configurations.views",
        "description": "src.configurations.views",
        "peekOfCode": "def popup_modifier_reseau_soin(request, reseau_soin_id):\n    reseau_soin = ReseauSoin.objects.get(id=reseau_soin_id)\n    prestataires = Prestataire.objects.filter(bureau=request.user.bureau)\n    return render(request, 'reseaux_soins/modal_modifier_reseau_soin.html', {\n        'reseau_soin': reseau_soin,\n        'prestataires': prestataires\n    })\n# TO_DO_ISMAEL\ndef update_reseau_soin(request, reseau_soin_id):\n    if request.method == 'POST':",
        "detail": "src.configurations.views",
        "documentation": {}
    },
    {
        "label": "update_reseau_soin",
        "kind": 2,
        "importPath": "src.configurations.views",
        "description": "src.configurations.views",
        "peekOfCode": "def update_reseau_soin(request, reseau_soin_id):\n    if request.method == 'POST':\n        reseau_soin = ReseauSoin.objects.filter(id=reseau_soin_id).update(nom=request.POST.get('name'))\n        response = {\n            'statut': 1,\n            'message': \"Modification effectuée ss avec succès !\",\n            'data': {\n            }\n        }\n    else:",
        "detail": "src.configurations.views",
        "documentation": {}
    },
    {
        "label": "reseau_soin_prestataires_datatable",
        "kind": 2,
        "importPath": "src.configurations.views",
        "description": "src.configurations.views",
        "peekOfCode": "def reseau_soin_prestataires_datatable(request, reseau_soin_id):\n    items_per_page = 10\n    page_number = request.GET.get('page')\n    start = int(request.GET.get('start', 0))\n    length = int(request.GET.get('length', items_per_page))\n    sort_column_index = int(request.GET.get('order[0][column]'))\n    sort_direction = request.GET.get('order[0][dir]')\n    search_nom = request.GET.get('search_nom', '')\n    search_code = request.GET.get('search_code', '')\n    search_type = request.GET.get('search_type', '')",
        "detail": "src.configurations.views",
        "documentation": {}
    },
    {
        "label": "popup_joindre_prestataires",
        "kind": 2,
        "importPath": "src.configurations.views",
        "description": "src.configurations.views",
        "peekOfCode": "def popup_joindre_prestataires(request, reseau_soin_id):\n    reseau_soin = ReseauSoin.objects.filter(id=reseau_soin_id, bureau=request.user.bureau).first()\n    types_prestataires = TypePrestataire.objects.all().order_by('name')\n    return render(request, 'reseaux_soins/popup_joindre_prestataires.html',\n                  {'reseau_soin': reseau_soin, 'types_prestataires': types_prestataires})\ndef reseau_soin_prestataires_restants_datatable(request, reseau_soin_id):\n    items_per_page = 10\n    page_number = request.GET.get('page')\n    start = int(request.GET.get('start', 0))\n    length = int(request.GET.get('length', items_per_page))",
        "detail": "src.configurations.views",
        "documentation": {}
    },
    {
        "label": "reseau_soin_prestataires_restants_datatable",
        "kind": 2,
        "importPath": "src.configurations.views",
        "description": "src.configurations.views",
        "peekOfCode": "def reseau_soin_prestataires_restants_datatable(request, reseau_soin_id):\n    items_per_page = 10\n    page_number = request.GET.get('page')\n    start = int(request.GET.get('start', 0))\n    length = int(request.GET.get('length', items_per_page))\n    sort_column_index = int(request.GET.get('order[0][column]'))\n    sort_direction = request.GET.get('order[0][dir]')\n    search_nom = request.GET.get('search_nom', '')\n    search_code = request.GET.get('search_code', '')\n    search_type = request.GET.get('search_type', '')",
        "detail": "src.configurations.views",
        "documentation": {}
    },
    {
        "label": "joindre_prestataires_reseau",
        "kind": 2,
        "importPath": "src.configurations.views",
        "description": "src.configurations.views",
        "peekOfCode": "def joindre_prestataires_reseau(request, reseau_soin_id):\n    if request.method == 'POST':\n        reseau_soin = ReseauSoin.objects.filter(id=reseau_soin_id).first()\n        prestataires_ids = literal_eval(request.POST.get('selectedItems'))\n        print(\"prestataires_ids\")\n        print(prestataires_ids)\n        prestataires = Prestataire.objects.filter(id__in=prestataires_ids)\n        for prestataire in prestataires:\n            prestataire_reseau = PrestataireReseauSoin.objects.create(reseau_soin=reseau_soin,\n                                                                      prestataire=prestataire,",
        "detail": "src.configurations.views",
        "documentation": {}
    },
    {
        "label": "joindre_prestataire_reseau",
        "kind": 2,
        "importPath": "src.configurations.views",
        "description": "src.configurations.views",
        "peekOfCode": "def joindre_prestataire_reseau(request, reseau_soin_id, prestataire_id):\n    if request.method == 'POST':\n        reseau_soin = ReseauSoin.objects.filter(id=reseau_soin_id).first()\n        prestataire = Prestataire.objects.filter(id=prestataire_id).first()\n        if reseau_soin and prestataire:\n            prestataire_reseau = PrestataireReseauSoin.objects.create(reseau_soin=reseau_soin,\n                                                                      prestataire=prestataire,\n                                                                      created_by=request.user,\n                                                                      date_integration=datetime.datetime.now(\n                                                                          tz=timezone.utc)",
        "detail": "src.configurations.views",
        "documentation": {}
    },
    {
        "label": "retirer_prestataire_reseau",
        "kind": 2,
        "importPath": "src.configurations.views",
        "description": "src.configurations.views",
        "peekOfCode": "def retirer_prestataire_reseau(request, reseau_soin_id, prestataire_id):\n    if request.method == 'POST':\n        prestataire_reseau = PrestataireReseauSoin.objects.filter(reseau_soin_id=reseau_soin_id,\n                                                                  prestataire_id=prestataire_id,\n                                                                  statut_validite=StatutValidite.VALIDE).update(\n            statut_validite=StatutValidite.CLOTURE,\n            removed_by=request.user,\n            date_retrait=datetime.datetime.now(tz=timezone.utc),\n        )\n        response = {",
        "detail": "src.configurations.views",
        "documentation": {}
    },
    {
        "label": "change_prestataire_status",
        "kind": 2,
        "importPath": "src.configurations.views",
        "description": "src.configurations.views",
        "peekOfCode": "def change_prestataire_status(request, prestataire_id):\n    response = None\n    if request.method == 'POST':\n        prestataire = Prestataire.objects.get(id=prestataire_id)\n        if prestataire.status == True:\n            prestataire.status = False\n        else:\n            prestataire.status = True\n        prestataire.save()\n        # gardons des traces",
        "detail": "src.configurations.views",
        "documentation": {}
    },
    {
        "label": "ws_boby_datatable",
        "kind": 2,
        "importPath": "src.configurations.views",
        "description": "src.configurations.views",
        "peekOfCode": "def ws_boby_datatable(request):\n    items_per_page = 10\n    page_number = request.GET.get('page')\n    start = int(request.GET.get('start', 0))\n    length = int(request.GET.get('length', items_per_page))\n    sort_column_index = int(request.GET.get('order[0][column]'))\n    sort_direction = request.GET.get('order[0][dir]')\n    search = request.GET.get('search[value]', '')\n    print('search')\n    print(search)",
        "detail": "src.configurations.views",
        "documentation": {}
    },
    {
        "label": "actes_datatable",
        "kind": 2,
        "importPath": "src.configurations.views",
        "description": "src.configurations.views",
        "peekOfCode": "def actes_datatable(request):\n    items_per_page = 10\n    page_number = request.GET.get('page')\n    start = int(request.GET.get('start', 0))\n    length = int(request.GET.get('length', items_per_page))\n    sort_column_index = int(request.GET.get('order[0][column]'))\n    sort_direction = request.GET.get('order[0][dir]')\n    search_rubrique = request.GET.get('search_rubrique', '')\n    search_code = request.GET.get('search_code', '')\n    search_libelle = request.GET.get('search_libelle', '')",
        "detail": "src.configurations.views",
        "documentation": {}
    },
    {
        "label": "popup_detail_acte",
        "kind": 2,
        "importPath": "src.configurations.views",
        "description": "src.configurations.views",
        "peekOfCode": "def popup_detail_acte(request, acte_id):\n    acte = Acte.objects.get(id=acte_id)\n    return render(request, 'acte/modal_details_acte.html', {'acte': acte})\ndef add_acte(request):\n    if request.method == 'POST':\n        bureau_id = request.POST.get('bureau_id')\n        bureau = Bureau.objects.get(id=bureau_id)\n        if bureau:\n            rubrique_id = request.POST.get('rubrique_id')\n            rubrique = Rubrique.objects.get(id=rubrique_id)",
        "detail": "src.configurations.views",
        "documentation": {}
    },
    {
        "label": "add_acte",
        "kind": 2,
        "importPath": "src.configurations.views",
        "description": "src.configurations.views",
        "peekOfCode": "def add_acte(request):\n    if request.method == 'POST':\n        bureau_id = request.POST.get('bureau_id')\n        bureau = Bureau.objects.get(id=bureau_id)\n        if bureau:\n            rubrique_id = request.POST.get('rubrique_id')\n            rubrique = Rubrique.objects.get(id=rubrique_id)\n            regroupement_acte_id = request.POST.get('regroupement_acte_id')\n            regroupement_acte = RegroupementActe.objects.get(id=regroupement_acte_id)\n            type_acte_id = request.POST.get('type_acte')",
        "detail": "src.configurations.views",
        "documentation": {}
    },
    {
        "label": "popup_modifier_acte",
        "kind": 2,
        "importPath": "src.configurations.views",
        "description": "src.configurations.views",
        "peekOfCode": "def popup_modifier_acte(request, acte_id):\n    #\n    user = request.user\n    acte = Acte.objects.get(id=acte_id)\n    # identique à celui de def update_acte\n    if request.user.is_superuser: # Filtre les paramètres en fonction du statut d'administrateur\n        parametres = ParamActe.objects.filter(acte=acte)  # Tous les paramètres pour les super admins\n    else:\n        parametres = ParamActe.objects.filter(acte=acte, bureau=request.user.bureau)  # Filtre par bureau pour les utilisateurs normaux\n    tarif = Tarif.objects.filter(acte_id=acte_id).first()",
        "detail": "src.configurations.views",
        "documentation": {}
    },
    {
        "label": "update_acte",
        "kind": 2,
        "importPath": "src.configurations.views",
        "description": "src.configurations.views",
        "peekOfCode": "def update_acte(request, acte_id):\n    if request.method == 'POST':\n        bureau = request.user.bureau\n        acte = Acte.objects.filter(id=acte_id).first()\n        tarif = Tarif.objects.filter(acte_id=acte_id).first()\n        # update acte\n        if bureau:\n            rubrique_id = request.POST.get('rubrique_id')\n            acte.rubrique = Rubrique.objects.get(id=rubrique_id)\n            regroupement_acte_id = request.POST.get('regroupement_acte_id')",
        "detail": "src.configurations.views",
        "documentation": {}
    },
    {
        "label": "add_acte_tarif",
        "kind": 2,
        "importPath": "src.configurations.views",
        "description": "src.configurations.views",
        "peekOfCode": "def add_acte_tarif(request, acte_id):\n    if request.method == 'POST':\n        #\n        acte = Acte.objects.filter(id=acte_id).first()\n        bureau = request.user.bureau\n        if bureau:\n            coef_classique = request.POST.get('coef_classique', None)\n            pu_classique = request.POST.get('pu_classique', None)\n            cout_classique = request.POST.get('cout_classique', None)\n            #",
        "detail": "src.configurations.views",
        "documentation": {}
    },
    {
        "label": "desactiver_tarif_acte",
        "kind": 2,
        "importPath": "src.configurations.views",
        "description": "src.configurations.views",
        "peekOfCode": "def desactiver_tarif_acte(request, acte_id, tarif_id):\n    if request.method == 'POST':\n        try:\n            tarif = Tarif.objects.get(id=tarif_id)\n            tarif.statut = Statut.INACTIF\n            tarif.statut_validite = StatutValidite.CLOTURE\n            tarif.deleted_by = request.user\n            tarif.updated_at = datetime.datetime.now(tz=timezone.utc)\n            tarif.save()\n            response = {",
        "detail": "src.configurations.views",
        "documentation": {}
    },
    {
        "label": "verify_code",
        "kind": 2,
        "importPath": "src.configurations.views",
        "description": "src.configurations.views",
        "peekOfCode": "def verify_code(request):\n    if request.method == 'GET':\n        print(\"User email:\", request.user.email)\n        request.session['is_verified'] = True\n        return redirect('/')\n        # if not request.user.email:\n        #     request.session['is_verified'] = True\n        #     return redirect('/')\n        #\n        # code = \"123456\" # send_verification_code(request, request.user.email)",
        "detail": "src.configurations.views",
        "documentation": {}
    },
    {
        "label": "download_background_query_result",
        "kind": 2,
        "importPath": "src.configurations.views",
        "description": "src.configurations.views",
        "peekOfCode": "def download_background_query_result(request, query_id):\n    try:\n        query = BackgroundQueryTask.objects.get(id=query_id)\n        url = query.file.url\n        query.delete()\n        return redirect(url)\n    except Exception as e:\n        return redirect(reverse('admin:configurations_backgroundquerytask_changelist'))\n    return JsonResponse(response)\n## TÉLÉCHARGER MODEL DES TARIFS DU BUREAU",
        "detail": "src.configurations.views",
        "documentation": {}
    },
    {
        "label": "generate_modele_tarifs_bureau",
        "kind": 2,
        "importPath": "src.configurations.views",
        "description": "src.configurations.views",
        "peekOfCode": "def generate_modele_tarifs_bureau(request):\n    # Données à inclure dans le DataFrame\n    actes = Acte.objects.filter(type_acte__code=\"acte\", status=True).order_by('rubrique_id')\n    # Créer un Workbook et accéder à la première feuille\n    wb = Workbook()\n    ws = wb.active\n    # Données à inclure dans le DataFrame\n    data = {\n        'CODE_RUBRIQUE': [],\n        'LIBELLE_ACTE': [],",
        "detail": "src.configurations.views",
        "documentation": {}
    },
    {
        "label": "import_tarifs_bureau",
        "kind": 2,
        "importPath": "src.configurations.views",
        "description": "src.configurations.views",
        "peekOfCode": "def import_tarifs_bureau(request):\n    try:\n        tarifs_existant = Tarif.objects.filter(bureau=request.user.bureau, prestataire__isnull=True, statut=Statut.ACTIF).first()\n        if tarifs_existant:\n            response = {\n                'statut': 0,\n                'message': \"Vous avez déjà importé les tarifs du bureau !\",\n                'data': {}\n            }\n            return JsonResponse(response)",
        "detail": "src.configurations.views",
        "documentation": {}
    },
    {
        "label": "logout_user",
        "kind": 2,
        "importPath": "src.configurations.views",
        "description": "src.configurations.views",
        "peekOfCode": "def logout_user(request, user_id):\n    try:\n        # Récupérer l'utilisateur\n        user = User.objects.get(id=user_id)\n        # Récupérer toutes les sessions\n        sessions = Session.objects.filter(expire_date__gte=timezone.now())\n        # Parcourir les sessions\n        for session in sessions:\n            data = session.get_decoded()\n            # Vérifier si l'utilisateur est dans cette session",
        "detail": "src.configurations.views",
        "documentation": {}
    },
    {
        "label": "ImportAdherent",
        "kind": 6,
        "importPath": "src.core.ImportAdherent",
        "description": "src.core.ImportAdherent",
        "peekOfCode": "class ImportAdherent(forms.Form):\n    upload_file = forms.FileField()",
        "detail": "src.core.ImportAdherent",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.grh.migrations.0001_initial",
        "description": "src.grh.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('configurations', '0001_initial'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n        ('production', '0001_initial'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Campagne',",
        "detail": "src.grh.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "startswith",
        "kind": 2,
        "importPath": "src.grh.templatetags.custom_filters",
        "description": "src.grh.templatetags.custom_filters",
        "peekOfCode": "def startswith(value, arg):\n    return value.startswith(arg)\n@register.filter(name='format_amount')\ndef format_amount(value):\n    try:\n        value = int(value)\n    except (ValueError, TypeError):\n        pass\n    return '{:,}'.format(value).replace(',', ' ')\n@register.filter(name='add_if_numeric_or_append_text')",
        "detail": "src.grh.templatetags.custom_filters",
        "documentation": {}
    },
    {
        "label": "format_amount",
        "kind": 2,
        "importPath": "src.grh.templatetags.custom_filters",
        "description": "src.grh.templatetags.custom_filters",
        "peekOfCode": "def format_amount(value):\n    try:\n        value = int(value)\n    except (ValueError, TypeError):\n        pass\n    return '{:,}'.format(value).replace(',', ' ')\n@register.filter(name='add_if_numeric_or_append_text')\ndef add_if_numeric_or_append_text(value, text):\n    if isinstance(value, (int, float)):\n        return f\"{value}{text}\"",
        "detail": "src.grh.templatetags.custom_filters",
        "documentation": {}
    },
    {
        "label": "add_if_numeric_or_append_text",
        "kind": 2,
        "importPath": "src.grh.templatetags.custom_filters",
        "description": "src.grh.templatetags.custom_filters",
        "peekOfCode": "def add_if_numeric_or_append_text(value, text):\n    if isinstance(value, (int, float)):\n        return f\"{value}{text}\"\n    else:\n        number = re.findall(r'\\d+', value)\n        if number:\n            return f\"{number[0]}{text}\"\n        else:\n            return f\"{value}{text}\"\n@register.filter",
        "detail": "src.grh.templatetags.custom_filters",
        "documentation": {}
    },
    {
        "label": "email_mask",
        "kind": 2,
        "importPath": "src.grh.templatetags.custom_filters",
        "description": "src.grh.templatetags.custom_filters",
        "peekOfCode": "def email_mask(email):\n    # application du masque sur l'email pour cacher les caractères exempla : a.*****i@inov.africa\n    begin_email = email[:email.index('@')]\n    if len(begin_email) < 6:\n        return email[:2] + '*****' + email[len(begin_email)-1] + email[email.index('@'):]\n    return email[:4] + '*****' + email[len(begin_email)-1] + email[email.index('@'):]",
        "detail": "src.grh.templatetags.custom_filters",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 5,
        "importPath": "src.grh.templatetags.custom_filters",
        "description": "src.grh.templatetags.custom_filters",
        "peekOfCode": "register = template.Library()\n@register.filter(name='startswith')\ndef startswith(value, arg):\n    return value.startswith(arg)\n@register.filter(name='format_amount')\ndef format_amount(value):\n    try:\n        value = int(value)\n    except (ValueError, TypeError):\n        pass",
        "detail": "src.grh.templatetags.custom_filters",
        "documentation": {}
    },
    {
        "label": "GrhConfig",
        "kind": 6,
        "importPath": "src.grh.apps",
        "description": "src.grh.apps",
        "peekOfCode": "class GrhConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'grh'",
        "detail": "src.grh.apps",
        "documentation": {}
    },
    {
        "label": "generate_uiid",
        "kind": 2,
        "importPath": "src.grh.helper",
        "description": "src.grh.helper",
        "peekOfCode": "def generate_uiid(request):\n    uiid_length = 20\n    uiid = secrets.token_urlsafe(uiid_length)\n    return uiid\ndef send_email(url, libelle_compagne, date_debut, date_fin, email, uiid, aliment):\n    subject = 'INOV : INVITATION À VOUS INSCRIRE'\n    template_name = \"grh/enrolement/email_to_enrol.html\"\n    template = get_template(template_name)\n    context = {\n        'libelle_compagne': libelle_compagne,",
        "detail": "src.grh.helper",
        "documentation": {}
    },
    {
        "label": "send_email",
        "kind": 2,
        "importPath": "src.grh.helper",
        "description": "src.grh.helper",
        "peekOfCode": "def send_email(url, libelle_compagne, date_debut, date_fin, email, uiid, aliment):\n    subject = 'INOV : INVITATION À VOUS INSCRIRE'\n    template_name = \"grh/enrolement/email_to_enrol.html\"\n    template = get_template(template_name)\n    context = {\n        'libelle_compagne': libelle_compagne,\n        'date_debut': date_debut,\n        'date_fin': date_fin,\n        'url': url,\n        'uiid': uiid,",
        "detail": "src.grh.helper",
        "documentation": {}
    },
    {
        "label": "format_phone_number",
        "kind": 2,
        "importPath": "src.grh.helper",
        "description": "src.grh.helper",
        "peekOfCode": "def format_phone_number(raw_phone, selected_country_dial_code):\n    raw_phone = raw_phone.replace(\" \", \"\")\n    formatted_phone = f\"+{selected_country_dial_code}{raw_phone}\"\n    return formatted_phone\ndef export_beneficiaire(request, police_id):\n    police = Police.objects.get(id=police_id)\n    today = datetime.datetime.now(tz=timezone.utc)\n    if police:\n        #queryset = Aliment.objects.select_related('qualite_beneficiaire', 'police__client').filter(formulegarantie__police=police=police).order_by('-id')\n        # Optimisation de la recuperation des beneficiaires",
        "detail": "src.grh.helper",
        "documentation": {}
    },
    {
        "label": "export_beneficiaire",
        "kind": 2,
        "importPath": "src.grh.helper",
        "description": "src.grh.helper",
        "peekOfCode": "def export_beneficiaire(request, police_id):\n    police = Police.objects.get(id=police_id)\n    today = datetime.datetime.now(tz=timezone.utc)\n    if police:\n        #queryset = Aliment.objects.select_related('qualite_beneficiaire', 'police__client').filter(formulegarantie__police=police=police).order_by('-id')\n        # Optimisation de la recuperation des beneficiaires\n        #queryset = AlimentFormule.objects.filter(formule_id__in=[p.id for p in police.formules], statut=Statut.ACTIF).order_by('-id')\n        # Récupérer les IDs des aliments dans aliment_formule\n        aliment_ids = AlimentFormule.objects.filter(\n            formule_id__in=[p.id for p in police.formules],",
        "detail": "src.grh.helper",
        "documentation": {}
    },
    {
        "label": "send_otp_mail",
        "kind": 2,
        "importPath": "src.grh.helper",
        "description": "src.grh.helper",
        "peekOfCode": "def send_otp_mail(email, otp):\n    subject = 'Code de Vérification'\n    message = f'''<!DOCTYPE html>\n                    <html lang=\"fr\">\n                    <head>\n                        <meta charset=\"UTF-8\">\n                        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n                        <title>Code de Vérification</title>\n                    </head>\n                    <body>",
        "detail": "src.grh.helper",
        "documentation": {}
    },
    {
        "label": "AuthenticationMiddleware",
        "kind": 6,
        "importPath": "src.grh.middleware",
        "description": "src.grh.middleware",
        "peekOfCode": "class AuthenticationMiddleware:\n    def __init__(self, get_response):\n        self.get_response = get_response\n    def __call__(self, request):\n        excluded_urls = ['/grh/formulaire_enrolement/', '/grh/enrolement/','/grh/password_reset/', '/grh/verify_codes/']\n        if not request.user.is_authenticated and not request.path_info.startswith('/grh/login'):\n            if any(request.path_info.startswith(url) for url in excluded_urls):\n                return self.get_response(request)\n            elif request.path_info.startswith('/grh/'):\n                return redirect(reverse('grh.login'))",
        "detail": "src.grh.middleware",
        "documentation": {}
    },
    {
        "label": "Campagne",
        "kind": 6,
        "importPath": "src.grh.models",
        "description": "src.grh.models",
        "peekOfCode": "class Campagne(models.Model):\n    created_by = models.ForeignKey(User, null=True, on_delete=models.RESTRICT)\n    police = models.ForeignKey(Police, null=True, on_delete=models.RESTRICT)\n    formulegarantie = models.ForeignKey(FormuleGarantie, null=True, on_delete=models.RESTRICT)\n    libelle = models.CharField(max_length=255, blank=False, null=True)\n    code = models.CharField(max_length=25, unique=True, blank=False, null=True) # UPDATED\n    lien = models.CharField(max_length=255, blank=False, null=True)\n    date_debut = models.DateTimeField() # UPDATE\n    date_fin = models.DateTimeField() # UPDATED\n    created_at = models.DateTimeField(auto_now_add=True)",
        "detail": "src.grh.models",
        "documentation": {}
    },
    {
        "label": "Prospect",
        "kind": 6,
        "importPath": "src.grh.models",
        "description": "src.grh.models",
        "peekOfCode": "class Prospect(models.Model):\n    bureau = models.ForeignKey(Bureau, null=True, on_delete=models.RESTRICT)\n    police = models.ForeignKey(Police, null=True, on_delete=models.RESTRICT)\n    formulegarantie = models.ForeignKey(FormuleGarantie, null=True, on_delete=models.RESTRICT)\n    adherent_principal = models.ForeignKey('self', null=True, on_delete=models.RESTRICT)\n    qualite_beneficiaire = models.ForeignKey(QualiteBeneficiaire, null=True, on_delete=models.RESTRICT)\n    civilite = models.ForeignKey(Civilite, null=True, on_delete=models.RESTRICT)\n    pays_naissance = models.ForeignKey(Pays, related_name='pays_naissance_prospect', null=True, on_delete=models.RESTRICT)\n    pays_residence = models.ForeignKey(Pays, related_name='pays_residence_prospect', null=True, on_delete=models.RESTRICT)\n    pays_activite_professionnelle = models.ForeignKey(Pays, related_name='pays_activite_professionnelle_prospect', null=True, on_delete=models.RESTRICT)",
        "detail": "src.grh.models",
        "documentation": {}
    },
    {
        "label": "CampagneProspect",
        "kind": 6,
        "importPath": "src.grh.models",
        "description": "src.grh.models",
        "peekOfCode": "class CampagneProspect(models.Model):\n    campagne = models.ForeignKey(Campagne, null=True, on_delete=models.RESTRICT)\n    prospect = models.ForeignKey(Prospect, null=True, on_delete=models.RESTRICT)\n    lien = models.CharField(max_length=255, blank=False, null=True)\n    uiid = models.CharField(max_length=64, blank=False, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now_add=True)\n    completed_at = models.DateTimeField(auto_now_add=True)\n    statut_enrolement = models.fields.CharField(choices=StatutEnrolement.choices, default=StatutEnrolement.ATTENTE, max_length=15, null=True)\nclass CampagneAppmobile(models.Model):",
        "detail": "src.grh.models",
        "documentation": {}
    },
    {
        "label": "CampagneAppmobile",
        "kind": 6,
        "importPath": "src.grh.models",
        "description": "src.grh.models",
        "peekOfCode": "class CampagneAppmobile(models.Model):\n    created_by = models.ForeignKey(User, null=True, on_delete=models.RESTRICT)\n    police = models.ForeignKey(Police, null=True, on_delete=models.RESTRICT)\n    formulegarantie = models.ForeignKey(FormuleGarantie, null=True, on_delete=models.RESTRICT)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    statut = models.fields.CharField(choices=StatutValidite.choices, max_length=15, null=True)\n    def __str__(self):\n        return self.id\n    class Meta:",
        "detail": "src.grh.models",
        "documentation": {}
    },
    {
        "label": "CampagneAppmobileProspect",
        "kind": 6,
        "importPath": "src.grh.models",
        "description": "src.grh.models",
        "peekOfCode": "class CampagneAppmobileProspect(models.Model):\n    campagne_appmobile = models.ForeignKey(CampagneAppmobile, on_delete=models.RESTRICT)\n    prospect = models.ForeignKey(Prospect, null=True, on_delete=models.RESTRICT)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now_add=True)\n    statut_enrolement = models.fields.CharField(choices=StatutEnrolement.choices, default=StatutEnrolement.ATTENTE, max_length=15, null=True)\n    mouvement = models.ForeignKey(Mouvement, on_delete=models.RESTRICT)",
        "detail": "src.grh.models",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "src.grh.urls",
        "description": "src.grh.urls",
        "peekOfCode": "urlpatterns = [\n    # DASHBOARD\n    path('<int:selected_police_id>/', DashboardView.as_view(), name='grh.dashboard'),\n    path('', DashboardView.as_view(), name='grh.dashboard'),\n    path('', DashboardView.as_view(), name='grh.dashboard2'),\n    path('set_client/', set_client, name='set_client'),\n    # AUTH\n    path('login/', LoginView.as_view(), name='grh.login'),\n    # path('verify_codes/', VerifyCodeView.as_view(), name='grh.verify_codes'),\n    path('logout/', LogoutView.as_view(), name='grh.logout'),",
        "detail": "src.grh.urls",
        "documentation": {}
    },
    {
        "label": "LoginView",
        "kind": 6,
        "importPath": "src.grh.views",
        "description": "src.grh.views",
        "peekOfCode": "class LoginView(TemplateView):\n    template_name = \"grh/auth/login.html\"\n    def post(self, request, *args, **kwargs):\n        email = request.POST.get('email')\n        password = request.POST.get('password')\n        try:\n            user = User.objects.get(username=email)\n        except User.DoesNotExist:\n            error_message = \"Cet utilisateur n'existe pas !\"\n            messages.error(request, error_message)",
        "detail": "src.grh.views",
        "documentation": {}
    },
    {
        "label": "LogoutView",
        "kind": 6,
        "importPath": "src.grh.views",
        "description": "src.grh.views",
        "peekOfCode": "class LogoutView(View):\n    def get(self, request, *args, **kwargs):\n        logout(request)\n        return redirect('grh.login')\n# DASHBOARD\nclass DashboardView(TemplateView):\n    template_name = \"grh/dashboard.html\"\n    ######################################################\n    def get(self, request, *args, **kwargs):\n        selected_police_id = kwargs.get('selected_police_id')",
        "detail": "src.grh.views",
        "documentation": {}
    },
    {
        "label": "DashboardView",
        "kind": 6,
        "importPath": "src.grh.views",
        "description": "src.grh.views",
        "peekOfCode": "class DashboardView(TemplateView):\n    template_name = \"grh/dashboard.html\"\n    ######################################################\n    def get(self, request, *args, **kwargs):\n        selected_police_id = kwargs.get('selected_police_id')\n        client = request.user.utilisateur_grh\n        # CHECK PAGE FIRST LOAD\n        if not request.session.get('page_loaded', False):\n            # SET SESSION FLAG\n            request.session['page_loaded'] = True",
        "detail": "src.grh.views",
        "documentation": {}
    },
    {
        "label": "OnBoardingView",
        "kind": 6,
        "importPath": "src.grh.views",
        "description": "src.grh.views",
        "peekOfCode": "class OnBoardingView(TemplateView):\n    template_name = \"grh/onboarding.html\"\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        admin_grh = self.request.user\n        today = formats.date_format(date.today(), \"Y-m-d\")\n        related_client = admin_grh.utilisateur_grh\n        if related_client:\n            related_polices = Police.objects.filter(client=related_client)\n            context['related_polices'] = related_polices",
        "detail": "src.grh.views",
        "documentation": {}
    },
    {
        "label": "DetailsCampagneView",
        "kind": 6,
        "importPath": "src.grh.views",
        "description": "src.grh.views",
        "peekOfCode": "class DetailsCampagneView(TemplateView):\n    template_name = \"grh/details_campagne.html\"\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        campagne_id = kwargs.get('campagne_id')\n        campagne = get_object_or_404(Campagne, id=campagne_id)\n        admin_grh = self.request.user\n        campagne_prospects_soumis = CampagneProspect.objects.filter(campagne=campagne, campagne__created_by=admin_grh,\n                                                                    statut_enrolement=StatutEnrolement.SOUMIS)\n        prospects_soumis = [campagne_prospect.prospect for campagne_prospect in campagne_prospects_soumis]",
        "detail": "src.grh.views",
        "documentation": {}
    },
    {
        "label": "DetailsCampagneAppmobileView",
        "kind": 6,
        "importPath": "src.grh.views",
        "description": "src.grh.views",
        "peekOfCode": "class DetailsCampagneAppmobileView(TemplateView):\n    template_name = \"grh/details_campagne_appmobile.html\"\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        campagne_appmobile_id = kwargs.get('campagneappmobile_id')\n        campagne_appmobile = get_object_or_404(CampagneAppmobile, id=campagne_appmobile_id)\n        admin_grh = self.request.user\n        campagne_prospects_soumis = CampagneAppmobileProspect.objects.filter(\n            campagne_appmobile=campagne_appmobile,\n            campagne_appmobile__created_by=campagne_appmobile.created_by,",
        "detail": "src.grh.views",
        "documentation": {}
    },
    {
        "label": "IncorporationByEnrolementView",
        "kind": 6,
        "importPath": "src.grh.views",
        "description": "src.grh.views",
        "peekOfCode": "class IncorporationByEnrolementView(TemplateView):\n    template_name = \"grh/incorporations_by_enrolement.html\"\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        today = formats.date_format(date.today(), \"Y-m-d\")\n        print(\"today\")\n        print(today)\n        campagne_id = kwargs.get('campagne_id')\n        prospect_id = kwargs.get('prospect_id')\n        pprint(\"campagne_id\")",
        "detail": "src.grh.views",
        "documentation": {}
    },
    {
        "label": "PolicesView",
        "kind": 6,
        "importPath": "src.grh.views",
        "description": "src.grh.views",
        "peekOfCode": "class PolicesView(TemplateView):\n    template_name = \"grh/polices.html\"\n    def get(self, request, *args, **kwargs):\n        client = request.user.utilisateur_grh\n        if client:\n            polices = Police.objects.filter(client=client)\n            return render(request, self.template_name, {'polices': polices})\n        else:\n            return redirect('grh.login')\nclass PoliceOverviewView(TemplateView):",
        "detail": "src.grh.views",
        "documentation": {}
    },
    {
        "label": "PoliceOverviewView",
        "kind": 6,
        "importPath": "src.grh.views",
        "description": "src.grh.views",
        "peekOfCode": "class PoliceOverviewView(TemplateView):\n    template_name = \"grh/police_overview.html\"\n    def dispatch(self, request, *args, **kwargs):\n        police_id = kwargs.get('police_id')\n        client = request.user.utilisateur_grh\n        self.police = get_object_or_404(Police, id=police_id, client=client)\n        return super().dispatch(request, *args, **kwargs)\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        context['police'] = self.police",
        "detail": "src.grh.views",
        "documentation": {}
    },
    {
        "label": "DetailsPoliceView",
        "kind": 6,
        "importPath": "src.grh.views",
        "description": "src.grh.views",
        "peekOfCode": "class DetailsPoliceView(TemplateView):\n    template_name = \"grh/details_police.html\"\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        police_id = kwargs.get('police_id')\n        police = get_object_or_404(Police, id=police_id)\n        mouvements = MouvementPolice.objects.filter(police=police)\n        duree_police_en_mois = Police.objects.filter(id=police.id).annotate(\n            duree_police_en_mois=ExpressionWrapper(\n                F('date_fin_effet') - F('date_debut_effet'),",
        "detail": "src.grh.views",
        "documentation": {}
    },
    {
        "label": "FormulesPoliceView",
        "kind": 6,
        "importPath": "src.grh.views",
        "description": "src.grh.views",
        "peekOfCode": "class FormulesPoliceView(TemplateView):\n    template_name = \"grh/formules_police.html\"\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        police_id = kwargs.get('police_id')\n        police = get_object_or_404(Police, id=police_id)\n        formules = FormuleGarantie.objects.filter(police=police)\n        context['police'] = police\n        context['formules'] = formules\n        return context",
        "detail": "src.grh.views",
        "documentation": {}
    },
    {
        "label": "DetailsFormulePoliceView",
        "kind": 6,
        "importPath": "src.grh.views",
        "description": "src.grh.views",
        "peekOfCode": "class DetailsFormulePoliceView(TemplateView):\n    template_name = \"grh/details_formule_police.html\"\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        police_id = kwargs.get('police_id')\n        formule_id = kwargs.get('formule_id')\n        police = get_object_or_404(Police, id=police_id)\n        formule = get_object_or_404(FormuleGarantie, id=formule_id, police=police)\n        baremes = Bareme.objects.filter(formulegarantie=formule, statut=Statut.ACTIF).all()\n        tarif_prestataire_clients = TarifPrestataireClient.objects.filter(formule=formule)",
        "detail": "src.grh.views",
        "documentation": {}
    },
    {
        "label": "DetailsGarantieFormulePoliceView",
        "kind": 6,
        "importPath": "src.grh.views",
        "description": "src.grh.views",
        "peekOfCode": "class DetailsGarantieFormulePoliceView(TemplateView):\n    template_name = \"grh/details_garantie_formule_police.html\"\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        police_id = kwargs.get('police_id')\n        formule_id = kwargs.get('formule_id')\n        bareme_id = kwargs.get('bareme_id')\n        police = get_object_or_404(Police, id=police_id)\n        formule = get_object_or_404(FormuleGarantie, id=formule_id, police=police)\n        bareme = get_object_or_404(Bareme, id=bareme_id)",
        "detail": "src.grh.views",
        "documentation": {}
    },
    {
        "label": "ReseauDeSoinView",
        "kind": 6,
        "importPath": "src.grh.views",
        "description": "src.grh.views",
        "peekOfCode": "class ReseauDeSoinView(TemplateView):\n    template_name = \"grh/reseau_de_soin.html\"\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        police_id = kwargs.get('police_id')\n        formule_id = kwargs.get('formule_id')\n        reseau_soin_id = kwargs.get('reseau_soin_id')\n        police = get_object_or_404(Police, id=police_id)\n        formule = get_object_or_404(FormuleGarantie, id=formule_id, police=police)\n        prestataires = Prestataire.objects.filter(tarifprestataireclient__formule_id=formule_id).distinct()",
        "detail": "src.grh.views",
        "documentation": {}
    },
    {
        "label": "PrestataireMedicalView",
        "kind": 6,
        "importPath": "src.grh.views",
        "description": "src.grh.views",
        "peekOfCode": "class PrestataireMedicalView(TemplateView):\n    template_name = \"grh/prestataire_medical.html\"\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        police_id = kwargs.get('police_id')\n        formule_id = kwargs.get('formule_id')\n        prestataire_id = kwargs.get('prestataire_id')\n        police = get_object_or_404(Police, id=police_id)\n        formule = get_object_or_404(FormuleGarantie, id=formule_id, police=police)\n        prestataire = get_object_or_404(Prestataire, id=prestataire_id)",
        "detail": "src.grh.views",
        "documentation": {}
    },
    {
        "label": "QuittancesPoliceView",
        "kind": 6,
        "importPath": "src.grh.views",
        "description": "src.grh.views",
        "peekOfCode": "class QuittancesPoliceView(TemplateView):\n    template_name = \"grh/quittances_police.html\"\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        police_id = kwargs.get('police_id')\n        police = get_object_or_404(Police, id=police_id)\n        quittances = Quittance.objects.filter(police=police)\n        quittances_impayees = Quittance.objects.filter(police=police, statut=StatutQuittance.IMPAYE)\n        context['police'] = police\n        context['quittances'] = quittances",
        "detail": "src.grh.views",
        "documentation": {}
    },
    {
        "label": "FicheQuittanceView",
        "kind": 6,
        "importPath": "src.grh.views",
        "description": "src.grh.views",
        "peekOfCode": "class FicheQuittanceView(TemplateView):\n    template_name = \"grh/fiche_quittance.html\"\n    def dispatch(self, request, *args, **kwargs):\n        police_id = kwargs.get('police_id')\n        client = request.user.utilisateur_grh\n        self.police = get_object_or_404(Police, id=police_id, client=client)\n        return super().dispatch(request, *args, **kwargs)\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        police_id = kwargs.get('police_id')",
        "detail": "src.grh.views",
        "documentation": {}
    },
    {
        "label": "DocumentsPoliceView",
        "kind": 6,
        "importPath": "src.grh.views",
        "description": "src.grh.views",
        "peekOfCode": "class DocumentsPoliceView(TemplateView):\n    template_name = \"grh/documents_police.html\"\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        police_id = kwargs.get('police_id')\n        police = get_object_or_404(Police, id=police_id)\n        documents = Document.objects.filter(police=police)\n        context['police'] = police\n        context['documents'] = documents\n        return context",
        "detail": "src.grh.views",
        "documentation": {}
    },
    {
        "label": "BeneficiairePoliceView",
        "kind": 6,
        "importPath": "src.grh.views",
        "description": "src.grh.views",
        "peekOfCode": "class BeneficiairePoliceView(TemplateView):\n    template_name = \"grh/beneficiaire.html\"\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        police_id = kwargs.get('police_id')\n        police = get_object_or_404(Police, id=police_id)\n        formules = FormuleGarantie.objects.filter(police=police)\n        aliment_formule_ids = AlimentFormule.objects.filter(formule_id__in=[p.id for p in police.formules], \n                                                            statut=Statut.ACTIF).values_list('aliment_id', \n                                                                                             flat=True).order_by('-id')",
        "detail": "src.grh.views",
        "documentation": {}
    },
    {
        "label": "BeneficiaireOverviewView",
        "kind": 6,
        "importPath": "src.grh.views",
        "description": "src.grh.views",
        "peekOfCode": "class BeneficiaireOverviewView(TemplateView):\n    template_name = \"grh/beneficiaire_overview.html\"\n    def dispatch(self, request, *args, **kwargs):\n        police_id = kwargs.get('police_id')\n        client = request.user.utilisateur_grh\n        # Ensure the police belongs to the client\n        self.police = get_object_or_404(Police, id=police_id, client=client)\n        # Call the parent class's dispatch method\n        return super().dispatch(request, *args, **kwargs)\n    def get_context_data(self, **kwargs):",
        "detail": "src.grh.views",
        "documentation": {}
    },
    {
        "label": "FicheBeneficiaireView",
        "kind": 6,
        "importPath": "src.grh.views",
        "description": "src.grh.views",
        "peekOfCode": "class FicheBeneficiaireView(TemplateView):\n    template_name = \"grh/fiche_beneficiaire.html\"\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        police_id = kwargs.get('police_id')\n        beneficiaire_id = kwargs.get('beneficiaire_id')\n        police = get_object_or_404(Police, id=police_id)\n        beneficiaire = get_object_or_404(Aliment, id=beneficiaire_id)\n        adherent = beneficiaire.adherent_principal\n        aliment_formule = AlimentFormule.objects.filter(aliment=beneficiaire).first()",
        "detail": "src.grh.views",
        "documentation": {}
    },
    {
        "label": "SortirBeneficiaireView",
        "kind": 6,
        "importPath": "src.grh.views",
        "description": "src.grh.views",
        "peekOfCode": "class SortirBeneficiaireView(TemplateView):\n    template_name = \"grh/sortir_beneficiaire.html\"\n    def dispatch(self, request, *args, **kwargs):\n        # Retrieve police_id from kwargs\n        police_id = kwargs.get('police_id')\n        client = request.user.utilisateur_grh\n        self.police = get_object_or_404(Police, id=police_id, client=client)\n        return super().dispatch(request, *args, **kwargs)\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)",
        "detail": "src.grh.views",
        "documentation": {}
    },
    {
        "label": "SuspendreBeneficiaireView",
        "kind": 6,
        "importPath": "src.grh.views",
        "description": "src.grh.views",
        "peekOfCode": "class SuspendreBeneficiaireView(TemplateView):\n    template_name = \"grh/suspendre_beneficiaire.html\"\n    def dispatch(self, request, *args, **kwargs):\n        # Retrieve police_id from kwargs\n        police_id = kwargs.get('police_id')\n        client = request.user.utilisateur_grh\n        self.police = get_object_or_404(Police, id=police_id, client=client)\n        return super().dispatch(request, *args, **kwargs)\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)",
        "detail": "src.grh.views",
        "documentation": {}
    },
    {
        "label": "FamilleBeneficiaireView",
        "kind": 6,
        "importPath": "src.grh.views",
        "description": "src.grh.views",
        "peekOfCode": "class FamilleBeneficiaireView(TemplateView):\n    template_name = \"grh/famille_beneficiaire.html\"\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        police_id = kwargs.get('police_id')\n        beneficiaire_id = kwargs.get('beneficiaire_id')\n        police = get_object_or_404(Police, id=police_id)\n        aliment = get_object_or_404(Aliment, id=beneficiaire_id)\n        adherent = aliment.adherent_principal\n        famille = Aliment.objects.filter(adherent_principal=adherent).all()",
        "detail": "src.grh.views",
        "documentation": {}
    },
    {
        "label": "GarantiesBeneficiaireView",
        "kind": 6,
        "importPath": "src.grh.views",
        "description": "src.grh.views",
        "peekOfCode": "class GarantiesBeneficiaireView(TemplateView):\n    template_name = \"grh/garanties_beneficiaire.html\"\n    def dispatch(self, request, *args, **kwargs):\n        police_id = kwargs.get('police_id')\n        client = request.user.utilisateur_grh\n        self.police = get_object_or_404(Police, id=police_id, client=client)\n        return super().dispatch(request, *args, **kwargs)\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        police_id = kwargs.get('police_id')",
        "detail": "src.grh.views",
        "documentation": {}
    },
    {
        "label": "DetailsGarantieFormuleBeneficiaireView",
        "kind": 6,
        "importPath": "src.grh.views",
        "description": "src.grh.views",
        "peekOfCode": "class DetailsGarantieFormuleBeneficiaireView(TemplateView):\n    template_name = \"grh/details_garantie_formule_beneficiaire.html\"\n    def dispatch(self, request, *args, **kwargs):\n        police_id = kwargs.get('police_id')\n        client = request.user.utilisateur_grh\n        self.police = get_object_or_404(Police, id=police_id, client=client)\n        return super().dispatch(request, *args, **kwargs)\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        police_id = kwargs.get('police_id')",
        "detail": "src.grh.views",
        "documentation": {}
    },
    {
        "label": "TarifBeneficiaireView",
        "kind": 6,
        "importPath": "src.grh.views",
        "description": "src.grh.views",
        "peekOfCode": "class TarifBeneficiaireView(TemplateView):\n    template_name = \"grh/tarif_beneficiaire.html\"\n    #   def get_context_data(self, **kwargs):\n    #       context = super().get_context_data(**kwargs)\n    #       police_id = kwargs.get('police_id')\n    #       beneficiaire_id = kwargs.get('beneficiaire_id')\n    #       police = get_object_or_404(Police, id=police_id)\n    #       beneficiaire = get_object_or_404(Aliment, id=beneficiaire_id)\n    #       context['police'] = police\n    #       context['beneficiaire'] = beneficiaire",
        "detail": "src.grh.views",
        "documentation": {}
    },
    {
        "label": "DocumentsBeneficiaireView",
        "kind": 6,
        "importPath": "src.grh.views",
        "description": "src.grh.views",
        "peekOfCode": "class DocumentsBeneficiaireView(TemplateView):\n    template_name = \"grh/documents_beneficiaire.html\"\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        police_id = kwargs.get('police_id')\n        beneficiaire_id = kwargs.get('beneficiaire_id')\n        police = get_object_or_404(Police, id=police_id)\n        beneficiaire = get_object_or_404(Aliment, id=beneficiaire_id)\n        documents = Document.objects.filter(aliment=beneficiaire)\n        #",
        "detail": "src.grh.views",
        "documentation": {}
    },
    {
        "label": "AjouterDocumentBeneficiaireView",
        "kind": 6,
        "importPath": "src.grh.views",
        "description": "src.grh.views",
        "peekOfCode": "class AjouterDocumentBeneficiaireView(TemplateView):\n    template_name = \"grh/ajouter_document_beneficiaire.html\"\n    def dispatch(self, request, *args, **kwargs):\n        police_id = kwargs.get('police_id')\n        client = request.user.utilisateur_grh\n        self.police = get_object_or_404(Police, id=police_id, client=client)\n        return super().dispatch(request, *args, **kwargs)\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        police_id = kwargs.get('police_id')",
        "detail": "src.grh.views",
        "documentation": {}
    },
    {
        "label": "ImporterPhotoBeneficiaireView",
        "kind": 6,
        "importPath": "src.grh.views",
        "description": "src.grh.views",
        "peekOfCode": "class ImporterPhotoBeneficiaireView(TemplateView):\n    template_name = \"grh/importer_photo_beneficiaire.html\"\n    def dispatch(self, request, *args, **kwargs):\n        police_id = kwargs.get('police_id')\n        client = request.user.utilisateur_grh\n        self.police = get_object_or_404(Police, id=police_id, client=client)\n        return super().dispatch(request, *args, **kwargs)\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        police_id = kwargs.get('police_id')",
        "detail": "src.grh.views",
        "documentation": {}
    },
    {
        "label": "AjouterMembreFamilleBeneficiaire",
        "kind": 6,
        "importPath": "src.grh.views",
        "description": "src.grh.views",
        "peekOfCode": "class AjouterMembreFamilleBeneficiaire(TemplateView):\n    template_name = \"grh/formulaire_ajouter_beneficiaire_famille.html\"\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        police_id = kwargs.get('police_id')\n        beneficiaire_id = kwargs.get('beneficiaire_id')\n        police = get_object_or_404(Police, id=police_id)\n        beneficiaire = get_object_or_404(Aliment, id=beneficiaire_id)\n        adherents_principaux = getAdherentsPrincipaux(police_id)\n        pays = Pays.objects.all()",
        "detail": "src.grh.views",
        "documentation": {}
    },
    {
        "label": "AjouterBeneficiaire",
        "kind": 6,
        "importPath": "src.grh.views",
        "description": "src.grh.views",
        "peekOfCode": "class AjouterBeneficiaire(TemplateView):\n    template_name = \"grh/formulaire_ajouter_beneficiaire_police.html\"\n    def dispatch(self, request, *args, **kwargs):\n        # Extract police_id from kwargs\n        police_id = kwargs.get('police_id')\n        # Get the client associated with the currently logged-in user\n        client = request.user.utilisateur_grh\n        # Check if the police exists and belongs to the client's associated polices\n        self.police = get_object_or_404(Police, id=police_id, client=client)\n        return super().dispatch(request, *args, **kwargs)",
        "detail": "src.grh.views",
        "documentation": {}
    },
    {
        "label": "Enrolement",
        "kind": 6,
        "importPath": "src.grh.views",
        "description": "src.grh.views",
        "peekOfCode": "class Enrolement(TemplateView):\n    template_name = \"grh/enrolement/enrolement.html\"\n    def get(self, request, *args, **kwargs):\n        campagne_id = kwargs.get('campagne_id')\n        uiid = kwargs.get('uiid')\n        campagne = get_object_or_404(Campagne, id=campagne_id)\n        # NOT OPENED YET\n        if campagne.date_debut > timezone.now():\n            status = '403'\n            campagne.statut = StatutValidite.BROUILLON",
        "detail": "src.grh.views",
        "documentation": {}
    },
    {
        "label": "FormulaireEnrolement",
        "kind": 6,
        "importPath": "src.grh.views",
        "description": "src.grh.views",
        "peekOfCode": "class FormulaireEnrolement(TemplateView):\n    template_name = \"grh/enrolement/formulaire_enrolement.html\"\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        campagne_id = kwargs.get('campagne_id')\n        uiid = kwargs.get('uiid')\n        prospect_id = kwargs.get('prospect_id')\n        aliment_id = kwargs.get('aliment_id')\n        if aliment_id:\n            aliment = get_object_or_404(Aliment, id=aliment_id)",
        "detail": "src.grh.views",
        "documentation": {}
    },
    {
        "label": "ErrorEnrolementView",
        "kind": 6,
        "importPath": "src.grh.views",
        "description": "src.grh.views",
        "peekOfCode": "class ErrorEnrolementView(TemplateView):\n    template_name = 'grh/enrolement/error_enrolement.html'\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        campagne_id = kwargs.get('campagne_id')\n        #   uiid = kwargs.get('uiid')\n        status = kwargs.get('status')\n        campagne = get_object_or_404(Campagne, id=campagne_id)\n        context['campagne'] = campagne\n        context['status'] = status",
        "detail": "src.grh.views",
        "documentation": {}
    },
    {
        "label": "ChangeBeneficiaireIdView",
        "kind": 6,
        "importPath": "src.grh.views",
        "description": "src.grh.views",
        "peekOfCode": "class ChangeBeneficiaireIdView(View):\n    def get(self, request, *args, **kwargs):\n        selected_beneficiaire_id = request.GET.get('selected_beneficiaire_id')\n        request.session['beneficiaire_id'] = selected_beneficiaire_id\n        return JsonResponse({'status': 'success'})\n# RESET PASSWROD \nclass PasswordResetView(PasswordResetView):\n    template_name = 'grh/auth/password_reset.html'\n    hotp = pyotp.HOTP(settings.OTP_SECRET_KEY, digits=6)\n    def get(self, request, *args, **kwargs):",
        "detail": "src.grh.views",
        "documentation": {}
    },
    {
        "label": "PasswordResetView",
        "kind": 6,
        "importPath": "src.grh.views",
        "description": "src.grh.views",
        "peekOfCode": "class PasswordResetView(PasswordResetView):\n    template_name = 'grh/auth/password_reset.html'\n    hotp = pyotp.HOTP(settings.OTP_SECRET_KEY, digits=6)\n    def get(self, request, *args, **kwargs):\n        context = self.get_context_data(**kwargs)\n        self.request.session['error'] = None\n        return self.render_to_response(context)\n    def post(self, request, *args, **kwargs):\n        context = self.get_context_data(**kwargs)\n        email = self.request.POST.get('email', None)",
        "detail": "src.grh.views",
        "documentation": {}
    },
    {
        "label": "PasswordResetOtpView",
        "kind": 6,
        "importPath": "src.grh.views",
        "description": "src.grh.views",
        "peekOfCode": "class PasswordResetOtpView(PasswordResetView):\n    template_name = 'grh/auth/verification_code.html'\n    url = reverse_lazy('grh.password_reset')\n    def get(self, request, *args, **kwargs):\n        context = self.get_context_data(**kwargs)\n        self.request.session['error'] = None\n        email = self.request.session.get('email', None)\n        code_verification = self.request.session.get('code_verification', None)\n        if not email or not code_verification:\n            return redirect(self.url)",
        "detail": "src.grh.views",
        "documentation": {}
    },
    {
        "label": "PasswordResetFormView",
        "kind": 6,
        "importPath": "src.grh.views",
        "description": "src.grh.views",
        "peekOfCode": "class PasswordResetFormView(PasswordResetView):\n    template_name = 'grh/auth/password_reset_form.html'\n    url = reverse_lazy('grh.login')\n    url2 = reverse_lazy('grh.password_reset_complete')\n    def get(self, request, *args, **kwargs):\n        context = self.get_context_data(**kwargs)\n        email = self.request.session.get('email', None)\n        code_verification = self.request.session.get('code_verification', None)\n        user = self.request.session.get('user', None)\n        self.request.session['error'] = None",
        "detail": "src.grh.views",
        "documentation": {}
    },
    {
        "label": "PasswordResetDoneView",
        "kind": 6,
        "importPath": "src.grh.views",
        "description": "src.grh.views",
        "peekOfCode": "class PasswordResetDoneView(TemplateView):\n    template_name = 'grh/auth/password_reset_done.html'\nclass PasswordResetCompleteView(PasswordResetCompleteView):\n    template_name = 'grh/auth/password_reset_complete.html'\n# DEMANDES INCORPORATIONS GRH \nclass IncorporationsByGrhView(TemplateView):\n    template_name = \"grh/incorporations_by_grh.html\"\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        police_id = kwargs.get('police_id')",
        "detail": "src.grh.views",
        "documentation": {}
    },
    {
        "label": "PasswordResetCompleteView",
        "kind": 6,
        "importPath": "src.grh.views",
        "description": "src.grh.views",
        "peekOfCode": "class PasswordResetCompleteView(PasswordResetCompleteView):\n    template_name = 'grh/auth/password_reset_complete.html'\n# DEMANDES INCORPORATIONS GRH \nclass IncorporationsByGrhView(TemplateView):\n    template_name = \"grh/incorporations_by_grh.html\"\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        police_id = kwargs.get('police_id')\n        police = get_object_or_404(Police, id=police_id)\n        aliment_ids = MouvementAliment.objects.filter(statut_traitement=StatutTraitement.NON_TRAITE,",
        "detail": "src.grh.views",
        "documentation": {}
    },
    {
        "label": "IncorporationsByGrhView",
        "kind": 6,
        "importPath": "src.grh.views",
        "description": "src.grh.views",
        "peekOfCode": "class IncorporationsByGrhView(TemplateView):\n    template_name = \"grh/incorporations_by_grh.html\"\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        police_id = kwargs.get('police_id')\n        police = get_object_or_404(Police, id=police_id)\n        aliment_ids = MouvementAliment.objects.filter(statut_traitement=StatutTraitement.NON_TRAITE,\n                                                      police=police).values_list('aliment_id')\n        aliments = Aliment.objects.filter(id__in=aliment_ids)\n        context['aliments'] = aliments",
        "detail": "src.grh.views",
        "documentation": {}
    },
    {
        "label": "set_client",
        "kind": 2,
        "importPath": "src.grh.views",
        "description": "src.grh.views",
        "peekOfCode": "def set_client(request):\n    if request.method == 'POST':\n        user = request.user\n        if user.client_grh is not None:\n            client_id = request.POST.get('client_id')\n            utilisateur_grh = Client.objects.get(pk=client_id)\n            user.utilisateur_grh = utilisateur_grh\n            user.save()\n    # Get the previous URL from the 'HTTP_REFERER' header, if available\n    previous_page = request.META.get('HTTP_REFERER')",
        "detail": "src.grh.views",
        "documentation": {}
    },
    {
        "label": "beneficiaire_police_datatable",
        "kind": 2,
        "importPath": "src.grh.views",
        "description": "src.grh.views",
        "peekOfCode": "def beneficiaire_police_datatable(request, police_id):\n    items_per_page = 10\n    page_number = request.GET.get('page')\n    start = int(request.GET.get('start', 0))\n    length = int(request.GET.get('length', items_per_page))\n    sort_column_index = int(request.GET.get('order[0][column]'))\n    sort_direction = request.GET.get('order[0][dir]')\n    search = request.GET.get('search[value]', '')\n    search_etat = request.GET.get('search_etat', '')\n    police = get_object_or_404(Police, id=police_id)",
        "detail": "src.grh.views",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "src.grh.views",
        "description": "src.grh.views",
        "peekOfCode": "User = get_user_model()\nfrom production.models import Aliment, AlimentFormule, Bareme, Document, FormuleGarantie, Mouvement, \\\n    MouvementAliment, MouvementPolice, Police, Quittance, Reglement, TarifPrestataireClient, TypeDocument, Client\nfrom configurations.models import Civilite, Pays, Prestataire, PrestataireReseauSoin, QualiteBeneficiaire, \\\n    ReseauSoin, TypePrestataire, User\nfrom shared.enum import Statut, StatutQuittance, Genre, StatutEnrolement, StatutValidite, StatutIncorporation, \\\n    StatutTraitement\nfrom django.db.models import ExpressionWrapper, F, DurationField, Q, Value\nfrom django.db.models import Count\nfrom .helper import generate_uiid, send_email, format_phone_number,export_beneficiaire,send_otp_mail",
        "detail": "src.grh.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "src.inov.asgi",
        "description": "src.inov.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "src.inov.asgi",
        "documentation": {}
    },
    {
        "label": "cron_all_once",
        "kind": 2,
        "importPath": "src.inov.cron",
        "description": "src.inov.cron",
        "peekOfCode": "def cron_all_once(request):\n    dd(\"EXECUTION DES TACHES CRONS A LA SUITE \")\ndef cron_pays(request):\n    data = veos.get_pays_lists()\n    CronLog.objects.create(action=\"import\", table=\"pays\", description=\"Data import cron executed\").save()\n    return JsonResponse(data, safe=False)\ndef cron_bureau(request):\n    data = veos.get_bureaux_lists() # A revoir\n    CronLog.objects.create(action=\"import\", table=\"bureau\", description=\"Data import cron executed\").save()\n    return JsonResponse(data, safe=False)",
        "detail": "src.inov.cron",
        "documentation": {}
    },
    {
        "label": "cron_pays",
        "kind": 2,
        "importPath": "src.inov.cron",
        "description": "src.inov.cron",
        "peekOfCode": "def cron_pays(request):\n    data = veos.get_pays_lists()\n    CronLog.objects.create(action=\"import\", table=\"pays\", description=\"Data import cron executed\").save()\n    return JsonResponse(data, safe=False)\ndef cron_bureau(request):\n    data = veos.get_bureaux_lists() # A revoir\n    CronLog.objects.create(action=\"import\", table=\"bureau\", description=\"Data import cron executed\").save()\n    return JsonResponse(data, safe=False)\ndef cron_devise(request):\n    data = veos.get_devise_lists()",
        "detail": "src.inov.cron",
        "documentation": {}
    },
    {
        "label": "cron_bureau",
        "kind": 2,
        "importPath": "src.inov.cron",
        "description": "src.inov.cron",
        "peekOfCode": "def cron_bureau(request):\n    data = veos.get_bureaux_lists() # A revoir\n    CronLog.objects.create(action=\"import\", table=\"bureau\", description=\"Data import cron executed\").save()\n    return JsonResponse(data, safe=False)\ndef cron_devise(request):\n    data = veos.get_devise_lists()\n    CronLog.objects.create(action=\"import\", table=\"devise\", description=\"Data import cron executed\").save()\n    return JsonResponse(data, safe=False)\ndef cron_periode_comptable(request):\n    data = create_periode_comptable()",
        "detail": "src.inov.cron",
        "documentation": {}
    },
    {
        "label": "cron_devise",
        "kind": 2,
        "importPath": "src.inov.cron",
        "description": "src.inov.cron",
        "peekOfCode": "def cron_devise(request):\n    data = veos.get_devise_lists()\n    CronLog.objects.create(action=\"import\", table=\"devise\", description=\"Data import cron executed\").save()\n    return JsonResponse(data, safe=False)\ndef cron_periode_comptable(request):\n    data = create_periode_comptable()\n    CronLog.objects.create(action=\"create\", table=\"periode_comptable\", description=\"Created accounting period succefully\").save()\n    return JsonResponse(data, safe=False)\ndef cron_compagnie(request):\n    data = veos.get_compagnie_lists()",
        "detail": "src.inov.cron",
        "documentation": {}
    },
    {
        "label": "cron_periode_comptable",
        "kind": 2,
        "importPath": "src.inov.cron",
        "description": "src.inov.cron",
        "peekOfCode": "def cron_periode_comptable(request):\n    data = create_periode_comptable()\n    CronLog.objects.create(action=\"create\", table=\"periode_comptable\", description=\"Created accounting period succefully\").save()\n    return JsonResponse(data, safe=False)\ndef cron_compagnie(request):\n    data = veos.get_compagnie_lists()\n    CronLog.objects.create(action=\"import\", table=\"compagnie\", description=\"Data import cron executed\").save()\n    return JsonResponse(data, safe=False)\ndef cron_client():\n    data = veos.get_clients_lists()",
        "detail": "src.inov.cron",
        "documentation": {}
    },
    {
        "label": "cron_compagnie",
        "kind": 2,
        "importPath": "src.inov.cron",
        "description": "src.inov.cron",
        "peekOfCode": "def cron_compagnie(request):\n    data = veos.get_compagnie_lists()\n    CronLog.objects.create(action=\"import\", table=\"compagnie\", description=\"Data import cron executed\").save()\n    return JsonResponse(data, safe=False)\ndef cron_client():\n    data = veos.get_clients_lists()\n    CronLog.objects.create(action=\"import\", table=\"client\", description=\"Data import cron executed\").save()\n    return JsonResponse(data, safe=False)\ndef cron_client_m(request):\n    data = veos.get_clients_lists()",
        "detail": "src.inov.cron",
        "documentation": {}
    },
    {
        "label": "cron_client",
        "kind": 2,
        "importPath": "src.inov.cron",
        "description": "src.inov.cron",
        "peekOfCode": "def cron_client():\n    data = veos.get_clients_lists()\n    CronLog.objects.create(action=\"import\", table=\"client\", description=\"Data import cron executed\").save()\n    return JsonResponse(data, safe=False)\ndef cron_client_m(request):\n    data = veos.get_clients_lists()\n    CronLog.objects.create(action=\"import\", table=\"client\", description=\"Data import cron executed -m\").save()\n    return JsonResponse(data, safe=False)\ndef cron_police():\n    data = veos.get_polices_lists()",
        "detail": "src.inov.cron",
        "documentation": {}
    },
    {
        "label": "cron_client_m",
        "kind": 2,
        "importPath": "src.inov.cron",
        "description": "src.inov.cron",
        "peekOfCode": "def cron_client_m(request):\n    data = veos.get_clients_lists()\n    CronLog.objects.create(action=\"import\", table=\"client\", description=\"Data import cron executed -m\").save()\n    return JsonResponse(data, safe=False)\ndef cron_police():\n    data = veos.get_polices_lists()\n    CronLog.objects.create(action=\"import\", table=\"police\", description=\"Data import cron executed\").save()\n    return JsonResponse(data, safe=False)\ndef send_polices(request):\n    response = veos.send_polices()",
        "detail": "src.inov.cron",
        "documentation": {}
    },
    {
        "label": "cron_police",
        "kind": 2,
        "importPath": "src.inov.cron",
        "description": "src.inov.cron",
        "peekOfCode": "def cron_police():\n    data = veos.get_polices_lists()\n    CronLog.objects.create(action=\"import\", table=\"police\", description=\"Data import cron executed\").save()\n    return JsonResponse(data, safe=False)\ndef send_polices(request):\n    response = veos.send_polices()\n    CronLog.objects.create(action=\"export\", table=\"police\", description=\"Police sent cron executed\").save()\n    return JsonResponse(response, safe=False)\ndef cron_police_m(request):\n    data = veos.get_polices_lists()",
        "detail": "src.inov.cron",
        "documentation": {}
    },
    {
        "label": "send_polices",
        "kind": 2,
        "importPath": "src.inov.cron",
        "description": "src.inov.cron",
        "peekOfCode": "def send_polices(request):\n    response = veos.send_polices()\n    CronLog.objects.create(action=\"export\", table=\"police\", description=\"Police sent cron executed\").save()\n    return JsonResponse(response, safe=False)\ndef cron_police_m(request):\n    data = veos.get_polices_lists()\n    CronLog.objects.create(action=\"import\", table=\"police\", description=\"Data import cron executed -m\").save()\n    return JsonResponse(data, safe=False)\ndef cron_formule():\n    data = veos.get_formules_lists()",
        "detail": "src.inov.cron",
        "documentation": {}
    },
    {
        "label": "cron_police_m",
        "kind": 2,
        "importPath": "src.inov.cron",
        "description": "src.inov.cron",
        "peekOfCode": "def cron_police_m(request):\n    data = veos.get_polices_lists()\n    CronLog.objects.create(action=\"import\", table=\"police\", description=\"Data import cron executed -m\").save()\n    return JsonResponse(data, safe=False)\ndef cron_formule():\n    data = veos.get_formules_lists()\n    CronLog.objects.create(action=\"import\", table=\"formule\", description=\"Data import cron executed\").save()\n    return JsonResponse(data, safe=False)\ndef cron_formule_m(request):\n    data = veos.get_formules_lists()",
        "detail": "src.inov.cron",
        "documentation": {}
    },
    {
        "label": "cron_formule",
        "kind": 2,
        "importPath": "src.inov.cron",
        "description": "src.inov.cron",
        "peekOfCode": "def cron_formule():\n    data = veos.get_formules_lists()\n    CronLog.objects.create(action=\"import\", table=\"formule\", description=\"Data import cron executed\").save()\n    return JsonResponse(data, safe=False)\ndef cron_formule_m(request):\n    data = veos.get_formules_lists()\n    CronLog.objects.create(action=\"import\", table=\"formule\", description=\"Data import cron executed -m\").save()\n    return JsonResponse(data, safe=False)\ndef cron_aliment():\n    data = veos.get_aliments_lists()",
        "detail": "src.inov.cron",
        "documentation": {}
    },
    {
        "label": "cron_formule_m",
        "kind": 2,
        "importPath": "src.inov.cron",
        "description": "src.inov.cron",
        "peekOfCode": "def cron_formule_m(request):\n    data = veos.get_formules_lists()\n    CronLog.objects.create(action=\"import\", table=\"formule\", description=\"Data import cron executed -m\").save()\n    return JsonResponse(data, safe=False)\ndef cron_aliment():\n    data = veos.get_aliments_lists()\n    CronLog.objects.create(action=\"import\", table=\"aliment\", description=\"Data import cron executed\").save()\n    return JsonResponse(data, safe=False)\ndef cron_aliment_m(request):\n    data = veos.get_aliments_lists()",
        "detail": "src.inov.cron",
        "documentation": {}
    },
    {
        "label": "cron_aliment",
        "kind": 2,
        "importPath": "src.inov.cron",
        "description": "src.inov.cron",
        "peekOfCode": "def cron_aliment():\n    data = veos.get_aliments_lists()\n    CronLog.objects.create(action=\"import\", table=\"aliment\", description=\"Data import cron executed\").save()\n    return JsonResponse(data, safe=False)\ndef cron_aliment_m(request):\n    data = veos.get_aliments_lists()\n    CronLog.objects.create(action=\"import\", table=\"aliment\", description=\"Data import cron executed -m\").save()\n    return JsonResponse(data, safe=False)\ndef cron_prestataire():\n    data = veos.get_prestataire_lists()",
        "detail": "src.inov.cron",
        "documentation": {}
    },
    {
        "label": "cron_aliment_m",
        "kind": 2,
        "importPath": "src.inov.cron",
        "description": "src.inov.cron",
        "peekOfCode": "def cron_aliment_m(request):\n    data = veos.get_aliments_lists()\n    CronLog.objects.create(action=\"import\", table=\"aliment\", description=\"Data import cron executed -m\").save()\n    return JsonResponse(data, safe=False)\ndef cron_prestataire():\n    data = veos.get_prestataire_lists()\n    CronLog.objects.create(action=\"import\", table=\"prestataire\", description=\"Data import cron executed\").save()\n    return JsonResponse(data, safe=False)\ndef cron_prestataire_m(request):\n    data = veos.get_prestataire_lists()",
        "detail": "src.inov.cron",
        "documentation": {}
    },
    {
        "label": "cron_prestataire",
        "kind": 2,
        "importPath": "src.inov.cron",
        "description": "src.inov.cron",
        "peekOfCode": "def cron_prestataire():\n    data = veos.get_prestataire_lists()\n    CronLog.objects.create(action=\"import\", table=\"prestataire\", description=\"Data import cron executed\").save()\n    return JsonResponse(data, safe=False)\ndef cron_prestataire_m(request):\n    data = veos.get_prestataire_lists()\n    CronLog.objects.create(action=\"import\", table=\"prestataire\", description=\"Data import cron executed -m\").save()\n    return JsonResponse(data, safe=False)\ndef cron_prescripteur():\n    data = veos.get_prescripteurs_lists()",
        "detail": "src.inov.cron",
        "documentation": {}
    },
    {
        "label": "cron_prestataire_m",
        "kind": 2,
        "importPath": "src.inov.cron",
        "description": "src.inov.cron",
        "peekOfCode": "def cron_prestataire_m(request):\n    data = veos.get_prestataire_lists()\n    CronLog.objects.create(action=\"import\", table=\"prestataire\", description=\"Data import cron executed -m\").save()\n    return JsonResponse(data, safe=False)\ndef cron_prescripteur():\n    data = veos.get_prescripteurs_lists()\n    CronLog.objects.create(action=\"import\", table=\"prescripteur\", description=\"Data import cron executed\").save()\n    return JsonResponse(data, safe=False)\ndef cron_prescripteur_m(request):\n    data = veos.get_prescripteurs_lists()",
        "detail": "src.inov.cron",
        "documentation": {}
    },
    {
        "label": "cron_prescripteur",
        "kind": 2,
        "importPath": "src.inov.cron",
        "description": "src.inov.cron",
        "peekOfCode": "def cron_prescripteur():\n    data = veos.get_prescripteurs_lists()\n    CronLog.objects.create(action=\"import\", table=\"prescripteur\", description=\"Data import cron executed\").save()\n    return JsonResponse(data, safe=False)\ndef cron_prescripteur_m(request):\n    data = veos.get_prescripteurs_lists()\n    CronLog.objects.create(action=\"import\", table=\"prescripteur\", description=\"Data import cron executed -m\").save()\n    return JsonResponse(data, safe=False)\ndef cron_specialite(request):\n    data = veos.get_specialites_lists()",
        "detail": "src.inov.cron",
        "documentation": {}
    },
    {
        "label": "cron_prescripteur_m",
        "kind": 2,
        "importPath": "src.inov.cron",
        "description": "src.inov.cron",
        "peekOfCode": "def cron_prescripteur_m(request):\n    data = veos.get_prescripteurs_lists()\n    CronLog.objects.create(action=\"import\", table=\"prescripteur\", description=\"Data import cron executed -m\").save()\n    return JsonResponse(data, safe=False)\ndef cron_specialite(request):\n    data = veos.get_specialites_lists()\n    CronLog.objects.create(action=\"import\", table=\"specialite\", description=\"Data import cron executed\").save()\n    return JsonResponse(data, safe=False)\ndef cron_sinistre():\n    data = veos.get_sinistres_lists()",
        "detail": "src.inov.cron",
        "documentation": {}
    },
    {
        "label": "cron_specialite",
        "kind": 2,
        "importPath": "src.inov.cron",
        "description": "src.inov.cron",
        "peekOfCode": "def cron_specialite(request):\n    data = veos.get_specialites_lists()\n    CronLog.objects.create(action=\"import\", table=\"specialite\", description=\"Data import cron executed\").save()\n    return JsonResponse(data, safe=False)\ndef cron_sinistre():\n    data = veos.get_sinistres_lists()\n    CronLog.objects.create(action=\"import\", table=\"sinistre\", description=\"Data import cron executed\").save()\n    return JsonResponse(data, safe=False)\ndef cron_sinistre_m(request):\n    data = veos.get_sinistres_lists()",
        "detail": "src.inov.cron",
        "documentation": {}
    },
    {
        "label": "cron_sinistre",
        "kind": 2,
        "importPath": "src.inov.cron",
        "description": "src.inov.cron",
        "peekOfCode": "def cron_sinistre():\n    data = veos.get_sinistres_lists()\n    CronLog.objects.create(action=\"import\", table=\"sinistre\", description=\"Data import cron executed\").save()\n    return JsonResponse(data, safe=False)\ndef cron_sinistre_m(request):\n    data = veos.get_sinistres_lists()\n    CronLog.objects.create(action=\"import\", table=\"sinistre\", description=\"Data import cron executed -m\").save()\n    return JsonResponse(data, safe=False)\ndef cron_create_sinistre():\n    response = veos.cron_create_sinistre()",
        "detail": "src.inov.cron",
        "documentation": {}
    },
    {
        "label": "cron_sinistre_m",
        "kind": 2,
        "importPath": "src.inov.cron",
        "description": "src.inov.cron",
        "peekOfCode": "def cron_sinistre_m(request):\n    data = veos.get_sinistres_lists()\n    CronLog.objects.create(action=\"import\", table=\"sinistre\", description=\"Data import cron executed -m\").save()\n    return JsonResponse(data, safe=False)\ndef cron_create_sinistre():\n    response = veos.cron_create_sinistre()\n    CronLog.objects.create(action=\"send\", table=\"sinistre\", description=\"Send sinistres to veos\").save()\n    pass\ndef cron_acte(request):\n    data = veos.get_actes_lists()",
        "detail": "src.inov.cron",
        "documentation": {}
    },
    {
        "label": "cron_create_sinistre",
        "kind": 2,
        "importPath": "src.inov.cron",
        "description": "src.inov.cron",
        "peekOfCode": "def cron_create_sinistre():\n    response = veos.cron_create_sinistre()\n    CronLog.objects.create(action=\"send\", table=\"sinistre\", description=\"Send sinistres to veos\").save()\n    pass\ndef cron_acte(request):\n    data = veos.get_actes_lists()\n    CronLog.objects.create(action=\"import\", table=\"acte\", description=\"Data import cron executed\").save()\n    return JsonResponse(data, safe=False)\ndef cron_photo_m(request, numero_police=None):\n    data = veos.get_photos_lists(numero_police)",
        "detail": "src.inov.cron",
        "documentation": {}
    },
    {
        "label": "cron_acte",
        "kind": 2,
        "importPath": "src.inov.cron",
        "description": "src.inov.cron",
        "peekOfCode": "def cron_acte(request):\n    data = veos.get_actes_lists()\n    CronLog.objects.create(action=\"import\", table=\"acte\", description=\"Data import cron executed\").save()\n    return JsonResponse(data, safe=False)\ndef cron_photo_m(request, numero_police=None):\n    data = veos.get_photos_lists(numero_police)\n    CronLog.objects.create(action=\"import\", table=\"photo\", description=\"Data import cron executed\").save()\n    return JsonResponse(data, safe=False)\ndef cron_backgroundrequesttask(request):\n    CronLog.objects.create(action=\"export\", table=\"background_query_task\",",
        "detail": "src.inov.cron",
        "documentation": {}
    },
    {
        "label": "cron_photo_m",
        "kind": 2,
        "importPath": "src.inov.cron",
        "description": "src.inov.cron",
        "peekOfCode": "def cron_photo_m(request, numero_police=None):\n    data = veos.get_photos_lists(numero_police)\n    CronLog.objects.create(action=\"import\", table=\"photo\", description=\"Data import cron executed\").save()\n    return JsonResponse(data, safe=False)\ndef cron_backgroundrequesttask(request):\n    CronLog.objects.create(action=\"export\", table=\"background_query_task\",\n                           description=\"Background request task cron executed\").save()\n    send_notification_background_task_mail('a.tissi@inov.africa', None)\n    # load_backgroound_request_task()\n    # return JsonResponse({\"message\": \"Background request task cron executed\"}, safe=False)",
        "detail": "src.inov.cron",
        "documentation": {}
    },
    {
        "label": "cron_backgroundrequesttask",
        "kind": 2,
        "importPath": "src.inov.cron",
        "description": "src.inov.cron",
        "peekOfCode": "def cron_backgroundrequesttask(request):\n    CronLog.objects.create(action=\"export\", table=\"background_query_task\",\n                           description=\"Background request task cron executed\").save()\n    send_notification_background_task_mail('a.tissi@inov.africa', None)\n    # load_backgroound_request_task()\n    # return JsonResponse({\"message\": \"Background request task cron executed\"}, safe=False)\ndef send_sinistres(request):\n    response = veos.send_sinistres()\n    CronLog.objects.create(action=\"export\", table=\"sinistre\", description=\"Sinistres sent cron executed\").save()\n    return JsonResponse(response, safe=False)",
        "detail": "src.inov.cron",
        "documentation": {}
    },
    {
        "label": "send_sinistres",
        "kind": 2,
        "importPath": "src.inov.cron",
        "description": "src.inov.cron",
        "peekOfCode": "def send_sinistres(request):\n    response = veos.send_sinistres()\n    CronLog.objects.create(action=\"export\", table=\"sinistre\", description=\"Sinistres sent cron executed\").save()\n    return JsonResponse(response, safe=False)\ndef send_quittances(request):\n    response = veos.send_quittances()\n    CronLog.objects.create(action=\"export\", table=\"quittance\", description=\"Quittances sent cron executed\").save()\n    return JsonResponse(response, safe=False)\ndef cron_vue_quittances():\n    data = veos.updt_mvquittances()",
        "detail": "src.inov.cron",
        "documentation": {}
    },
    {
        "label": "send_quittances",
        "kind": 2,
        "importPath": "src.inov.cron",
        "description": "src.inov.cron",
        "peekOfCode": "def send_quittances(request):\n    response = veos.send_quittances()\n    CronLog.objects.create(action=\"export\", table=\"quittance\", description=\"Quittances sent cron executed\").save()\n    return JsonResponse(response, safe=False)\ndef cron_vue_quittances():\n    data = veos.updt_mvquittances()\n    CronLog.objects.create(action=\"import\", table=\"quittance\", description=\"Quittances import to view cron executed\").save()\n    return JsonResponse(data, safe=False)\ndef cron_vue_quittances_m(request):\n    data = veos.updt_mvquittances()",
        "detail": "src.inov.cron",
        "documentation": {}
    },
    {
        "label": "cron_vue_quittances",
        "kind": 2,
        "importPath": "src.inov.cron",
        "description": "src.inov.cron",
        "peekOfCode": "def cron_vue_quittances():\n    data = veos.updt_mvquittances()\n    CronLog.objects.create(action=\"import\", table=\"quittance\", description=\"Quittances import to view cron executed\").save()\n    return JsonResponse(data, safe=False)\ndef cron_vue_quittances_m(request):\n    data = veos.updt_mvquittances()\n    CronLog.objects.create(action=\"import\", table=\"quittance\", description=\"Quittances import to view cron executed - m\").save()\n    return JsonResponse(data, safe=False)\ndef send_clients_to_veos(request):\n    data = veos.send_list_clients_to_veos()",
        "detail": "src.inov.cron",
        "documentation": {}
    },
    {
        "label": "cron_vue_quittances_m",
        "kind": 2,
        "importPath": "src.inov.cron",
        "description": "src.inov.cron",
        "peekOfCode": "def cron_vue_quittances_m(request):\n    data = veos.updt_mvquittances()\n    CronLog.objects.create(action=\"import\", table=\"quittance\", description=\"Quittances import to view cron executed - m\").save()\n    return JsonResponse(data, safe=False)\ndef send_clients_to_veos(request):\n    data = veos.send_list_clients_to_veos()\n    CronLog.objects.create(action=\"create\", table=\"clients\", description=\"Clients synchronisation V2 to VEOS cron executed \" + str(data)).save()\n    return JsonResponse(data, safe=False)\ndef send_clients_to_veos(request):\n    data = veos.send_list_clients_to_veos()",
        "detail": "src.inov.cron",
        "documentation": {}
    },
    {
        "label": "send_clients_to_veos",
        "kind": 2,
        "importPath": "src.inov.cron",
        "description": "src.inov.cron",
        "peekOfCode": "def send_clients_to_veos(request):\n    data = veos.send_list_clients_to_veos()\n    CronLog.objects.create(action=\"create\", table=\"clients\", description=\"Clients synchronisation V2 to VEOS cron executed \" + str(data)).save()\n    return JsonResponse(data, safe=False)\ndef send_clients_to_veos(request):\n    data = veos.send_list_clients_to_veos()\n    CronLog.objects.create(action=\"create\", table=\"clients\", description=\"Clients synchronisation V2 to VEOS cron executed \" + str(data)).save()\n    return JsonResponse(data, safe=False)\ndef cron_alerte_consommation():\n    data = alert_consumption()",
        "detail": "src.inov.cron",
        "documentation": {}
    },
    {
        "label": "send_clients_to_veos",
        "kind": 2,
        "importPath": "src.inov.cron",
        "description": "src.inov.cron",
        "peekOfCode": "def send_clients_to_veos(request):\n    data = veos.send_list_clients_to_veos()\n    CronLog.objects.create(action=\"create\", table=\"clients\", description=\"Clients synchronisation V2 to VEOS cron executed \" + str(data)).save()\n    return JsonResponse(data, safe=False)\ndef cron_alerte_consommation():\n    data = alert_consumption()\n    CronLog.objects.create(action=\"alert_mail\", table=\"noname\",\n                           description=\"Alerte mail suivi de consommation garant\").save()\n    return JsonResponse(data, safe=False)\ndef cron_import_sinistre():",
        "detail": "src.inov.cron",
        "documentation": {}
    },
    {
        "label": "cron_alerte_consommation",
        "kind": 2,
        "importPath": "src.inov.cron",
        "description": "src.inov.cron",
        "peekOfCode": "def cron_alerte_consommation():\n    data = alert_consumption()\n    CronLog.objects.create(action=\"alert_mail\", table=\"noname\",\n                           description=\"Alerte mail suivi de consommation garant\").save()\n    return JsonResponse(data, safe=False)\ndef cron_import_sinistre():\n    data = import_sinistre_manuellement_cron()\n    CronLog.objects.create(action=\"cron_sinistre\", table=\"noname\",\n                           description=\"cron_sinistre\").save()\n    return JsonResponse(data, safe=False)",
        "detail": "src.inov.cron",
        "documentation": {}
    },
    {
        "label": "cron_import_sinistre",
        "kind": 2,
        "importPath": "src.inov.cron",
        "description": "src.inov.cron",
        "peekOfCode": "def cron_import_sinistre():\n    data = import_sinistre_manuellement_cron()\n    CronLog.objects.create(action=\"cron_sinistre\", table=\"noname\",\n                           description=\"cron_sinistre\").save()\n    return JsonResponse(data, safe=False)\ndef cron_get_clients_from_veos():\n    data = veos.get_clients_from_veos()\n    #dd(data)\n    CronLog.objects.create(action=\"import\", table=\"client\", description=\"Import Clients synchronisation V2 from VEOS cron executed \" + str(data)).save()\n    return JsonResponse(data, safe=False)",
        "detail": "src.inov.cron",
        "documentation": {}
    },
    {
        "label": "cron_get_clients_from_veos",
        "kind": 2,
        "importPath": "src.inov.cron",
        "description": "src.inov.cron",
        "peekOfCode": "def cron_get_clients_from_veos():\n    data = veos.get_clients_from_veos()\n    #dd(data)\n    CronLog.objects.create(action=\"import\", table=\"client\", description=\"Import Clients synchronisation V2 from VEOS cron executed \" + str(data)).save()\n    return JsonResponse(data, safe=False)\ndef cron_get_clients_from_veos_m(request):\n    data = veos.get_clients_from_veos()\n    #dd(data)\n    CronLog.objects.create(action=\"import\", table=\"client\", description=\"Import Clients synchronisation V2 from VEOS cron executed -m \" + str(data)).save()\n    return JsonResponse(data, safe=False)",
        "detail": "src.inov.cron",
        "documentation": {}
    },
    {
        "label": "cron_get_clients_from_veos_m",
        "kind": 2,
        "importPath": "src.inov.cron",
        "description": "src.inov.cron",
        "peekOfCode": "def cron_get_clients_from_veos_m(request):\n    data = veos.get_clients_from_veos()\n    #dd(data)\n    CronLog.objects.create(action=\"import\", table=\"client\", description=\"Import Clients synchronisation V2 from VEOS cron executed -m \" + str(data)).save()\n    return JsonResponse(data, safe=False)",
        "detail": "src.inov.cron",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "src.inov.cron",
        "description": "src.inov.cron",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef cron_all_once(request):\n    dd(\"EXECUTION DES TACHES CRONS A LA SUITE \")\ndef cron_pays(request):\n    data = veos.get_pays_lists()\n    CronLog.objects.create(action=\"import\", table=\"pays\", description=\"Data import cron executed\").save()\n    return JsonResponse(data, safe=False)\ndef cron_bureau(request):\n    data = veos.get_bureaux_lists() # A revoir\n    CronLog.objects.create(action=\"import\", table=\"bureau\", description=\"Data import cron executed\").save()",
        "detail": "src.inov.cron",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "src.inov.settings",
        "description": "src.inov.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\nfrom environ import environ\nenv = environ.Env()\nenviron.Env.read_env(env_file=str(BASE_DIR / \"inov\" / \".env\"))\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = env(\"SECRET_KEY\")\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = env.bool(\"DEBUG\", False)",
        "detail": "src.inov.settings",
        "documentation": {}
    },
    {
        "label": "env",
        "kind": 5,
        "importPath": "src.inov.settings",
        "description": "src.inov.settings",
        "peekOfCode": "env = environ.Env()\nenviron.Env.read_env(env_file=str(BASE_DIR / \"inov\" / \".env\"))\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = env(\"SECRET_KEY\")\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = env.bool(\"DEBUG\", False)\nALLOWED_HOSTS = env.list(\"ALLOWED_HOSTS\")\nBASE = env(\"BASE\")  # PROD OU PREPROD",
        "detail": "src.inov.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "src.inov.settings",
        "description": "src.inov.settings",
        "peekOfCode": "SECRET_KEY = env(\"SECRET_KEY\")\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = env.bool(\"DEBUG\", False)\nALLOWED_HOSTS = env.list(\"ALLOWED_HOSTS\")\nBASE = env(\"BASE\")  # PROD OU PREPROD\n# Application definition\nINSTALLED_APPS = [\n    \"admin_custom\",\n    \"jazzmin\",\n    \"django.contrib.admin\",",
        "detail": "src.inov.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "src.inov.settings",
        "description": "src.inov.settings",
        "peekOfCode": "DEBUG = env.bool(\"DEBUG\", False)\nALLOWED_HOSTS = env.list(\"ALLOWED_HOSTS\")\nBASE = env(\"BASE\")  # PROD OU PREPROD\n# Application definition\nINSTALLED_APPS = [\n    \"admin_custom\",\n    \"jazzmin\",\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",",
        "detail": "src.inov.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "src.inov.settings",
        "description": "src.inov.settings",
        "peekOfCode": "ALLOWED_HOSTS = env.list(\"ALLOWED_HOSTS\")\nBASE = env(\"BASE\")  # PROD OU PREPROD\n# Application definition\nINSTALLED_APPS = [\n    \"admin_custom\",\n    \"jazzmin\",\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",",
        "detail": "src.inov.settings",
        "documentation": {}
    },
    {
        "label": "BASE",
        "kind": 5,
        "importPath": "src.inov.settings",
        "description": "src.inov.settings",
        "peekOfCode": "BASE = env(\"BASE\")  # PROD OU PREPROD\n# Application definition\nINSTALLED_APPS = [\n    \"admin_custom\",\n    \"jazzmin\",\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",",
        "detail": "src.inov.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "src.inov.settings",
        "description": "src.inov.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    \"admin_custom\",\n    \"jazzmin\",\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",\n    \"django_json_widget\",",
        "detail": "src.inov.settings",
        "documentation": {}
    },
    {
        "label": "REST_FRAMEWORK",
        "kind": 5,
        "importPath": "src.inov.settings",
        "description": "src.inov.settings",
        "peekOfCode": "REST_FRAMEWORK = {\n    \"DEFAULT_PERMISSION_CLASSES\": [\n        \"rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly\"\n    ],\n    \"DEFAULT_AUTHENTICATION_CLASSES\": [\n        \"rest_framework.authentication.BasicAuthentication\",\n        \"rest_framework.authentication.SessionAuthentication\",\n        \"rest_framework_simplejwt.authentication.JWTAuthentication\",\n    ],\n    \"DEFAULT_RENDERER_CLASSES\": [",
        "detail": "src.inov.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "src.inov.settings",
        "description": "src.inov.settings",
        "peekOfCode": "MIDDLEWARE = [\n    \"django_dump_die.middleware.DumpAndDieMiddleware\",\n    \"django.middleware.security.SecurityMiddleware\",\n    \"django.contrib.sessions.middleware.SessionMiddleware\",\n    \"django.middleware.common.CommonMiddleware\",\n    \"django.middleware.csrf.CsrfViewMiddleware\",\n    \"django.contrib.auth.middleware.AuthenticationMiddleware\",\n    \"django.contrib.messages.middleware.MessageMiddleware\",\n    \"django.middleware.clickjacking.XFrameOptionsMiddleware\",\n    \"django.contrib.sessions.middleware.SessionMiddleware\",",
        "detail": "src.inov.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "src.inov.settings",
        "description": "src.inov.settings",
        "peekOfCode": "ROOT_URLCONF = \"inov.urls\"\nTEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [BASE_DIR / \"templates\"],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.request\",",
        "detail": "src.inov.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "src.inov.settings",
        "description": "src.inov.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [BASE_DIR / \"templates\"],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.request\",\n                \"django.contrib.auth.context_processors.auth\",",
        "detail": "src.inov.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "src.inov.settings",
        "description": "src.inov.settings",
        "peekOfCode": "WSGI_APPLICATION = \"inov.wsgi.application\"\n# Database\n# https://docs.djangoproject.com/en/4.0/ref/settings/#databases\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.mysql\",\n        \"NAME\": env(\"DATABASE_NAME\"),\n        \"USER\": env(\"DATABASE_USER\"),\n        \"PASSWORD\": env(\"DATABASE_PWD\"),\n        \"HOST\": env(\"DATABASE_HOST\"),",
        "detail": "src.inov.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "src.inov.settings",
        "description": "src.inov.settings",
        "peekOfCode": "DATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.mysql\",\n        \"NAME\": env(\"DATABASE_NAME\"),\n        \"USER\": env(\"DATABASE_USER\"),\n        \"PASSWORD\": env(\"DATABASE_PWD\"),\n        \"HOST\": env(\"DATABASE_HOST\"),\n        \"PORT\": env(\"DATABASE_PORT\"),\n        # \"OPTIONS\": {\"ssl_mode\": \"DISABLED\"},\n        #'OPTIONS': {",
        "detail": "src.inov.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "src.inov.settings",
        "description": "src.inov.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.UserAttributeSimilarityValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.MinimumLengthValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.CommonPasswordValidator\",\n    },",
        "detail": "src.inov.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "src.inov.settings",
        "description": "src.inov.settings",
        "peekOfCode": "LANGUAGE_CODE = \"fr-fr\"\nTIME_ZONE = \"UTC\"\nUSE_I18N = True\nUSE_TZ = True\n# Provide a lists of languages which your site supports.\nLANGUAGE = (\n    (\"fr\", _(\"Français\")),\n    (\"en\", _(\"English\")),\n)\nPAGE_LANGUAGES = \"PAGE_LANGUAGES\"",
        "detail": "src.inov.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "src.inov.settings",
        "description": "src.inov.settings",
        "peekOfCode": "TIME_ZONE = \"UTC\"\nUSE_I18N = True\nUSE_TZ = True\n# Provide a lists of languages which your site supports.\nLANGUAGE = (\n    (\"fr\", _(\"Français\")),\n    (\"en\", _(\"English\")),\n)\nPAGE_LANGUAGES = \"PAGE_LANGUAGES\"\n# LOGIN_REDIRECT_URL = 'https://google.com'",
        "detail": "src.inov.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "src.inov.settings",
        "description": "src.inov.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Provide a lists of languages which your site supports.\nLANGUAGE = (\n    (\"fr\", _(\"Français\")),\n    (\"en\", _(\"English\")),\n)\nPAGE_LANGUAGES = \"PAGE_LANGUAGES\"\n# LOGIN_REDIRECT_URL = 'https://google.com'\n# Static files (CSS, JavaScript, Images)",
        "detail": "src.inov.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "src.inov.settings",
        "description": "src.inov.settings",
        "peekOfCode": "USE_TZ = True\n# Provide a lists of languages which your site supports.\nLANGUAGE = (\n    (\"fr\", _(\"Français\")),\n    (\"en\", _(\"English\")),\n)\nPAGE_LANGUAGES = \"PAGE_LANGUAGES\"\n# LOGIN_REDIRECT_URL = 'https://google.com'\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.0/howto/static-files/",
        "detail": "src.inov.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE",
        "kind": 5,
        "importPath": "src.inov.settings",
        "description": "src.inov.settings",
        "peekOfCode": "LANGUAGE = (\n    (\"fr\", _(\"Français\")),\n    (\"en\", _(\"English\")),\n)\nPAGE_LANGUAGES = \"PAGE_LANGUAGES\"\n# LOGIN_REDIRECT_URL = 'https://google.com'\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.0/howto/static-files/\n# MEDIA_ROOT = os.path.join(BASE_DIR, 'media')\nSTATIC_URL = \"/static/\"",
        "detail": "src.inov.settings",
        "documentation": {}
    },
    {
        "label": "PAGE_LANGUAGES",
        "kind": 5,
        "importPath": "src.inov.settings",
        "description": "src.inov.settings",
        "peekOfCode": "PAGE_LANGUAGES = \"PAGE_LANGUAGES\"\n# LOGIN_REDIRECT_URL = 'https://google.com'\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.0/howto/static-files/\n# MEDIA_ROOT = os.path.join(BASE_DIR, 'media')\nSTATIC_URL = \"/static/\"\nMEDIA_URL = \"/media/\"\nif env.str(\"ENVIRONMENT\", \"DEV\") == \"PROD\":\n    STATIC_ROOT = env.str(\"STATIC_ROOT\", \"/home/inov.com/public_html/static/\")\n    MEDIA_ROOT = env.str(\"MEDIA_ROOT\", \"/home/inov.com/public_html/media/\")",
        "detail": "src.inov.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "src.inov.settings",
        "description": "src.inov.settings",
        "peekOfCode": "STATIC_URL = \"/static/\"\nMEDIA_URL = \"/media/\"\nif env.str(\"ENVIRONMENT\", \"DEV\") == \"PROD\":\n    STATIC_ROOT = env.str(\"STATIC_ROOT\", \"/home/inov.com/public_html/static/\")\n    MEDIA_ROOT = env.str(\"MEDIA_ROOT\", \"/home/inov.com/public_html/media/\")\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\nAUTH_USER_MODEL = \"configurations.User\"\n# Contains the path list where Django should look into for django.po files for all supported languages",
        "detail": "src.inov.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "src.inov.settings",
        "description": "src.inov.settings",
        "peekOfCode": "MEDIA_URL = \"/media/\"\nif env.str(\"ENVIRONMENT\", \"DEV\") == \"PROD\":\n    STATIC_ROOT = env.str(\"STATIC_ROOT\", \"/home/inov.com/public_html/static/\")\n    MEDIA_ROOT = env.str(\"MEDIA_ROOT\", \"/home/inov.com/public_html/media/\")\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\nAUTH_USER_MODEL = \"configurations.User\"\n# Contains the path list where Django should look into for django.po files for all supported languages\nLOCALE_PATHS = (os.path.join(BASE_DIR, \"locale\"),)",
        "detail": "src.inov.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "src.inov.settings",
        "description": "src.inov.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\nAUTH_USER_MODEL = \"configurations.User\"\n# Contains the path list where Django should look into for django.po files for all supported languages\nLOCALE_PATHS = (os.path.join(BASE_DIR, \"locale\"),)\nJAZZMIN_SETTINGS = {\n    # title of the window (Will default to current_admin_site.site_title if absent or None)\n    \"site_title\": \"Inov\",\n    \"site_brand\": \"Inov\",\n    \"site_header\": \"Inov\",\n    \"site_logo\": \"configurations/images/logo.png\",",
        "detail": "src.inov.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_USER_MODEL",
        "kind": 5,
        "importPath": "src.inov.settings",
        "description": "src.inov.settings",
        "peekOfCode": "AUTH_USER_MODEL = \"configurations.User\"\n# Contains the path list where Django should look into for django.po files for all supported languages\nLOCALE_PATHS = (os.path.join(BASE_DIR, \"locale\"),)\nJAZZMIN_SETTINGS = {\n    # title of the window (Will default to current_admin_site.site_title if absent or None)\n    \"site_title\": \"Inov\",\n    \"site_brand\": \"Inov\",\n    \"site_header\": \"Inov\",\n    \"site_logo\": \"configurations/images/logo.png\",\n    \"site_logo_classes\": \"custom-logo\",",
        "detail": "src.inov.settings",
        "documentation": {}
    },
    {
        "label": "LOCALE_PATHS",
        "kind": 5,
        "importPath": "src.inov.settings",
        "description": "src.inov.settings",
        "peekOfCode": "LOCALE_PATHS = (os.path.join(BASE_DIR, \"locale\"),)\nJAZZMIN_SETTINGS = {\n    # title of the window (Will default to current_admin_site.site_title if absent or None)\n    \"site_title\": \"Inov\",\n    \"site_brand\": \"Inov\",\n    \"site_header\": \"Inov\",\n    \"site_logo\": \"configurations/images/logo.png\",\n    \"site_logo_classes\": \"custom-logo\",\n    # \"logo_for_carte\": \"https://storage.gra.cloud.ovh.net/v1/AUTH_e15f6f9849b947e9845253c522fb5927/inov/public/medias/original/mxkiNNUNxvlYW5uYQidvYKxUVVgB5VfKEDtl02hg.png\",\n    \"logo_for_carte\": \"http://127.0.0.1:8000/static/configurations/images/logo.png\",",
        "detail": "src.inov.settings",
        "documentation": {}
    },
    {
        "label": "JAZZMIN_SETTINGS",
        "kind": 5,
        "importPath": "src.inov.settings",
        "description": "src.inov.settings",
        "peekOfCode": "JAZZMIN_SETTINGS = {\n    # title of the window (Will default to current_admin_site.site_title if absent or None)\n    \"site_title\": \"Inov\",\n    \"site_brand\": \"Inov\",\n    \"site_header\": \"Inov\",\n    \"site_logo\": \"configurations/images/logo.png\",\n    \"site_logo_classes\": \"custom-logo\",\n    # \"logo_for_carte\": \"https://storage.gra.cloud.ovh.net/v1/AUTH_e15f6f9849b947e9845253c522fb5927/inov/public/medias/original/mxkiNNUNxvlYW5uYQidvYKxUVVgB5VfKEDtl02hg.png\",\n    \"logo_for_carte\": \"http://127.0.0.1:8000/static/configurations/images/logo.png\",\n    # \"search_model\": AUTH_USER_MODEL,",
        "detail": "src.inov.settings",
        "documentation": {}
    },
    {
        "label": "SIMPLE_JWT",
        "kind": 5,
        "importPath": "src.inov.settings",
        "description": "src.inov.settings",
        "peekOfCode": "SIMPLE_JWT = {\n    \"ACCESS_TOKEN_LIFETIME\": timedelta(days=365),\n    \"REFRESH_TOKEN_LIFETIME\": timedelta(days=365),\n    \"AUTH_HEADER_TYPES\": (\"Bearer\",),\n    \"AUTH_HEADER_NAME\": \"HTTP_AUTHORIZATION\",\n    \"USER_ID_FIELD\": \"id\",\n    \"USER_ID_CLAIM\": \"user_id\",\n    \"USER_AUTHENTICATION_RULE\": \"rest_framework_simplejwt.authentication.default_user_authentication_rule\",\n    \"AUTH_TOKEN_CLASSES\": (\"rest_framework_simplejwt.tokens.AccessToken\",),\n    \"TOKEN_TYPE_CLAIM\": \"token_type\",",
        "detail": "src.inov.settings",
        "documentation": {}
    },
    {
        "label": "X_FRAME_OPTIONS",
        "kind": 5,
        "importPath": "src.inov.settings",
        "description": "src.inov.settings",
        "peekOfCode": "X_FRAME_OPTIONS = \"SAMEORIGIN\"\nIMPORT_EXPORT_USE_TRANSACTIONS = True\nCRONJOBS = [\n    # ('0 22 * * *', 'inov.cron.cron_pays'),\n    # ('0 22 * * *', 'inov.cron.cron_bureau'),\n    # ('0 22 * * *', 'inov.cron.cron_devise'),\n    (\"0 0 1 * *\", \"inov.cron.cron_periode_comptable\"),  # Exécute à 00:00 le 1er de chaque mois\n    # ('0 22 * * *', 'inov.cron.cron_compagnie'),\n    # ('0 02 * * *', 'inov.cron.cron_client'), #ok\n    # ('0 02 * * *', 'inov.cron.cron_police'), #ok",
        "detail": "src.inov.settings",
        "documentation": {}
    },
    {
        "label": "IMPORT_EXPORT_USE_TRANSACTIONS",
        "kind": 5,
        "importPath": "src.inov.settings",
        "description": "src.inov.settings",
        "peekOfCode": "IMPORT_EXPORT_USE_TRANSACTIONS = True\nCRONJOBS = [\n    # ('0 22 * * *', 'inov.cron.cron_pays'),\n    # ('0 22 * * *', 'inov.cron.cron_bureau'),\n    # ('0 22 * * *', 'inov.cron.cron_devise'),\n    (\"0 0 1 * *\", \"inov.cron.cron_periode_comptable\"),  # Exécute à 00:00 le 1er de chaque mois\n    # ('0 22 * * *', 'inov.cron.cron_compagnie'),\n    # ('0 02 * * *', 'inov.cron.cron_client'), #ok\n    # ('0 02 * * *', 'inov.cron.cron_police'), #ok\n    # ('0 02 * * *', 'inov.cron.cron_formule'), #ok",
        "detail": "src.inov.settings",
        "documentation": {}
    },
    {
        "label": "CRONJOBS",
        "kind": 5,
        "importPath": "src.inov.settings",
        "description": "src.inov.settings",
        "peekOfCode": "CRONJOBS = [\n    # ('0 22 * * *', 'inov.cron.cron_pays'),\n    # ('0 22 * * *', 'inov.cron.cron_bureau'),\n    # ('0 22 * * *', 'inov.cron.cron_devise'),\n    (\"0 0 1 * *\", \"inov.cron.cron_periode_comptable\"),  # Exécute à 00:00 le 1er de chaque mois\n    # ('0 22 * * *', 'inov.cron.cron_compagnie'),\n    # ('0 02 * * *', 'inov.cron.cron_client'), #ok\n    # ('0 02 * * *', 'inov.cron.cron_police'), #ok\n    # ('0 02 * * *', 'inov.cron.cron_formule'), #ok\n    # ('0 03 * * *', 'inov.cron.cron_aliment'),",
        "detail": "src.inov.settings",
        "documentation": {}
    },
    {
        "label": "SESSION_ENGINE",
        "kind": 5,
        "importPath": "src.inov.settings",
        "description": "src.inov.settings",
        "peekOfCode": "SESSION_ENGINE = 'django.contrib.sessions.backends.db'\nOTP_SECRET_KEY = \"DHSEWPADGZSWQB6SQMCVWURWXAPHQGT6\"\nEMAIL_BACKEND = \"django.core.mail.backends.smtp.EmailBackend\"\nEMAIL_HOST = \"smtp.office365.com\"\nEMAIL_PORT = 587\nEMAIL_HOST_USER = \"noreply.sante@inov.africa\"\nEMAIL_HOST_PASSWORD = \"Rec7tteP@ss\"\nDEFAULT_FROM_EMAIL = EMAIL_HOST_USER\nEMAIL_USE_TLS = True\nEMAIL_HOST_NAME = \"Noreply INOV\"",
        "detail": "src.inov.settings",
        "documentation": {}
    },
    {
        "label": "OTP_SECRET_KEY",
        "kind": 5,
        "importPath": "src.inov.settings",
        "description": "src.inov.settings",
        "peekOfCode": "OTP_SECRET_KEY = \"DHSEWPADGZSWQB6SQMCVWURWXAPHQGT6\"\nEMAIL_BACKEND = \"django.core.mail.backends.smtp.EmailBackend\"\nEMAIL_HOST = \"smtp.office365.com\"\nEMAIL_PORT = 587\nEMAIL_HOST_USER = \"noreply.sante@inov.africa\"\nEMAIL_HOST_PASSWORD = \"Rec7tteP@ss\"\nDEFAULT_FROM_EMAIL = EMAIL_HOST_USER\nEMAIL_USE_TLS = True\nEMAIL_HOST_NAME = \"Noreply INOV\"\nCORS_ORIGIN_ALLOW_ALL = True",
        "detail": "src.inov.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_BACKEND",
        "kind": 5,
        "importPath": "src.inov.settings",
        "description": "src.inov.settings",
        "peekOfCode": "EMAIL_BACKEND = \"django.core.mail.backends.smtp.EmailBackend\"\nEMAIL_HOST = \"smtp.office365.com\"\nEMAIL_PORT = 587\nEMAIL_HOST_USER = \"noreply.sante@inov.africa\"\nEMAIL_HOST_PASSWORD = \"Rec7tteP@ss\"\nDEFAULT_FROM_EMAIL = EMAIL_HOST_USER\nEMAIL_USE_TLS = True\nEMAIL_HOST_NAME = \"Noreply INOV\"\nCORS_ORIGIN_ALLOW_ALL = True",
        "detail": "src.inov.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST",
        "kind": 5,
        "importPath": "src.inov.settings",
        "description": "src.inov.settings",
        "peekOfCode": "EMAIL_HOST = \"smtp.office365.com\"\nEMAIL_PORT = 587\nEMAIL_HOST_USER = \"noreply.sante@inov.africa\"\nEMAIL_HOST_PASSWORD = \"Rec7tteP@ss\"\nDEFAULT_FROM_EMAIL = EMAIL_HOST_USER\nEMAIL_USE_TLS = True\nEMAIL_HOST_NAME = \"Noreply INOV\"\nCORS_ORIGIN_ALLOW_ALL = True",
        "detail": "src.inov.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_PORT",
        "kind": 5,
        "importPath": "src.inov.settings",
        "description": "src.inov.settings",
        "peekOfCode": "EMAIL_PORT = 587\nEMAIL_HOST_USER = \"noreply.sante@inov.africa\"\nEMAIL_HOST_PASSWORD = \"Rec7tteP@ss\"\nDEFAULT_FROM_EMAIL = EMAIL_HOST_USER\nEMAIL_USE_TLS = True\nEMAIL_HOST_NAME = \"Noreply INOV\"\nCORS_ORIGIN_ALLOW_ALL = True",
        "detail": "src.inov.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST_USER",
        "kind": 5,
        "importPath": "src.inov.settings",
        "description": "src.inov.settings",
        "peekOfCode": "EMAIL_HOST_USER = \"noreply.sante@inov.africa\"\nEMAIL_HOST_PASSWORD = \"Rec7tteP@ss\"\nDEFAULT_FROM_EMAIL = EMAIL_HOST_USER\nEMAIL_USE_TLS = True\nEMAIL_HOST_NAME = \"Noreply INOV\"\nCORS_ORIGIN_ALLOW_ALL = True",
        "detail": "src.inov.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST_PASSWORD",
        "kind": 5,
        "importPath": "src.inov.settings",
        "description": "src.inov.settings",
        "peekOfCode": "EMAIL_HOST_PASSWORD = \"Rec7tteP@ss\"\nDEFAULT_FROM_EMAIL = EMAIL_HOST_USER\nEMAIL_USE_TLS = True\nEMAIL_HOST_NAME = \"Noreply INOV\"\nCORS_ORIGIN_ALLOW_ALL = True",
        "detail": "src.inov.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_FROM_EMAIL",
        "kind": 5,
        "importPath": "src.inov.settings",
        "description": "src.inov.settings",
        "peekOfCode": "DEFAULT_FROM_EMAIL = EMAIL_HOST_USER\nEMAIL_USE_TLS = True\nEMAIL_HOST_NAME = \"Noreply INOV\"\nCORS_ORIGIN_ALLOW_ALL = True",
        "detail": "src.inov.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_USE_TLS",
        "kind": 5,
        "importPath": "src.inov.settings",
        "description": "src.inov.settings",
        "peekOfCode": "EMAIL_USE_TLS = True\nEMAIL_HOST_NAME = \"Noreply INOV\"\nCORS_ORIGIN_ALLOW_ALL = True",
        "detail": "src.inov.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST_NAME",
        "kind": 5,
        "importPath": "src.inov.settings",
        "description": "src.inov.settings",
        "peekOfCode": "EMAIL_HOST_NAME = \"Noreply INOV\"\nCORS_ORIGIN_ALLOW_ALL = True",
        "detail": "src.inov.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ORIGIN_ALLOW_ALL",
        "kind": 5,
        "importPath": "src.inov.settings",
        "description": "src.inov.settings",
        "peekOfCode": "CORS_ORIGIN_ALLOW_ALL = True",
        "detail": "src.inov.settings",
        "documentation": {}
    },
    {
        "label": "customUrl",
        "kind": 5,
        "importPath": "src.inov.urls",
        "description": "src.inov.urls",
        "peekOfCode": "customUrl = []\n# if settings.DEBUG:\ncustomUrl += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\n# (r'^media/(?P<path>.*)$', 'django.views.static.serve',{'document_root': settings.MEDIA_ROOT}),\n# Ici nous créons notre routeur\nrouter = routers.SimpleRouter()\n# Puis lui déclarons une url basée sur le mot clé ‘category’ et notre view\n# afin que l’url générée soit celle que nous souhaitons ‘/api/aliment/’\n# router.register('aliment', AlimentAPIView, basename='aliment')\nurlpatterns = customUrl + [",
        "detail": "src.inov.urls",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "src.inov.urls",
        "description": "src.inov.urls",
        "peekOfCode": "router = routers.SimpleRouter()\n# Puis lui déclarons une url basée sur le mot clé ‘category’ et notre view\n# afin que l’url générée soit celle que nous souhaitons ‘/api/aliment/’\n# router.register('aliment', AlimentAPIView, basename='aliment')\nurlpatterns = customUrl + [\n    path('admin/clearcache/', include('clearcache.urls')),\n    path('api/', include('api.urls')),\n    path('api/token/', api_views.CustomTokenObtainPairView.as_view(), name='token_obtain_pair'),\n    path('api/token/refresh/', TokenRefreshView.as_view(), name='token_refresh'),\n    path('api/token/verify/', TokenVerifyView.as_view(), name='token_verify'),",
        "detail": "src.inov.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "src.inov.urls",
        "description": "src.inov.urls",
        "peekOfCode": "urlpatterns = customUrl + [\n    path('admin/clearcache/', include('clearcache.urls')),\n    path('api/', include('api.urls')),\n    path('api/token/', api_views.CustomTokenObtainPairView.as_view(), name='token_obtain_pair'),\n    path('api/token/refresh/', TokenRefreshView.as_view(), name='token_refresh'),\n    path('api/token/verify/', TokenVerifyView.as_view(), name='token_verify'),\n    path('api/info', api_views.info),\n    path('api/save_sinistre', api_views.service_save),\n    path('api/status_sinistre', api_views.get_status_sinistre),\n    path('api/assure_infos', include(router.urls)),",
        "detail": "src.inov.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "src.inov.wsgi",
        "description": "src.inov.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "src.inov.wsgi",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "src.production.management.commands.baobabscript",
        "description": "src.production.management.commands.baobabscript",
        "peekOfCode": "class Command(BaseCommand):\n    help = 'Execution de script pour BAOBAB'\n    def handle(self, *args, **options):\n        try:\n            aliments_baobab = AlimentBaobab.objects.filter(formule_id=5127, statut_traitement=0)\n            print(\"aliments_baobab\")\n            print(len(aliments_baobab))\n            nbr_deuxieme = 0\n            nbr_troisieme = 0\n            for aliment_baobab in aliments_baobab:",
        "detail": "src.production.management.commands.baobabscript",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "src.production.management.commands.baobabscript100",
        "description": "src.production.management.commands.baobabscript100",
        "peekOfCode": "class Command(BaseCommand):\n    help = 'Execution de script pour BAOBAB 100%'\n    def handle(self, *args, **options):\n        try:\n            aliments_baobab = AlimentBaobab.objects.filter(formule_id=5128, statut_traitement=0)\n            print(\"aliments_baobab\")\n            print(len(aliments_baobab))\n            nbr_deuxieme = 0\n            nbr_troisieme = 0\n            for aliment_baobab in aliments_baobab:",
        "detail": "src.production.management.commands.baobabscript100",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "src.production.management.commands.baobabscript70",
        "description": "src.production.management.commands.baobabscript70",
        "peekOfCode": "class Command(BaseCommand):\n    help = 'Execution de script pour BAOBAB 70%'\n    def handle(self, *args, **options):\n        try:\n            aliments_baobab = AlimentBaobab.objects.filter(formule_id=5128, statut_traitement=1)\n            print(\"aliments_baobab\")\n            print(len(aliments_baobab))\n            nbr_deuxieme = 0\n            nbr_troisieme = 0\n            for aliment_baobab in aliments_baobab:",
        "detail": "src.production.management.commands.baobabscript70",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "src.production.management.commands.generateqrcode",
        "description": "src.production.management.commands.generateqrcode",
        "peekOfCode": "class Command(BaseCommand):\n    help = 'Generer les qrcodes des cartes'\n    def handle(self, *args, **options):\n        try:\n            cartes = Carte.objects.filter(Q(qrcode_file__isnull=True) | Q(qrcode_file=\"\"))\n            #if len(cartes) == 0:\n            #    cartes = Carte.objects.filter(qrcode_file='')\n            send_dev_notification_background_task_mail(\"a.tissi@olea.africa\",\n                                                       f'Demarrage Executions génération QRCODE en background {len(cartes)} générations en attente')\n            print(\"cartes\")",
        "detail": "src.production.management.commands.generateqrcode",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "src.production.management.commands.getphotosfromveos",
        "description": "src.production.management.commands.getphotosfromveos",
        "peekOfCode": "class Command(BaseCommand):\n    help = 'Récupérer les photos des VEOS'\n    def add_arguments(self, parser):\n        parser.add_argument(\"--numero_carte\", type=str, help=\"Numéro de carte de l'assuré\")\n        parser.add_argument(\"--nombre\", type=int, help=\"Nombre de bénéficiaires pour lesquels on récupère les photos\")\n    def handle(self, *args, **options):\n        numero_carte = options['numero_carte']\n        nombre = options['nombre'] if options['nombre'] else 10000\n        if numero_carte:\n            aliments = Aliment.objects.filter(veos_numero_carte=numero_carte, has_photo_veos=True, statut_import_photo_veos=False)[:1]",
        "detail": "src.production.management.commands.getphotosfromveos",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "src.production.management.commands.quittancescript",
        "description": "src.production.management.commands.quittancescript",
        "peekOfCode": "class Command(BaseCommand):\n    help = 'Execution de script de synchronisation apporteur'\n    def handle(self, *args, **options):\n        try:\n            # Recuperation des quittances tous\n            quittances = Quittance.objects.all()\n            nbr = 0\n            for quittance in quittances:\n                # recuperation de l'apporteur police lie a la police de la quittance\n                apporteur_police = ApporteurPolice.objects.filter(police_id=quittance.police_id, statut_validite=StatutValidite.VALIDE).first()",
        "detail": "src.production.management.commands.quittancescript",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "src.production.management.commands.reglementscript",
        "description": "src.production.management.commands.reglementscript",
        "peekOfCode": "class Command(BaseCommand):\n    help = 'Execution de script de synchronisation apporteur'\n    def handle(self, *args, **options):\n        try:\n            # Recuperation des quittances tous\n            quittances = Quittance.objects.all()\n            nbr = 0\n            for quittance in quittances:\n                # recuperation de l'apporteur police lie a la police de la quittance\n                apporteur_police = ApporteurPolice.objects.filter(police_id=quittance.police_id, statut_validite=StatutValidite.VALIDE).first()",
        "detail": "src.production.management.commands.reglementscript",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "src.production.management.commands.script",
        "description": "src.production.management.commands.script",
        "peekOfCode": "class Command(BaseCommand):\n    help = 'Execution de script'\n    def handle(self, *args, **options):\n        try:\n            mouvement1 = [151665,\n             151666,\n             151667,\n             151668,\n             151669,\n             151670,",
        "detail": "src.production.management.commands.script",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "src.production.management.commands.suspension_automatique_police_echues",
        "description": "src.production.management.commands.suspension_automatique_police_echues",
        "peekOfCode": "class Command(BaseCommand):\n    help = 'Execution de la suspension automatique des polices à échéance'\n    def handle(self, *args, **options):\n        self.stdout.write(self.style.SUCCESS(f'Commande exécutée !'))\n        #try:\n        today = datetime.datetime.now(tz=timezone.utc)\n        polices = Police.objects.filter(date_fin_effet__lte=today)\n        nombre_import = 0\n        nombre_update = 0\n        for police in polices:",
        "detail": "src.production.management.commands.suspension_automatique_police_echues",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "src.production.management.commands.update_etat_actuel_beneficiaire",
        "description": "src.production.management.commands.update_etat_actuel_beneficiaire",
        "peekOfCode": "class Command(BaseCommand):\n    help = \"Execution de script pour actualiser l'etat des bénéficiaires d'une police\"\n    def add_arguments(self, parser):\n        parser.add_argument(\"--numero_police\", type=str, help=\"Numéro de police\")\n    def handle(self, *args, **options):\n        #try:\n        numero_police = options['numero_police']\n        police = Police.objects.filter(numero=numero_police).first()\n        today = datetime.datetime.now(tz=timezone.utc)\n        if police:",
        "detail": "src.production.management.commands.update_etat_actuel_beneficiaire",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "src.production.management.commands.updatematricule",
        "description": "src.production.management.commands.updatematricule",
        "peekOfCode": "class Command(BaseCommand):\n    help = 'Execution de mise à jour du matricule des aliments'\n    def handle(self, *args, **options):\n        self.stdout.write(self.style.SUCCESS(f'Commande exécutée !'))\n        try:\n            aliments_matricules = AlimentMatricule.objects.filter(STATUT_IMPORT=False)\n            nombre_import = 0\n            nombre_update = 0\n            for aliment_matricule in aliments_matricules:\n                aliment = Aliment.objects.filter(veos_code_aliment=aliment_matricule.ID_ADH).first()",
        "detail": "src.production.management.commands.updatematricule",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.production.migrations.0001_initial",
        "description": "src.production.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('configurations', '0001_initial'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Aliment',\n            fields=[",
        "detail": "src.production.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.production.migrations.0002_auto_20241128_0141",
        "description": "src.production.migrations.0002_auto_20241128_0141",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('production', '0001_initial'),\n    ]\n    operations = [\n        migrations.AlterModelOptions(\n            name='secteuractivite',\n            options={'verbose_name': \"Secteurs d'activité\", 'verbose_name_plural': \"Secteurs d'activité\"},\n        ),\n        migrations.AlterModelTable(",
        "detail": "src.production.migrations.0002_auto_20241128_0141",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.production.migrations.0003_auto_20241128_1027",
        "description": "src.production.migrations.0003_auto_20241128_1027",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('production', '0002_auto_20241128_0141'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='historiquepolice',\n            name='age_max_adultes',\n        ),\n        migrations.RemoveField(",
        "detail": "src.production.migrations.0003_auto_20241128_1027",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.production.migrations.0004_auto_20241128_1040",
        "description": "src.production.migrations.0004_auto_20241128_1040",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('configurations', '0004_remove_apporteur_apporteur_international'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n        ('production', '0003_auto_20241128_1027'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='historiquepolice',\n            name='placement_gestion',",
        "detail": "src.production.migrations.0004_auto_20241128_1040",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.production.migrations.0005_autrerisque",
        "description": "src.production.migrations.0005_autrerisque",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n        ('production', '0004_auto_20241128_1040'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='AutreRisque',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "src.production.migrations.0005_autrerisque",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.production.migrations.0006_policegarantie_formule",
        "description": "src.production.migrations.0006_policegarantie_formule",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('configurations', '0004_remove_apporteur_apporteur_international'),\n        ('production', '0005_autrerisque'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='policegarantie',\n            name='formule',\n            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.RESTRICT, to='configurations.formule'),",
        "detail": "src.production.migrations.0006_policegarantie_formule",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.production.migrations.0007_auto_20241128_1237",
        "description": "src.production.migrations.0007_auto_20241128_1237",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('production', '0006_policegarantie_formule'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='police',\n            name='placement_gestion',\n        ),\n        migrations.RemoveField(",
        "detail": "src.production.migrations.0007_auto_20241128_1237",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.production.migrations.0008_auto_20241128_1347",
        "description": "src.production.migrations.0008_auto_20241128_1347",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('production', '0007_auto_20241128_1237'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='policegarantie',\n            name='deleted_by',\n        ),\n        migrations.RemoveField(",
        "detail": "src.production.migrations.0008_auto_20241128_1347",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.production.migrations.0009_auto_20241205_1804",
        "description": "src.production.migrations.0009_auto_20241205_1804",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('configurations', '0005_remove_paramproduitcompagnie_taux_com_gestion'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n        ('production', '0008_auto_20241128_1347'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='vehicule',\n            name='police',",
        "detail": "src.production.migrations.0009_auto_20241205_1804",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.production.migrations.0010_auto_20241205_1835",
        "description": "src.production.migrations.0010_auto_20241205_1835",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('production', '0009_auto_20241205_1804'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='historiquevehicule',\n            name='formule',\n        ),\n        migrations.RemoveField(",
        "detail": "src.production.migrations.0010_auto_20241205_1835",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.production.migrations.0011_rename_place_historiquevehicule_places_assises",
        "description": "src.production.migrations.0011_rename_place_historiquevehicule_places_assises",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('production', '0010_auto_20241205_1835'),\n    ]\n    operations = [\n        migrations.RenameField(\n            model_name='historiquevehicule',\n            old_name='place',\n            new_name='places_assises',\n        ),",
        "detail": "src.production.migrations.0011_rename_place_historiquevehicule_places_assises",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.production.migrations.0012_rename_place_vehicule_places_assises",
        "description": "src.production.migrations.0012_rename_place_vehicule_places_assises",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('production', '0011_rename_place_historiquevehicule_places_assises'),\n    ]\n    operations = [\n        migrations.RenameField(\n            model_name='vehicule',\n            old_name='place',\n            new_name='places_assises',\n        ),",
        "detail": "src.production.migrations.0012_rename_place_vehicule_places_assises",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.production.migrations.0013_auto_20241209_2019",
        "description": "src.production.migrations.0013_auto_20241209_2019",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('configurations', '0005_remove_paramproduitcompagnie_taux_com_gestion'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n        ('production', '0012_rename_place_vehicule_places_assises'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='historiquepolice',\n            name='compagnie',",
        "detail": "src.production.migrations.0013_auto_20241209_2019",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.production.migrations.0014_auto_20241209_2052",
        "description": "src.production.migrations.0014_auto_20241209_2052",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('configurations', '0005_remove_paramproduitcompagnie_taux_com_gestion'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n        ('production', '0013_auto_20241209_2019'),\n    ]\n    operations = [\n        migrations.RenameField(\n            model_name='alimentpolice',\n            old_name='date_debut',",
        "detail": "src.production.migrations.0014_auto_20241209_2052",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.production.migrations.0015_historiquepolice_date_du_jour",
        "description": "src.production.migrations.0015_historiquepolice_date_du_jour",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('production', '0014_auto_20241209_2052'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='historiquepolice',\n            name='date_du_jour',\n            field=models.DateTimeField(null=True),\n        ),",
        "detail": "src.production.migrations.0015_historiquepolice_date_du_jour",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.production.migrations.0016_auto_20241210_2014",
        "description": "src.production.migrations.0016_auto_20241210_2014",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('configurations', '0005_remove_paramproduitcompagnie_taux_com_gestion'),\n        ('production', '0015_historiquepolice_date_du_jour'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='autrerisque',\n            name='historique_police',\n            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.RESTRICT, to='production.historiquepolice'),",
        "detail": "src.production.migrations.0016_auto_20241210_2014",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.production.migrations.0017_remove_police_type_assurance",
        "description": "src.production.migrations.0017_remove_police_type_assurance",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('production', '0016_auto_20241210_2014'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='police',\n            name='type_assurance',\n        ),\n    ]",
        "detail": "src.production.migrations.0017_remove_police_type_assurance",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.production.migrations.0018_police_type_assurance",
        "description": "src.production.migrations.0018_police_type_assurance",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('configurations', '0005_remove_paramproduitcompagnie_taux_com_gestion'),\n        ('production', '0017_remove_police_type_assurance'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='police',\n            name='type_assurance',\n            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.RESTRICT, to='configurations.typeassurance'),",
        "detail": "src.production.migrations.0018_police_type_assurance",
        "documentation": {}
    },
    {
        "label": "money_field",
        "kind": 2,
        "importPath": "src.production.templatetags.my_filters",
        "description": "src.production.templatetags.my_filters",
        "peekOfCode": "def money_field(montant):\n    if montant == \"\" or montant is None: montant = 0\n    money = intcomma(int(montant))\n    money = money.replace(',', ' ')# remplacer la virgule quand le systeme est anglais\n    return money\n@register.filter\ndef round_value(value, decimal_places=0):\n    \"\"\"Arrondit la valeur à un certain nombre de décimales.\"\"\"\n    try:\n        return round(float(value), decimal_places)",
        "detail": "src.production.templatetags.my_filters",
        "documentation": {}
    },
    {
        "label": "round_value",
        "kind": 2,
        "importPath": "src.production.templatetags.my_filters",
        "description": "src.production.templatetags.my_filters",
        "peekOfCode": "def round_value(value, decimal_places=0):\n    \"\"\"Arrondit la valeur à un certain nombre de décimales.\"\"\"\n    try:\n        return round(float(value), decimal_places)\n    except (ValueError, TypeError):\n        return value  # En cas d'erreur, retourner la valeur sans modification \n@register.filter\ndef multiply(a, b):\n    return a * b\n@register.filter",
        "detail": "src.production.templatetags.my_filters",
        "documentation": {}
    },
    {
        "label": "multiply",
        "kind": 2,
        "importPath": "src.production.templatetags.my_filters",
        "description": "src.production.templatetags.my_filters",
        "peekOfCode": "def multiply(a, b):\n    return a * b\n@register.filter\ndef diviser(a, b):\n    return a / b\n@register.filter\ndef today_utc():\n    return datetime.datetime.now(tz=datetime.timezone.utc)\n@register.filter(name='subtract')\ndef subtract(value, arg):",
        "detail": "src.production.templatetags.my_filters",
        "documentation": {}
    },
    {
        "label": "diviser",
        "kind": 2,
        "importPath": "src.production.templatetags.my_filters",
        "description": "src.production.templatetags.my_filters",
        "peekOfCode": "def diviser(a, b):\n    return a / b\n@register.filter\ndef today_utc():\n    return datetime.datetime.now(tz=datetime.timezone.utc)\n@register.filter(name='subtract')\ndef subtract(value, arg):\n    if value is not None and arg is not None:\n        return Decimal(value) - Decimal(arg)\n    else:",
        "detail": "src.production.templatetags.my_filters",
        "documentation": {}
    },
    {
        "label": "today_utc",
        "kind": 2,
        "importPath": "src.production.templatetags.my_filters",
        "description": "src.production.templatetags.my_filters",
        "peekOfCode": "def today_utc():\n    return datetime.datetime.now(tz=datetime.timezone.utc)\n@register.filter(name='subtract')\ndef subtract(value, arg):\n    if value is not None and arg is not None:\n        return Decimal(value) - Decimal(arg)\n    else:\n        return value\n@register.filter(name='addition')\ndef addition(value, arg):",
        "detail": "src.production.templatetags.my_filters",
        "documentation": {}
    },
    {
        "label": "subtract",
        "kind": 2,
        "importPath": "src.production.templatetags.my_filters",
        "description": "src.production.templatetags.my_filters",
        "peekOfCode": "def subtract(value, arg):\n    if value is not None and arg is not None:\n        return Decimal(value) - Decimal(arg)\n    else:\n        return value\n@register.filter(name='addition')\ndef addition(value, arg):\n    value = value if value is not None else 0\n    arg = arg if arg is not None else 0\n    return value + arg",
        "detail": "src.production.templatetags.my_filters",
        "documentation": {}
    },
    {
        "label": "addition",
        "kind": 2,
        "importPath": "src.production.templatetags.my_filters",
        "description": "src.production.templatetags.my_filters",
        "peekOfCode": "def addition(value, arg):\n    value = value if value is not None else 0\n    arg = arg if arg is not None else 0\n    return value + arg\n@register.filter\ndef with_user(total_part_compagnie_medicament, user):\n    return total_part_compagnie_medicament(user)\n@register.filter\ndef truncate_last_word(value, max_length):\n    \"\"\"",
        "detail": "src.production.templatetags.my_filters",
        "documentation": {}
    },
    {
        "label": "with_user",
        "kind": 2,
        "importPath": "src.production.templatetags.my_filters",
        "description": "src.production.templatetags.my_filters",
        "peekOfCode": "def with_user(total_part_compagnie_medicament, user):\n    return total_part_compagnie_medicament(user)\n@register.filter\ndef truncate_last_word(value, max_length):\n    \"\"\"\n    Truncate a string to a maximum length, keeping the last word intact.\n    \"\"\"\n    if len(value) <= max_length:\n        return value\n    # Split the string into words",
        "detail": "src.production.templatetags.my_filters",
        "documentation": {}
    },
    {
        "label": "truncate_last_word",
        "kind": 2,
        "importPath": "src.production.templatetags.my_filters",
        "description": "src.production.templatetags.my_filters",
        "peekOfCode": "def truncate_last_word(value, max_length):\n    \"\"\"\n    Truncate a string to a maximum length, keeping the last word intact.\n    \"\"\"\n    if len(value) <= max_length:\n        return value\n    # Split the string into words\n    words = value.split()\n    # Join all words except the last one\n    truncated_text = ' '.join(words[:-1])",
        "detail": "src.production.templatetags.my_filters",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "src.production.templatetags.my_filters",
        "description": "src.production.templatetags.my_filters",
        "peekOfCode": "def index(List, i):\n    return List[int(i)]\n@register.filter\ndef entry_num_array(List):\n    return range(len(List))\n@register.filter\ndef replace_espace(value):\n    return value.replace(' ', '-')\n@register.filter\ndef replace_custom(value, arg):",
        "detail": "src.production.templatetags.my_filters",
        "documentation": {}
    },
    {
        "label": "entry_num_array",
        "kind": 2,
        "importPath": "src.production.templatetags.my_filters",
        "description": "src.production.templatetags.my_filters",
        "peekOfCode": "def entry_num_array(List):\n    return range(len(List))\n@register.filter\ndef replace_espace(value):\n    return value.replace(' ', '-')\n@register.filter\ndef replace_custom(value, arg):\n    return value.replace(arg, '-')\n@register.filter\ndef date_heure_locale(date_heure_gmt, fuseau_horaire):",
        "detail": "src.production.templatetags.my_filters",
        "documentation": {}
    },
    {
        "label": "replace_espace",
        "kind": 2,
        "importPath": "src.production.templatetags.my_filters",
        "description": "src.production.templatetags.my_filters",
        "peekOfCode": "def replace_espace(value):\n    return value.replace(' ', '-')\n@register.filter\ndef replace_custom(value, arg):\n    return value.replace(arg, '-')\n@register.filter\ndef date_heure_locale(date_heure_gmt, fuseau_horaire):\n    dhl = date_heure_gmt + timedelta(hours=fuseau_horaire)\n    return dhl\n# code pour éviter erreur (fuseau horaire tunisien{GMT+1}) : [ unsupported type for timedelta hours component: NoneType ]",
        "detail": "src.production.templatetags.my_filters",
        "documentation": {}
    },
    {
        "label": "replace_custom",
        "kind": 2,
        "importPath": "src.production.templatetags.my_filters",
        "description": "src.production.templatetags.my_filters",
        "peekOfCode": "def replace_custom(value, arg):\n    return value.replace(arg, '-')\n@register.filter\ndef date_heure_locale(date_heure_gmt, fuseau_horaire):\n    dhl = date_heure_gmt + timedelta(hours=fuseau_horaire)\n    return dhl\n# code pour éviter erreur (fuseau horaire tunisien{GMT+1}) : [ unsupported type for timedelta hours component: NoneType ]\n#   @register.filter\n#   def date_heure_locale(date_heure_gmt, fuseau_horaire):\n#       if fuseau_horaire is None:",
        "detail": "src.production.templatetags.my_filters",
        "documentation": {}
    },
    {
        "label": "date_heure_locale",
        "kind": 2,
        "importPath": "src.production.templatetags.my_filters",
        "description": "src.production.templatetags.my_filters",
        "peekOfCode": "def date_heure_locale(date_heure_gmt, fuseau_horaire):\n    dhl = date_heure_gmt + timedelta(hours=fuseau_horaire)\n    return dhl\n# code pour éviter erreur (fuseau horaire tunisien{GMT+1}) : [ unsupported type for timedelta hours component: NoneType ]\n#   @register.filter\n#   def date_heure_locale(date_heure_gmt, fuseau_horaire):\n#       if fuseau_horaire is None:\n#           return date_heure_gmt\n#       dhl = date_heure_gmt + timedelta(hours=fuseau_horaire)\n#       return dhl",
        "detail": "src.production.templatetags.my_filters",
        "documentation": {}
    },
    {
        "label": "nombre_en_lettre",
        "kind": 2,
        "importPath": "src.production.templatetags.my_filters",
        "description": "src.production.templatetags.my_filters",
        "peekOfCode": "def nombre_en_lettre(nombre):\n    try:\n        return num2words(nombre, lang='fr')\n    except Exception as e:\n        return ''\n@register.filter\ndef subdiviser_mots(chaine, longueur=10):\n    if chaine is None or chaine == \"\":\n        return \"\"\n    # Séparer la chaîne en mots",
        "detail": "src.production.templatetags.my_filters",
        "documentation": {}
    },
    {
        "label": "subdiviser_mots",
        "kind": 2,
        "importPath": "src.production.templatetags.my_filters",
        "description": "src.production.templatetags.my_filters",
        "peekOfCode": "def subdiviser_mots(chaine, longueur=10):\n    if chaine is None or chaine == \"\":\n        return \"\"\n    # Séparer la chaîne en mots\n    mots = chaine.split()\n    # Liste pour stocker les résultats\n    resultat = []\n    for mot in mots:\n        # Si le mot est plus long que 'longueur', le subdiviser\n        if len(mot) > longueur:",
        "detail": "src.production.templatetags.my_filters",
        "documentation": {}
    },
    {
        "label": "to_base64",
        "kind": 2,
        "importPath": "src.production.templatetags.my_filters",
        "description": "src.production.templatetags.my_filters",
        "peekOfCode": "def to_base64(file):\n    try:\n        # Lire le fichier binaire\n        print('file.path')\n        print(file.path)\n        value = open(file.path, 'rb')\n        print('value')\n        print(value)\n        fichier_binaire = value.read()\n        # Encoder en base64",
        "detail": "src.production.templatetags.my_filters",
        "documentation": {}
    },
    {
        "label": "money_format_mille",
        "kind": 2,
        "importPath": "src.production.templatetags.my_filters",
        "description": "src.production.templatetags.my_filters",
        "peekOfCode": "def money_format_mille(value):\n    try:\n        return f\"{int(value):,}\".replace(\",\", \" \")\n    except (ValueError, TypeError):\n        return value\n@register.simple_tag\ndef date_du_jour():\n    \"\"\"\n    Retourne la date du jour.\n    \"\"\"",
        "detail": "src.production.templatetags.my_filters",
        "documentation": {}
    },
    {
        "label": "date_du_jour",
        "kind": 2,
        "importPath": "src.production.templatetags.my_filters",
        "description": "src.production.templatetags.my_filters",
        "peekOfCode": "def date_du_jour():\n    \"\"\"\n    Retourne la date du jour.\n    \"\"\"\n    return date.today()",
        "detail": "src.production.templatetags.my_filters",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 5,
        "importPath": "src.production.templatetags.my_filters",
        "description": "src.production.templatetags.my_filters",
        "peekOfCode": "register = template.Library()\n@register.filter\ndef money_field(montant):\n    if montant == \"\" or montant is None: montant = 0\n    money = intcomma(int(montant))\n    money = money.replace(',', ' ')# remplacer la virgule quand le systeme est anglais\n    return money\n@register.filter\ndef round_value(value, decimal_places=0):\n    \"\"\"Arrondit la valeur à un certain nombre de décimales.\"\"\"",
        "detail": "src.production.templatetags.my_filters",
        "documentation": {}
    },
    {
        "label": "CarteAdmin",
        "kind": 6,
        "importPath": "src.production.admin",
        "description": "src.production.admin",
        "peekOfCode": "class CarteAdmin(admin.ModelAdmin):\n    list_filter = ('numero', 'date_edition', 'statut',)\n    list_display = ('numero', 'detenteur', 'date_edition', 'date_desactivation', 'statut')\n    search_field = ('numero', 'date_edition', 'statut',)\n    list_per_page = 20\n    exclude = ('statut', 'date_desactivation', 'numero')\n    def detenteur(self, obj):\n        if obj.aliment == None:\n            return obj.ayant_droit\n        else:",
        "detail": "src.production.admin",
        "documentation": {}
    },
    {
        "label": "MouvementAdmin",
        "kind": 6,
        "importPath": "src.production.admin",
        "description": "src.production.admin",
        "peekOfCode": "class MouvementAdmin(ImportExportModelAdmin):\n    list_filter = ('libelle', 'police')\n    list_display = ('libelle', 'police')\n    search_field = ('libelle', 'police')\n    list_per_page = 20\nclass QuittanceAdmin(ImportExportModelAdmin):\n    list_filter = ('numero', 'date_emission')\n    list_display = ['numero', 'prime_ttc', 'date_emission', 'get_numero_police', 'get_client','statut']\n    search_field = ('numero', 'prime_ttc', 'date_emission')\n    list_per_page = 20",
        "detail": "src.production.admin",
        "documentation": {}
    },
    {
        "label": "QuittanceAdmin",
        "kind": 6,
        "importPath": "src.production.admin",
        "description": "src.production.admin",
        "peekOfCode": "class QuittanceAdmin(ImportExportModelAdmin):\n    list_filter = ('numero', 'date_emission')\n    list_display = ['numero', 'prime_ttc', 'date_emission', 'get_numero_police', 'get_client','statut']\n    search_field = ('numero', 'prime_ttc', 'date_emission')\n    list_per_page = 20\n    exclude = ('statut',)\n    # accède à un champ de la table parente\n    def get_numero_police(self, obj):\n        return obj.police.numero\n    get_numero_police.admin_order_field = 'numero'  # Allows column order sorting",
        "detail": "src.production.admin",
        "documentation": {}
    },
    {
        "label": "ReglementAdmin",
        "kind": 6,
        "importPath": "src.production.admin",
        "description": "src.production.admin",
        "peekOfCode": "class ReglementAdmin(ImportExportModelAdmin):\n    list_filter = ('montant', 'date_paiement')\n    list_display = ('montant', 'date_paiement')\n    search_field = ('montant', 'date_paiement')\n    list_per_page = 20\nclass AcompteAdmin(admin.ModelAdmin):\n    list_filter = ('montant', 'date_versement', 'client')\n    list_display = ('montant', 'date_versement', 'client')\n    search_field = ('montant', 'date_versement', 'client')\n    list_per_page = 20",
        "detail": "src.production.admin",
        "documentation": {}
    },
    {
        "label": "AcompteAdmin",
        "kind": 6,
        "importPath": "src.production.admin",
        "description": "src.production.admin",
        "peekOfCode": "class AcompteAdmin(admin.ModelAdmin):\n    list_filter = ('montant', 'date_versement', 'client')\n    list_display = ('montant', 'date_versement', 'client')\n    search_field = ('montant', 'date_versement', 'client')\n    list_per_page = 20\n    def has_add_permission(self, request, obj=None):\n        return False\n'''\ndef add_view(self, request, form_url='', extra_context=None):\n    extra_context = extra_context or {}",
        "detail": "src.production.admin",
        "documentation": {}
    },
    {
        "label": "ApporteurAdmin",
        "kind": 6,
        "importPath": "src.production.admin",
        "description": "src.production.admin",
        "peekOfCode": "class ApporteurAdmin(admin.ModelAdmin):\n    list_display = ('nom', 'prenoms', 'code', 'telephone', 'email', 'adresse', 'type_apporteur', 'pays')\n    search_field = ('nom', 'prenoms', 'code',  'telephone', 'email', 'adresse', 'type_apporteur', 'pays')\n    list_per_page = 20\n    form = ApporteurAdminForm\n    def get_queryset(self, request):\n        queryset = super().get_queryset(request)\n        queryset = queryset.filter(bureau=request.user.bureau)\n        return queryset\n    def save_model(self, request, obj, form, change):",
        "detail": "src.production.admin",
        "documentation": {}
    },
    {
        "label": "action_desactiver",
        "kind": 2,
        "importPath": "src.production.admin",
        "description": "src.production.admin",
        "peekOfCode": "def action_desactiver(modeladmin, request, queryset):\n    updated = queryset.update(statut=Statut.DESACTIVE)\n    modeladmin.message_user(request, ngettext(\n        '%d élément a été désactivé avec succès.',\n        '%d éléments ont été désactivé avec succès.',\n        updated,\n    ) % updated, messages.SUCCESS)\n@admin.action(description='Activer les éléments sélectionnés')\ndef action_activer(modeladmin, request, queryset):\n    updated = queryset.update(statut=Statut.ACTIF)",
        "detail": "src.production.admin",
        "documentation": {}
    },
    {
        "label": "action_activer",
        "kind": 2,
        "importPath": "src.production.admin",
        "description": "src.production.admin",
        "peekOfCode": "def action_activer(modeladmin, request, queryset):\n    updated = queryset.update(statut=Statut.ACTIF)\n    modeladmin.message_user(request, ngettext(\n        '%d élément été désactivé avec succès.',\n        '%d éléments ont été désactivé avec succès.',\n        updated,\n    ) % updated, messages.SUCCESS)\n# ---------------------------------------- DEBUT DE CLIENT ------------------------------------------------#\n# ---------------------------------------- FIN DE CLIENT ------------------------------------------------#\n# ---------------------------------------- DEBUT DE POLICE ------------------------------------------------#",
        "detail": "src.production.admin",
        "documentation": {}
    },
    {
        "label": "add_view",
        "kind": 2,
        "importPath": "src.production.admin",
        "description": "src.production.admin",
        "peekOfCode": "def add_view(self, request, form_url='', extra_context=None):\n    extra_context = extra_context or {}\n    extra_context['your_custom_data'] = self.your_custom_method()\n    return super().add_view(request, form_url, extra_context=extra_context)\n'''\nclass ApporteurAdmin(admin.ModelAdmin):\n    list_display = ('nom', 'prenoms', 'code', 'telephone', 'email', 'adresse', 'type_apporteur', 'pays')\n    search_field = ('nom', 'prenoms', 'code',  'telephone', 'email', 'adresse', 'type_apporteur', 'pays')\n    list_per_page = 20\n    form = ApporteurAdminForm",
        "detail": "src.production.admin",
        "documentation": {}
    },
    {
        "label": "admin.site",
        "kind": 5,
        "importPath": "src.production.admin",
        "description": "src.production.admin",
        "peekOfCode": "admin.site = custom_admin_site\nadmin.site.site_header = 'INOV - PRODUCTION'\n# actions utilisable par plusieur modeladmin\n@admin.action(description='Désactiver les éléments sélectionnés')\ndef action_desactiver(modeladmin, request, queryset):\n    updated = queryset.update(statut=Statut.DESACTIVE)\n    modeladmin.message_user(request, ngettext(\n        '%d élément a été désactivé avec succès.',\n        '%d éléments ont été désactivé avec succès.',\n        updated,",
        "detail": "src.production.admin",
        "documentation": {}
    },
    {
        "label": "admin.site.site_header",
        "kind": 5,
        "importPath": "src.production.admin",
        "description": "src.production.admin",
        "peekOfCode": "admin.site.site_header = 'INOV - PRODUCTION'\n# actions utilisable par plusieur modeladmin\n@admin.action(description='Désactiver les éléments sélectionnés')\ndef action_desactiver(modeladmin, request, queryset):\n    updated = queryset.update(statut=Statut.DESACTIVE)\n    modeladmin.message_user(request, ngettext(\n        '%d élément a été désactivé avec succès.',\n        '%d éléments ont été désactivé avec succès.',\n        updated,\n    ) % updated, messages.SUCCESS)",
        "detail": "src.production.admin",
        "documentation": {}
    },
    {
        "label": "ProductionConfig",
        "kind": 6,
        "importPath": "src.production.apps",
        "description": "src.production.apps",
        "peekOfCode": "class ProductionConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'production'",
        "detail": "src.production.apps",
        "documentation": {}
    },
    {
        "label": "ClientForm",
        "kind": 6,
        "importPath": "src.production.forms",
        "description": "src.production.forms",
        "peekOfCode": "class ClientForm(forms.ModelForm):\n    def clean(self):\n        prenoms = self.cleaned_data.get('prenoms')\n        date_naissance = self.cleaned_data.get('date_naissance')\n        type_personne = self.cleaned_data.get('type_personne')\n        if type_personne.id == 1 and prenoms == None:\n            self.cleaned_data['prenoms'] = \"Le champs prénoms est obligatoire.\"\n            raise forms.ValidationError(\"Le champs prénoms est obligatoire.\")\n        if type_personne.id == 1 and date_naissance == None:\n            self.cleaned_data['date_naissance'] = \"Le champs Date de naissance est obligatoire.\"",
        "detail": "src.production.forms",
        "documentation": {}
    },
    {
        "label": "PoliceForm",
        "kind": 6,
        "importPath": "src.production.forms",
        "description": "src.production.forms",
        "peekOfCode": "class PoliceForm(forms.ModelForm):\n    class Meta:\n        model = Police\n        fields = ['produit', ]\n    def __init__(self, *args, **kwargs):\n        super(PoliceForm, self).__init__(*args, **kwargs)\n        instance = getattr(self, 'instance', None)\n        #if instance and instance.pk:\n        '''self.fields['commission_gestion'].widget.attrs['readonly'] = True\n        self.fields['commission_apport'].widget.attrs['readonly'] = True",
        "detail": "src.production.forms",
        "documentation": {}
    },
    {
        "label": "ContactForm",
        "kind": 6,
        "importPath": "src.production.forms",
        "description": "src.production.forms",
        "peekOfCode": "class ContactForm(forms.ModelForm):\n    class Meta:\n        model = Contact\n        fields = ['nom', 'prenoms','fonction','telephone','email',]\n#\nclass FilialeForm(forms.ModelForm):\n    class Meta:\n        model = Filiale\n        fields = ['nom', 'adresse', 'pays', 'ville', ]\n#",
        "detail": "src.production.forms",
        "documentation": {}
    },
    {
        "label": "FilialeForm",
        "kind": 6,
        "importPath": "src.production.forms",
        "description": "src.production.forms",
        "peekOfCode": "class FilialeForm(forms.ModelForm):\n    class Meta:\n        model = Filiale\n        fields = ['nom', 'adresse', 'pays', 'ville', ]\n#\nclass AcompteForm(forms.ModelForm):\n    class Meta:\n        model = Acompte\n        fields = ['montant', 'date_versement' ]\n#",
        "detail": "src.production.forms",
        "documentation": {}
    },
    {
        "label": "AcompteForm",
        "kind": 6,
        "importPath": "src.production.forms",
        "description": "src.production.forms",
        "peekOfCode": "class AcompteForm(forms.ModelForm):\n    class Meta:\n        model = Acompte\n        fields = ['montant', 'date_versement' ]\n#\nclass DocumentForm(forms.ModelForm):\n    class Meta:\n        model = Document\n        fields = ['nom', 'fichier', 'type_document','confidentialite', 'commentaire', ]\n#",
        "detail": "src.production.forms",
        "documentation": {}
    },
    {
        "label": "DocumentForm",
        "kind": 6,
        "importPath": "src.production.forms",
        "description": "src.production.forms",
        "peekOfCode": "class DocumentForm(forms.ModelForm):\n    class Meta:\n        model = Document\n        fields = ['nom', 'fichier', 'type_document','confidentialite', 'commentaire', ]\n#\nclass AlimentForm(forms.ModelForm):\n    class Meta:\n        model = Aliment\n        fields = []\nclass ApporteurAdminForm(forms.ModelForm):",
        "detail": "src.production.forms",
        "documentation": {}
    },
    {
        "label": "AlimentForm",
        "kind": 6,
        "importPath": "src.production.forms",
        "description": "src.production.forms",
        "peekOfCode": "class AlimentForm(forms.ModelForm):\n    class Meta:\n        model = Aliment\n        fields = []\nclass ApporteurAdminForm(forms.ModelForm):\n    class Meta:\n        model = Apporteur\n        exclude = ['bureau', 'created_by', 'id_per']  # Excluez le champ bureau du formulaire\nclass PhotoUploadForm(forms.Form):\n    file = forms.ImageField()",
        "detail": "src.production.forms",
        "documentation": {}
    },
    {
        "label": "ApporteurAdminForm",
        "kind": 6,
        "importPath": "src.production.forms",
        "description": "src.production.forms",
        "peekOfCode": "class ApporteurAdminForm(forms.ModelForm):\n    class Meta:\n        model = Apporteur\n        exclude = ['bureau', 'created_by', 'id_per']  # Excluez le champ bureau du formulaire\nclass PhotoUploadForm(forms.Form):\n    file = forms.ImageField()",
        "detail": "src.production.forms",
        "documentation": {}
    },
    {
        "label": "PhotoUploadForm",
        "kind": 6,
        "importPath": "src.production.forms",
        "description": "src.production.forms",
        "peekOfCode": "class PhotoUploadForm(forms.Form):\n    file = forms.ImageField()",
        "detail": "src.production.forms",
        "documentation": {}
    },
    {
        "label": "create_alimet_helper",
        "kind": 2,
        "importPath": "src.production.helper_production",
        "description": "src.production.helper_production",
        "peekOfCode": "def create_alimet_helper(prospect, request, date_affiliation=None):\n    formule_id = prospect.formulegarantie.id\n    qualite_beneficiaire = prospect.qualite_beneficiaire\n    aliment = Aliment.objects.create(bureau=prospect.bureau,\n                                     # adherent_principal=prospect.adherent_principal.aliment if prospect.adherent_principal else None,\n                                     pays_naissance=prospect.pays_naissance,\n                                     pays_residence=prospect.pays_residence,\n                                     pays_activite_professionnelle=prospect.pays_activite_professionnelle,\n                                     profession=prospect.profession,\n                                     rib=prospect.rib,",
        "detail": "src.production.helper_production",
        "documentation": {}
    },
    {
        "label": "Monnaie",
        "kind": 6,
        "importPath": "src.production.models",
        "description": "src.production.models",
        "peekOfCode": "class Monnaie(models.Model):\n    code = models.CharField(max_length=5, blank=False, null=False)\n    libelle = models.CharField(max_length=100, blank=False, null=False)\n    created_at = models.DateTimeField(auto_now=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    def __str__(self):\n        return self.libelle\n    class Meta:\n        db_table = 'monnaies'\n        verbose_name = 'Monnaie'",
        "detail": "src.production.models",
        "documentation": {}
    },
    {
        "label": "SecteurActivite",
        "kind": 6,
        "importPath": "src.production.models",
        "description": "src.production.models",
        "peekOfCode": "class SecteurActivite(models.Model):\n    libelle = models.CharField(max_length=100, unique=True)\n    status = models.BooleanField(default=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    def __str__(self):\n        return f\"{self.libelle} - {self.created_at}\"\n    class Meta:\n        db_table = 'secteur_activite'\n        verbose_name = \"Secteurs d'activité\"\n        verbose_name_plural = \"Secteurs d'activité\"",
        "detail": "src.production.models",
        "documentation": {}
    },
    {
        "label": "Client",
        "kind": 6,
        "importPath": "src.production.models",
        "description": "src.production.models",
        "peekOfCode": "class Client(models.Model):\n    veos_assure_sante_idper = models.CharField(max_length=100, blank=False, null=True)\n    veos_client_idper = models.CharField(max_length=100, blank=False, null=True)\n    bureau = models.ForeignKey(Bureau, on_delete=models.RESTRICT)\n    type_personne = models.ForeignKey(TypePersonne, blank=False, null=True, on_delete=models.RESTRICT)\n    business_unit = models.ForeignKey(BusinessUnit, blank=False, null=True, on_delete=models.RESTRICT)\n    type_client = models.ForeignKey(TypeClient, blank=False, null=True, on_delete=models.RESTRICT)\n    pays = models.ForeignKey(Pays, blank=True, null=True, on_delete=models.RESTRICT)\n    groupe_international = models.ForeignKey(GroupeInter, blank=True, null=True, on_delete=models.RESTRICT)\n    code = models.CharField(max_length=25, blank=False, null=True)",
        "detail": "src.production.models",
        "documentation": {}
    },
    {
        "label": "Police",
        "kind": 6,
        "importPath": "src.production.models",
        "description": "src.production.models",
        "peekOfCode": "class Police(models.Model):\n    created_by = models.ForeignKey(User, null=True, on_delete=models.RESTRICT)\n    updated_by = models.ForeignKey(User, related_name=\"police_updated_by\", null=True, on_delete=models.RESTRICT)\n    produit = models.ForeignKey(Produit, null=True, on_delete=models.RESTRICT)\n    type_assurance = models.ForeignKey(TypeAssurance, null=True, on_delete=models.RESTRICT)\n    #\n    bureau = models.ForeignKey(Bureau, on_delete=models.RESTRICT)\n    client = models.ForeignKey(Client, related_name='polices', on_delete=models.RESTRICT)\n    devise = models.ForeignKey(Devise, null=True, on_delete=models.RESTRICT)\n    taxes = models.ManyToManyField(Taxe, through='TaxePolice')",
        "detail": "src.production.models",
        "documentation": {}
    },
    {
        "label": "HistoriquePolice",
        "kind": 6,
        "importPath": "src.production.models",
        "description": "src.production.models",
        "peekOfCode": "class HistoriquePolice(models.Model):\n    police = models.ForeignKey(Police, related_name='historiques', on_delete=models.RESTRICT)\n    created_by = models.ForeignKey(User, null=True, on_delete=models.RESTRICT)\n    updated_by = models.ForeignKey(User, related_name=\"historique_police_updated_by\", null=True,\n                                   on_delete=models.RESTRICT)\n    produit = models.ForeignKey(Produit, null=True, on_delete=models.RESTRICT)\n    type_assurance = models.ForeignKey(TypeAssurance, on_delete=models.RESTRICT)\n    #\n    bureau = models.ForeignKey(Bureau, on_delete=models.RESTRICT)\n    client = models.ForeignKey(Client, on_delete=models.RESTRICT)",
        "detail": "src.production.models",
        "documentation": {}
    },
    {
        "label": "PoliceClient",
        "kind": 6,
        "importPath": "src.production.models",
        "description": "src.production.models",
        "peekOfCode": "class PoliceClient(models.Model):\n    client = models.ForeignKey(Client, on_delete=models.RESTRICT)\n    police = models.ForeignKey(Police, on_delete=models.RESTRICT)\n    date_debut = models.DateTimeField(blank=True, null=True)\n    date_fin = models.DateTimeField(blank=True, null=True)\n    observation = models.CharField(max_length=255, null=True, blank=True)\n    statut = models.fields.CharField(choices=Statut.choices, default=Statut.ACTIF, max_length=15, null=True, blank=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    class Meta:",
        "detail": "src.production.models",
        "documentation": {}
    },
    {
        "label": "PoliceGarantie",
        "kind": 6,
        "importPath": "src.production.models",
        "description": "src.production.models",
        "peekOfCode": "class PoliceGarantie(models.Model):\n    client = models.ForeignKey(Client, on_delete=models.RESTRICT, null=True)\n    police = models.ForeignKey(Police, on_delete=models.RESTRICT, null=True)\n    garantie = models.ForeignKey(Garantie, on_delete=models.RESTRICT, null=True)\n    created_by = models.ForeignKey(User, null=True, on_delete=models.RESTRICT)\n    updated_by = models.ForeignKey(User, related_name=\"pg_updated_by\", null=True, on_delete=models.RESTRICT)\n    franchise = models.FloatField(blank=True, null=True)\n    capital = models.FloatField(blank=True, null=True)\n    statut = models.fields.CharField(choices=Statut.choices, default=Statut.ACTIF, max_length=15, null=True, blank=True)\n    created_at = models.DateTimeField(auto_now_add=True)",
        "detail": "src.production.models",
        "documentation": {}
    },
    {
        "label": "PoliceAssureur",
        "kind": 6,
        "importPath": "src.production.models",
        "description": "src.production.models",
        "peekOfCode": "class PoliceAssureur(models.Model):\n    client = models.ForeignKey(Client, on_delete=models.RESTRICT, null=True)\n    historique_police = models.ForeignKey(HistoriquePolice, on_delete=models.RESTRICT, null=True)\n    compagnie = models.ForeignKey(Compagnie, on_delete=models.RESTRICT, null=True)\n    created_by = models.ForeignKey(User, null=True, on_delete=models.RESTRICT)\n    date_creation = models.DateTimeField(null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    class Meta:\n        db_table = 'police_assureurs'",
        "detail": "src.production.models",
        "documentation": {}
    },
    {
        "label": "AutreRisque",
        "kind": 6,
        "importPath": "src.production.models",
        "description": "src.production.models",
        "peekOfCode": "class AutreRisque(models.Model):\n    historique_police = models.ForeignKey(HistoriquePolice, null=True, on_delete=models.RESTRICT)\n    created_by = models.ForeignKey(User, related_name=\"autr_created_by\", null=True, on_delete=models.RESTRICT)\n    updated_by = models.ForeignKey(User, related_name=\"autr_updated_by\", null=True, on_delete=models.RESTRICT)\n    libelle = models.TextField(null=True)\n    description = models.TextField(null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    class Meta:\n        db_table = 'autre_risque'",
        "detail": "src.production.models",
        "documentation": {}
    },
    {
        "label": "Vehicule",
        "kind": 6,
        "importPath": "src.production.models",
        "description": "src.production.models",
        "peekOfCode": "class Vehicule(models.Model):\n    categorie_vehicule = models.ForeignKey(CategorieVehicule, on_delete=models.RESTRICT, null=True)\n    carosserie = models.ForeignKey(Carosserie, on_delete=models.RESTRICT, null=True)\n    carburant = models.ForeignKey(Carburant, on_delete=models.RESTRICT, null=True)\n    numero_immatriculation = models.CharField(max_length=15, blank=True, null=True)\n    numero_immat_provisoire = models.CharField(max_length=15, blank=True, null=True)\n    numero_serie = models.CharField(max_length=25, blank=True, null=True)\n    marque = models.CharField(max_length=50, blank=True, null=True)\n    modele = models.CharField(max_length=50, blank=True, null=True)\n    places_assises = models.CharField(max_length=50, blank=True, null=True)",
        "detail": "src.production.models",
        "documentation": {}
    },
    {
        "label": "AlimentPolice",
        "kind": 6,
        "importPath": "src.production.models",
        "description": "src.production.models",
        "peekOfCode": "class AlimentPolice(models.Model):\n    vehicule = models.ForeignKey(Vehicule, on_delete=models.RESTRICT, null=True)\n    usage = models.ForeignKey(Usage, on_delete=models.RESTRICT, null=True)\n    historique_police = models.ForeignKey(HistoriquePolice, on_delete=models.RESTRICT, null=True)\n    police = models.ForeignKey(Police, on_delete=models.RESTRICT, null=True)\n    created_by = models.ForeignKey(User, related_name=\"alimpo_created_by\", null=True, on_delete=models.RESTRICT)\n    updated_by = models.ForeignKey(User, related_name=\"alimpo_updated_by\", null=True, on_delete=models.RESTRICT)\n    existed_by = models.ForeignKey(User, related_name=\"alimpo_existed_by\", null=True, on_delete=models.RESTRICT)\n    numero_parc = models.CharField(max_length=25, blank=True, null=True)\n    proprietaire = models.CharField(max_length=50, blank=True, null=True)",
        "detail": "src.production.models",
        "documentation": {}
    },
    {
        "label": "PeriodeCouverture",
        "kind": 6,
        "importPath": "src.production.models",
        "description": "src.production.models",
        "peekOfCode": "class PeriodeCouverture(models.Model):\n    police = models.ForeignKey(Police, on_delete=models.RESTRICT)\n    date_debut_effet = models.DateTimeField(blank=True, null=True)\n    date_fin_effet = models.DateTimeField(blank=True, null=True)\n    observation = models.CharField(max_length=255, null=True, blank=True)\n    statut = models.fields.CharField(choices=Statut.choices, default=Statut.ACTIF, max_length=15, null=True, blank=True)\n    statut_validite = models.fields.CharField(choices=StatutValidite.choices, default=StatutValidite.VALIDE,\n                                              max_length=15, null=True, blank=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)",
        "detail": "src.production.models",
        "documentation": {}
    },
    {
        "label": "ModePrefinancement",
        "kind": 6,
        "importPath": "src.production.models",
        "description": "src.production.models",
        "peekOfCode": "class ModePrefinancement(models.Model):\n    code = models.CharField(max_length=5, null=True, blank=True)\n    libelle = models.CharField(max_length=255, null=True, blank=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    def __str__(self):\n        return self.libelle\n    class Meta:\n        db_table = 'mode_prefinancement'\n        verbose_name = 'Mode de prefinancement'",
        "detail": "src.production.models",
        "documentation": {}
    },
    {
        "label": "FormuleGarantie",
        "kind": 6,
        "importPath": "src.production.models",
        "description": "src.production.models",
        "peekOfCode": "class FormuleGarantie(models.Model):\n    mode_prefinancement = models.ForeignKey(ModePrefinancement, null=True, on_delete=models.RESTRICT)\n    reseau_soin = models.ForeignKey(ReseauSoin, null=True, on_delete=models.RESTRICT)\n    created_by = models.ForeignKey(User, null=True, on_delete=models.RESTRICT)\n    updated_by = models.ForeignKey(User, related_name=\"fg_updated_by\", null=True, on_delete=models.RESTRICT)\n    deleted_by = models.ForeignKey(User, related_name=\"fg_deleted_by\", null=True, on_delete=models.RESTRICT)\n    police = models.ForeignKey(Police, on_delete=models.RESTRICT, null=True)\n    bureau = models.ForeignKey(Bureau, on_delete=models.RESTRICT, null=True)\n    territorialite = models.ForeignKey(Territorialite, on_delete=models.RESTRICT, null=True)\n    type_tarif = models.ForeignKey(TypeTarif, on_delete=models.RESTRICT, null=True)",
        "detail": "src.production.models",
        "documentation": {}
    },
    {
        "label": "Bareme",
        "kind": 6,
        "importPath": "src.production.models",
        "description": "src.production.models",
        "peekOfCode": "class Bareme(models.Model):\n    created_by = models.ForeignKey(User, null=True, on_delete=models.RESTRICT)\n    deleted_by = models.ForeignKey(User, related_name=\"deleted_by\", null=True, on_delete=models.RESTRICT)\n    formulegarantie = models.ForeignKey(FormuleGarantie, on_delete=models.RESTRICT, null=True)\n    rubrique = models.ForeignKey(Rubrique, on_delete=models.RESTRICT, null=True)\n    sous_rubrique = models.ForeignKey(SousRubrique, on_delete=models.RESTRICT, null=True)\n    regroupement_acte = models.ForeignKey(RegroupementActe, on_delete=models.RESTRICT, null=True)\n    sous_regroupement_acte = models.ForeignKey(SousRegroupementActe, on_delete=models.RESTRICT, null=True)\n    acte = models.ForeignKey(Acte, on_delete=models.RESTRICT, null=True)\n    is_garanti = models.BooleanField(default=True)",
        "detail": "src.production.models",
        "documentation": {}
    },
    {
        "label": "TauxCouvertureVariable",
        "kind": 6,
        "importPath": "src.production.models",
        "description": "src.production.models",
        "peekOfCode": "class TauxCouvertureVariable(models.Model):\n    created_by = models.ForeignKey(User, null=True, on_delete=models.RESTRICT)\n    formulegarantie = models.ForeignKey(FormuleGarantie, on_delete=models.RESTRICT)\n    secteur = models.ForeignKey(Secteur,\n                                on_delete=models.RESTRICT)  # Pour une même formule, le taux de couverture varie selon le secteur (public/privé) du prestataire\n    taux_couverture = models.IntegerField(null=False)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    statut_validite = models.fields.CharField(choices=StatutValidite.choices, default=StatutValidite.VALIDE,\n                                              max_length=15, null=True)",
        "detail": "src.production.models",
        "documentation": {}
    },
    {
        "label": "FormuleRubriquePrefinance",
        "kind": 6,
        "importPath": "src.production.models",
        "description": "src.production.models",
        "peekOfCode": "class FormuleRubriquePrefinance(models.Model):\n    created_by = models.ForeignKey(User, null=True, on_delete=models.RESTRICT)\n    formulegarantie = models.ForeignKey(FormuleGarantie, on_delete=models.RESTRICT)\n    rubrique = models.ForeignKey(Rubrique, null=True, on_delete=models.RESTRICT)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    statut_validite = models.fields.CharField(choices=StatutValidite.choices, default=StatutValidite.VALIDE,\n                                              max_length=15, null=True)\n    def __str__(self):\n        return f'{self.formulegarantie.libelle} - {self.rubrique.name}'",
        "detail": "src.production.models",
        "documentation": {}
    },
    {
        "label": "Aliment",
        "kind": 6,
        "importPath": "src.production.models",
        "description": "src.production.models",
        "peekOfCode": "class Aliment(models.Model):\n    # champs pour la migration veos\n    sms_active = models.BooleanField(default=False)\n    veos_id_npol = models.CharField(max_length=50, null=True, blank=True)\n    veos_code_aliment = models.CharField(max_length=50, blank=True, null=True)\n    veos_adherent_principal = models.CharField(max_length=50, null=True, blank=True)\n    veos_adherent_principal_id_per = models.CharField(max_length=50, null=True, blank=True)\n    veos_code_qualite_beneficiaire = models.CharField(max_length=50, null=True, blank=True)\n    veos_code_formule = models.CharField(max_length=50, null=True, blank=True)\n    veos_code_college = models.CharField(max_length=50, null=True, blank=True)",
        "detail": "src.production.models",
        "documentation": {}
    },
    {
        "label": "PhotoIdentite",
        "kind": 6,
        "importPath": "src.production.models",
        "description": "src.production.models",
        "peekOfCode": "class PhotoIdentite(models.Model):\n    aliment = models.ForeignKey(Aliment, on_delete=models.RESTRICT)\n    fichier = models.ImageField(max_length=255, blank=True, null=True)\n    class Meta:\n        db_table = 'photo'\n        verbose_name = \"Photo\"\n        verbose_name_plural = \"Photos\"\nclass AlimentFormule(models.Model):\n    created_by = models.ForeignKey(User, null=True, on_delete=models.RESTRICT)\n    aliment = models.ForeignKey(Aliment, related_name=\"historique_formules\", on_delete=models.RESTRICT)",
        "detail": "src.production.models",
        "documentation": {}
    },
    {
        "label": "AlimentFormule",
        "kind": 6,
        "importPath": "src.production.models",
        "description": "src.production.models",
        "peekOfCode": "class AlimentFormule(models.Model):\n    created_by = models.ForeignKey(User, null=True, on_delete=models.RESTRICT)\n    aliment = models.ForeignKey(Aliment, related_name=\"historique_formules\", on_delete=models.RESTRICT)\n    formule = models.ForeignKey(FormuleGarantie, null=True, on_delete=models.RESTRICT)\n    motif = models.CharField(max_length=255, blank=True, null=True)\n    observation = models.CharField(max_length=255, blank=True, null=True)\n    date_debut = models.DateTimeField(blank=True, null=True)\n    date_fin = models.DateTimeField(blank=True, null=True)\n    statut = models.fields.CharField(choices=Statut.choices, default=Statut.ACTIF, max_length=15, null=True, blank=True)\n    statut_validite = models.fields.CharField(choices=Statut.choices, default=StatutValidite.VALIDE, max_length=15,",
        "detail": "src.production.models",
        "documentation": {}
    },
    {
        "label": "AlimentTemporaire",
        "kind": 6,
        "importPath": "src.production.models",
        "description": "src.production.models",
        "peekOfCode": "class AlimentTemporaire(models.Model):\n    created_by = models.ForeignKey(User, null=True, on_delete=models.RESTRICT)\n    session_import = models.CharField(max_length=255, blank=True, null=True)\n    aliment = models.ForeignKey(Aliment, on_delete=models.RESTRICT)\n    numero_famille_import = models.CharField(max_length=50, blank=True, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    class Meta:\n        db_table = 'aliment_temporaire'\n        verbose_name = \"Aliment temporaire\"",
        "detail": "src.production.models",
        "documentation": {}
    },
    {
        "label": "TaxePolice",
        "kind": 6,
        "importPath": "src.production.models",
        "description": "src.production.models",
        "peekOfCode": "class TaxePolice(models.Model):\n    taxe = models.ForeignKey(Taxe, on_delete=models.RESTRICT)\n    police = models.ForeignKey(Police, on_delete=models.RESTRICT)\n    montant = models.FloatField(blank=True, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    class Meta:\n        db_table = 'taxe_police'\n        verbose_name = 'Taxe de la police'\n        verbose_name_plural = 'Taxes de la police'",
        "detail": "src.production.models",
        "documentation": {}
    },
    {
        "label": "ApporteurPolice",
        "kind": 6,
        "importPath": "src.production.models",
        "description": "src.production.models",
        "peekOfCode": "class ApporteurPolice(models.Model):\n    added_by = models.ForeignKey(User, null=True, on_delete=models.RESTRICT)\n    police = models.ForeignKey(Police, on_delete=models.RESTRICT)\n    apporteur = models.ForeignKey(Apporteur, on_delete=models.RESTRICT)\n    base_calcul = models.ForeignKey(BaseCalcul, on_delete=models.RESTRICT)\n    taux_com_affaire_nouvelle = models.FloatField(blank=True, null=True)\n    taux_com_renouvellement = models.FloatField(blank=True, null=True)\n    date_effet = models.DateField(blank=True, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)",
        "detail": "src.production.models",
        "documentation": {}
    },
    {
        "label": "HistoriqueTaxePolice",
        "kind": 6,
        "importPath": "src.production.models",
        "description": "src.production.models",
        "peekOfCode": "class HistoriqueTaxePolice(models.Model):\n    taxe = models.ForeignKey(Taxe, on_delete=models.RESTRICT)\n    historique_police = models.ForeignKey(HistoriquePolice, on_delete=models.RESTRICT)\n    montant = models.FloatField(blank=True, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    class Meta:\n        db_table = 'historique_taxe_police'\n        verbose_name = 'Historique des taxes de la police'\n        verbose_name_plural = 'Historique des taxes de la police'",
        "detail": "src.production.models",
        "documentation": {}
    },
    {
        "label": "HistoriqueApporteurPolice",
        "kind": 6,
        "importPath": "src.production.models",
        "description": "src.production.models",
        "peekOfCode": "class HistoriqueApporteurPolice(models.Model):\n    added_by = models.ForeignKey(User, null=True, on_delete=models.RESTRICT)\n    historique_police = models.ForeignKey(HistoriquePolice, on_delete=models.RESTRICT)\n    apporteur = models.ForeignKey(Apporteur, on_delete=models.RESTRICT)\n    base_calcul = models.ForeignKey(BaseCalcul, on_delete=models.RESTRICT)\n    taux_com_affaire_nouvelle = models.FloatField(blank=True, null=True)\n    taux_com_renouvellement = models.FloatField(blank=True, null=True)\n    date_effet = models.DateField(blank=True, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)",
        "detail": "src.production.models",
        "documentation": {}
    },
    {
        "label": "Carte",
        "kind": 6,
        "importPath": "src.production.models",
        "description": "src.production.models",
        "peekOfCode": "class Carte(models.Model):\n    bureau = models.ForeignKey(Bureau, null=True, on_delete=models.RESTRICT)\n    aliment = models.ForeignKey(Aliment, related_name='cartes', null=True, blank=True, on_delete=models.RESTRICT)\n    numero = models.CharField(unique=True, max_length=30, blank=True, null=True)\n    motif_edition = models.CharField(max_length=255, blank=True, null=True)\n    date_edition = models.DateTimeField(auto_now=True, blank=True, null=True)\n    date_desactivation = models.DateTimeField(blank=True, null=True)\n    statut = models.fields.CharField(choices=Statut.choices, default=Statut.ACTIF, max_length=15, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)",
        "detail": "src.production.models",
        "documentation": {}
    },
    {
        "label": "Mouvement",
        "kind": 6,
        "importPath": "src.production.models",
        "description": "src.production.models",
        "peekOfCode": "class Mouvement(models.Model):\n    libelle = models.CharField(max_length=100, blank=True, null=True)\n    code = models.CharField(max_length=25, blank=True, null=True)\n    type = models.CharField(max_length=50, blank=True, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    def __str__(self):\n        return self.libelle\n    class Meta:\n        db_table = 'mouvements'",
        "detail": "src.production.models",
        "documentation": {}
    },
    {
        "label": "Motif",
        "kind": 6,
        "importPath": "src.production.models",
        "description": "src.production.models",
        "peekOfCode": "class Motif(models.Model):\n    mouvement = models.ForeignKey(Mouvement, on_delete=models.RESTRICT)\n    libelle = models.CharField(max_length=50, blank=True, null=True)\n    etat_police = models.CharField(max_length=50, blank=True, null=True)\n    code = models.CharField(max_length=50, blank=True, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    def __str__(self):\n        return self.libelle\n    class Meta:",
        "detail": "src.production.models",
        "documentation": {}
    },
    {
        "label": "MouvementPolice",
        "kind": 6,
        "importPath": "src.production.models",
        "description": "src.production.models",
        "peekOfCode": "class MouvementPolice(models.Model):\n    created_by = models.ForeignKey(User, null=True, on_delete=models.RESTRICT)\n    mp_deleted_by = models.ForeignKey(User, related_name=\"mp_deleted_by\", null=True, on_delete=models.RESTRICT)\n    police = models.ForeignKey(Police, on_delete=models.RESTRICT)\n    mouvement = models.ForeignKey(Mouvement, on_delete=models.RESTRICT)\n    motif = models.ForeignKey(Motif, on_delete=models.RESTRICT)\n    observation = models.CharField(max_length=255, blank=True, null=True)\n    date_effet = models.DateField(blank=True, null=True)\n    date_fin_periode_garantie = models.DateField(blank=True, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)",
        "detail": "src.production.models",
        "documentation": {}
    },
    {
        "label": "MouvementAliment",
        "kind": 6,
        "importPath": "src.production.models",
        "description": "src.production.models",
        "peekOfCode": "class MouvementAliment(models.Model):\n    created_by = models.ForeignKey(User, null=True, on_delete=models.RESTRICT)\n    aliment = models.ForeignKey(Aliment, related_name=\"ses_mouvements\", on_delete=models.RESTRICT)\n    mouvement = models.ForeignKey(Mouvement, on_delete=models.RESTRICT)\n    police = models.ForeignKey(Police, null=True, on_delete=models.RESTRICT)\n    # motif = models.ForeignKey(Motif, on_delete=models.RESTRICT)\n    motif = models.CharField(max_length=255, blank=True, null=True)\n    date_effet = models.DateField(blank=True, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)",
        "detail": "src.production.models",
        "documentation": {}
    },
    {
        "label": "Quittance",
        "kind": 6,
        "importPath": "src.production.models",
        "description": "src.production.models",
        "peekOfCode": "class Quittance(models.Model):\n    bureau = models.ForeignKey(Bureau, null=True, on_delete=models.RESTRICT)\n    created_by = models.ForeignKey(User, null=True, on_delete=models.RESTRICT)\n    deleted_by = models.ForeignKey(User, related_name=\"quittance_deleted_by\", null=True, on_delete=models.RESTRICT)\n    type_quittance = models.ForeignKey(TypeQuittance, null=True, on_delete=models.RESTRICT)\n    nature_quittance = models.ForeignKey(NatureQuittance, null=True, on_delete=models.RESTRICT)\n    police = models.ForeignKey(Police, null=True, on_delete=models.RESTRICT)\n    compagnie = models.ForeignKey(Compagnie, null=True, on_delete=models.RESTRICT)\n    devise = models.ForeignKey(Devise, null=True, on_delete=models.RESTRICT)\n    taxes = models.ManyToManyField(Taxe, through='TaxeQuittance')",
        "detail": "src.production.models",
        "documentation": {}
    },
    {
        "label": "TaxeQuittance",
        "kind": 6,
        "importPath": "src.production.models",
        "description": "src.production.models",
        "peekOfCode": "class TaxeQuittance(models.Model):\n    taxe = models.ForeignKey(Taxe, on_delete=models.RESTRICT)\n    quittance = models.ForeignKey(Quittance, on_delete=models.RESTRICT)\n    montant = models.FloatField(blank=True, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    class Meta:\n        db_table = 'taxe_quittance'\n        verbose_name = 'Autre taxe de la quittance'\n        verbose_name_plural = 'Autres taxes de la quittance'",
        "detail": "src.production.models",
        "documentation": {}
    },
    {
        "label": "MouvementQuittance",
        "kind": 6,
        "importPath": "src.production.models",
        "description": "src.production.models",
        "peekOfCode": "class MouvementQuittance(models.Model):\n    created_by = models.ForeignKey(User, null=True, on_delete=models.RESTRICT)\n    mouvement = models.ForeignKey(Mouvement, on_delete=models.RESTRICT)\n    quittance = models.ForeignKey(Quittance, on_delete=models.RESTRICT)\n    motif = models.CharField(max_length=255, blank=True, null=True)\n    observation = models.CharField(max_length=255, blank=True, null=True)\n    date_effet = models.DateField(blank=True, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    statut_validite = models.fields.CharField(choices=StatutValidite.choices, default=StatutValidite.VALIDE,",
        "detail": "src.production.models",
        "documentation": {}
    },
    {
        "label": "Operation",
        "kind": 6,
        "importPath": "src.production.models",
        "description": "src.production.models",
        "peekOfCode": "class Operation(models.Model):\n    created_by = models.ForeignKey(User, null=True, on_delete=models.RESTRICT)\n    nature_operation = models.ForeignKey(NatureOperation, null=True, on_delete=models.CASCADE)\n    devise = models.ForeignKey(Devise, null=True, on_delete=models.CASCADE)\n    mode_reglement = models.ForeignKey(ModeReglement, null=True, on_delete=models.RESTRICT)\n    banque = models.ForeignKey(Banque, null=True, on_delete=models.RESTRICT)\n    banque_emettrice = models.CharField(max_length=255, blank=True, null=True)\n    compte_tresorerie = models.ForeignKey(CompteTresorerie, null=True, on_delete=models.RESTRICT)\n    numero_piece = models.CharField(max_length=100, blank=True, null=True)\n    numero = models.CharField(max_length=100, blank=True, null=True)",
        "detail": "src.production.models",
        "documentation": {}
    },
    {
        "label": "Reglement",
        "kind": 6,
        "importPath": "src.production.models",
        "description": "src.production.models",
        "peekOfCode": "class Reglement(models.Model):\n    bureau = models.ForeignKey(Bureau, null=True, on_delete=models.RESTRICT)\n    created_by = models.ForeignKey(User, null=True, on_delete=models.RESTRICT)\n    reg_deleted_by = models.ForeignKey(User, related_name=\"reg_deleted_by\", null=True, on_delete=models.RESTRICT)\n    numero = models.CharField(max_length=50, blank=True, null=True)\n    numero_piece = models.CharField(max_length=50, blank=True, null=True)\n    mode_reglement = models.ForeignKey(ModeReglement, null=True, on_delete=models.RESTRICT)\n    banque = models.ForeignKey(Banque, null=True, on_delete=models.RESTRICT)\n    banque_emettrice = models.CharField(max_length=255, blank=True, null=True)\n    compte_tresorerie = models.ForeignKey(CompteTresorerie, null=True, on_delete=models.RESTRICT)",
        "detail": "src.production.models",
        "documentation": {}
    },
    {
        "label": "OperationReglement",
        "kind": 6,
        "importPath": "src.production.models",
        "description": "src.production.models",
        "peekOfCode": "class OperationReglement(models.Model):\n    created_by = models.ForeignKey(User, null=True, on_delete=models.RESTRICT)\n    operation = models.ForeignKey(Operation, on_delete=models.RESTRICT)\n    reglement = models.ForeignKey(Reglement, on_delete=models.RESTRICT)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    statut_validite = models.fields.CharField(choices=StatutValidite.choices, default=StatutValidite.VALIDE,\n                                              max_length=15, null=True)\n    class Meta:\n        db_table = 'operation_reglement'",
        "detail": "src.production.models",
        "documentation": {}
    },
    {
        "label": "Acompte",
        "kind": 6,
        "importPath": "src.production.models",
        "description": "src.production.models",
        "peekOfCode": "class Acompte(models.Model):\n    client = models.ForeignKey(Client, on_delete=models.RESTRICT)\n    police = models.ForeignKey(Police, null=True, on_delete=models.RESTRICT)\n    quittance = models.ForeignKey(Quittance, null=True, on_delete=models.RESTRICT)\n    libelle = models.CharField(max_length=255, blank=True, null=True)\n    sens = models.CharField(max_length=1, null=True)\n    montant = models.DecimalField(max_digits=20, decimal_places=3, blank=False, null=True)\n    date_versement = models.DateField(blank=False, null=True)\n    date_affectation = models.DateField(blank=True, null=True)\n    observation = models.CharField(max_length=255, blank=True, null=True)",
        "detail": "src.production.models",
        "documentation": {}
    },
    {
        "label": "TypeDocument",
        "kind": 6,
        "importPath": "src.production.models",
        "description": "src.production.models",
        "peekOfCode": "class TypeDocument(models.Model):\n    libelle = models.CharField(max_length=50, blank=True, null=True)\n    is_sinistre = models.BooleanField(default=False)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    def __str__(self):\n        return self.libelle\n    class Meta:\n        db_table = 'types_documents'\n        verbose_name = 'Type de document'",
        "detail": "src.production.models",
        "documentation": {}
    },
    {
        "label": "Document",
        "kind": 6,
        "importPath": "src.production.models",
        "description": "src.production.models",
        "peekOfCode": "class Document(models.Model):\n    client = models.ForeignKey(Client, null=True, on_delete=models.RESTRICT)\n    police = models.ForeignKey(Police, null=True, on_delete=models.RESTRICT)\n    aliment = models.ForeignKey(Aliment, null=True, on_delete=models.RESTRICT)\n    type_document = models.ForeignKey(TypeDocument, on_delete=models.RESTRICT)\n    quittance = models.ForeignKey(Quittance, null=True, on_delete=models.RESTRICT)\n    nom = models.CharField(max_length=255, blank=True, null=True)\n    fichier = models.FileField(upload_to=upload_location_document, blank=True, default=None, null=True)\n    confidentialite = models.fields.CharField(choices=OptionYesNo.choices, default=OptionYesNo.OUI, max_length=15,\n                                              null=True)",
        "detail": "src.production.models",
        "documentation": {}
    },
    {
        "label": "Filiale",
        "kind": 6,
        "importPath": "src.production.models",
        "description": "src.production.models",
        "peekOfCode": "class Filiale(models.Model):\n    client = models.ForeignKey(Client, on_delete=models.RESTRICT)\n    pays = models.ForeignKey(Pays, blank=True, null=True, on_delete=models.RESTRICT)\n    nom = models.CharField(max_length=50, blank=True, null=True)\n    ville = models.CharField(max_length=50, blank=True, null=True)\n    adresse = models.CharField(max_length=50, blank=True, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    def __str__(self):\n        return self.nom",
        "detail": "src.production.models",
        "documentation": {}
    },
    {
        "label": "Contact",
        "kind": 6,
        "importPath": "src.production.models",
        "description": "src.production.models",
        "peekOfCode": "class Contact(models.Model):\n    client = models.ForeignKey(Client, on_delete=models.RESTRICT)\n    nom = models.CharField(max_length=50, blank=True, null=True)\n    prenoms = models.CharField(max_length=50, blank=True, null=True)\n    fonction = models.CharField(max_length=50, blank=True, null=True)\n    telephone = models.CharField(max_length=50, blank=True, null=True)\n    email = models.CharField(max_length=50, blank=True, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    def __str__(self):",
        "detail": "src.production.models",
        "documentation": {}
    },
    {
        "label": "HistoriqueVehicule",
        "kind": 6,
        "importPath": "src.production.models",
        "description": "src.production.models",
        "peekOfCode": "class HistoriqueVehicule(models.Model):\n    vehicule = models.ForeignKey(Vehicule, on_delete=models.RESTRICT, null=True)\n    categorie_vehicule = models.ForeignKey(CategorieVehicule, on_delete=models.RESTRICT, null=True)\n    carosserie = models.ForeignKey(Carosserie, on_delete=models.RESTRICT, null=True)\n    usage = models.ForeignKey(Usage, on_delete=models.RESTRICT, null=True)\n    carburant = models.ForeignKey(Carburant, on_delete=models.RESTRICT, null=True)\n    created_by = models.ForeignKey(User, null=True, on_delete=models.RESTRICT)\n    updated_by = models.ForeignKey(User, related_name=\"hvh_updated_by\", null=True, on_delete=models.RESTRICT)\n    numero_immatriculation = models.CharField(max_length=15, blank=True, null=True)\n    numero_immat_provisoire = models.CharField(max_length=15, blank=True, null=True)",
        "detail": "src.production.models",
        "documentation": {}
    },
    {
        "label": "VehiculePolice",
        "kind": 6,
        "importPath": "src.production.models",
        "description": "src.production.models",
        "peekOfCode": "class VehiculePolice(models.Model):\n    vehicule = models.ForeignKey(Vehicule, on_delete=models.RESTRICT)\n    police = models.ForeignKey(Police, on_delete=models.RESTRICT)\n    formule = models.ForeignKey(FormuleGarantie, null=True, on_delete=models.RESTRICT)\n    motif = models.CharField(max_length=255, blank=True, null=True)\n    date_mouvement = models.DateTimeField(blank=True, null=True)\n    statut = models.fields.CharField(choices=Statut.choices, default=Statut.ACTIF, max_length=15, null=True,\n                                     blank=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)",
        "detail": "src.production.models",
        "documentation": {}
    },
    {
        "label": "TarifPrestataireClient",
        "kind": 6,
        "importPath": "src.production.models",
        "description": "src.production.models",
        "peekOfCode": "class TarifPrestataireClient(models.Model):\n    prestataire = models.ForeignKey(Prestataire, on_delete=models.RESTRICT, null=True)\n    client = models.ForeignKey(Client, on_delete=models.RESTRICT, null=True)\n    formule = models.ForeignKey(FormuleGarantie, on_delete=models.RESTRICT, null=True)\n    fichier_tarification = models.FileField(upload_to=upload_location_tarifprestataireclient, blank=True, default=None,\n                                            null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    statut = models.BooleanField(default=True)\n    class Meta:",
        "detail": "src.production.models",
        "documentation": {}
    },
    {
        "label": "CarteDigitalDematerialisee",
        "kind": 6,
        "importPath": "src.production.models",
        "description": "src.production.models",
        "peekOfCode": "class CarteDigitalDematerialisee(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    has_digital_card = models.BooleanField(default=False)\n    digital_card_url = models.URLField(max_length=500, blank=True, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    def __str__(self):\n        return f'Carte Digitale pour l\\'Utilisateur : {self.user.username}'\n    class Meta:\n        db_table = 'cartes_digital_dematerialisees'",
        "detail": "src.production.models",
        "documentation": {}
    },
    {
        "label": "upload_location_client",
        "kind": 2,
        "importPath": "src.production.models",
        "description": "src.production.models",
        "peekOfCode": "def upload_location_client(instance, filename):\n    filebase, extension = filename.rsplit('.', 1)\n    file_name = datetime.datetime.now().strftime('%Y%m%d%H%M%S')\n    return 'clients/logos/%s.%s' % (file_name, extension)\nclass SecteurActivite(models.Model):\n    libelle = models.CharField(max_length=100, unique=True)\n    status = models.BooleanField(default=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    def __str__(self):\n        return f\"{self.libelle} - {self.created_at}\"",
        "detail": "src.production.models",
        "documentation": {}
    },
    {
        "label": "upload_location_aliment",
        "kind": 2,
        "importPath": "src.production.models",
        "description": "src.production.models",
        "peekOfCode": "def upload_location_aliment(instance, filename):\n    filebase, extension = filename.rsplit('.', 1)\n    file_name = datetime.datetime.now().strftime('%Y%m%d%H%M%S')\n    if filename.startswith('photo_'):\n        return f'beneficiaires/photos/{filename}'\n    return 'photos/%s.%s' % (file_name, extension)\nclass Aliment(models.Model):\n    # champs pour la migration veos\n    sms_active = models.BooleanField(default=False)\n    veos_id_npol = models.CharField(max_length=50, null=True, blank=True)",
        "detail": "src.production.models",
        "documentation": {}
    },
    {
        "label": "upload_location_carte",
        "kind": 2,
        "importPath": "src.production.models",
        "description": "src.production.models",
        "peekOfCode": "def upload_location_carte(instance, filename):\n    filebase, extension = filename.rsplit('.', 1)\n    file_name = datetime.datetime.now().strftime('%Y%m%d%H%M%S')\n    if filename.startswith('qrcode_image_'):\n        return f'beneficiaires/cartes_qrcodes/{filename}'\n    return f'beneficiaire/cartes/{filename}'\nclass Carte(models.Model):\n    bureau = models.ForeignKey(Bureau, null=True, on_delete=models.RESTRICT)\n    aliment = models.ForeignKey(Aliment, related_name='cartes', null=True, blank=True, on_delete=models.RESTRICT)\n    numero = models.CharField(unique=True, max_length=30, blank=True, null=True)",
        "detail": "src.production.models",
        "documentation": {}
    },
    {
        "label": "upload_location_operation",
        "kind": 2,
        "importPath": "src.production.models",
        "description": "src.production.models",
        "peekOfCode": "def upload_location_operation(instance, filename):\n    filebase, extension = filename.rsplit('.', 1)\n    file_name = datetime.datetime.now().strftime('%Y%m%d%H%M%S')\n    return 'bordereaux/%s.%s' % (file_name, extension)\nclass Operation(models.Model):\n    created_by = models.ForeignKey(User, null=True, on_delete=models.RESTRICT)\n    nature_operation = models.ForeignKey(NatureOperation, null=True, on_delete=models.CASCADE)\n    devise = models.ForeignKey(Devise, null=True, on_delete=models.CASCADE)\n    mode_reglement = models.ForeignKey(ModeReglement, null=True, on_delete=models.RESTRICT)\n    banque = models.ForeignKey(Banque, null=True, on_delete=models.RESTRICT)",
        "detail": "src.production.models",
        "documentation": {}
    },
    {
        "label": "upload_location_document",
        "kind": 2,
        "importPath": "src.production.models",
        "description": "src.production.models",
        "peekOfCode": "def upload_location_document(instance, filename):\n    filebase, extension = filename.rsplit('.', 1)\n    file_name = datetime.datetime.now().strftime('%Y%m%d%H%M%S')\n    return 'clients/documents/%s.%s' % (file_name, extension)\nclass Document(models.Model):\n    client = models.ForeignKey(Client, null=True, on_delete=models.RESTRICT)\n    police = models.ForeignKey(Police, null=True, on_delete=models.RESTRICT)\n    aliment = models.ForeignKey(Aliment, null=True, on_delete=models.RESTRICT)\n    type_document = models.ForeignKey(TypeDocument, on_delete=models.RESTRICT)\n    quittance = models.ForeignKey(Quittance, null=True, on_delete=models.RESTRICT)",
        "detail": "src.production.models",
        "documentation": {}
    },
    {
        "label": "upload_location_tarifprestataireclient",
        "kind": 2,
        "importPath": "src.production.models",
        "description": "src.production.models",
        "peekOfCode": "def upload_location_tarifprestataireclient(instance, filename):\n    filebase, extension = filename.rsplit('.', 1)\n    file_name = datetime.datetime.now().strftime('%Y%m%d%H%M%S')\n    return 'clients/tarifs/%s.%s' % (file_name, extension)\nclass TarifPrestataireClient(models.Model):\n    prestataire = models.ForeignKey(Prestataire, on_delete=models.RESTRICT, null=True)\n    client = models.ForeignKey(Client, on_delete=models.RESTRICT, null=True)\n    formule = models.ForeignKey(FormuleGarantie, on_delete=models.RESTRICT, null=True)\n    fichier_tarification = models.FileField(upload_to=upload_location_tarifprestataireclient, blank=True, default=None,\n                                            null=True)",
        "detail": "src.production.models",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "src.production.urls",
        "description": "src.production.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"todo_manuel/\", views.todo_manuel, name='todo_manuel'),\n    path('apporteurs/ajax_apporteurs', views.ajax_apporteurs, name='ajax_apporteurs'),\n    path(\"compagnie/ajax_infos_compagnie/<int:compagnie_id>/<int:produit_id>/\", views.ajax_infos_compagnie, name='ajax_infos_compagnie'),\n    path(\"ajax_produits/<int:branche_id>/\", views.ajax_produits, name='ajax_produits'),\n    path(\"actes_by_rubrique/<int:rubrique_id>/\", views.actes_by_rubrique, name='actes_by_rubrique'),\n    path(\"sous_rubriques_by_rubrique/<int:rubrique_id>/\", views.sous_rubriques_by_rubrique, name='sous_rubriques_by_rubrique'),\n    path(\"regroupements_actes_by_rubrique/<int:rubrique_id>/\", views.regroupements_actes_by_rubrique, name='regroupements_actes_by_rubrique'),\n    path(\"sous_regroupements_actes_by_rubrique/<int:rubrique_id>/\", views.sous_regroupements_actes_by_rubrique, name='sous_regroupements_actes_by_rubrique'),\n    path(\"actes_by_regroupement_acte/<int:regroupement_acte_id>/\", views.actes_by_regroupement_acte, name='actes_by_regroupement_acte'),",
        "detail": "src.production.urls",
        "documentation": {}
    },
    {
        "label": "DetailsClientView",
        "kind": 6,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "class DetailsClientView(TemplateView):\n    permission_required = \"production.view_clients\"\n    template_name = 'client/details_client.html'\n    model = Client\n    def get(self, request, client_id, *args, **kwargs):\n        context_original = self.get_context_data(**kwargs)\n        clients = Client.objects.filter(id=client_id, bureau=request.user.bureau)\n        if clients:\n            client = clients.first()\n            pprint(client.pays.devise)",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "CARTE_SANTE",
        "kind": 6,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "class CARTE_SANTE(FPDF):\n    # marron (167, 79, 51)\n    # jaune (234, 173, 82)\n    start_x = 0\n    start_y = 0\n    def set_origin(self, x, y):\n        self.start_x = x\n        self.start_y = y\n    def set_cadre(self):\n        self.set_draw_color(234, 173, 82)",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "DetailsPoliceView",
        "kind": 6,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "class DetailsPoliceView(TemplateView):\n    template_name = 'police/index.html'\n    model = Police\n    def get(self, request, *args, **kwargs):\n        context_original = self.get_context_data(**kwargs)\n        police_id = kwargs['police_id']\n        polices = Police.objects.filter(id=police_id, bureau=request.user.bureau, statut_validite=StatutValidite.VALIDE)\n        if polices:\n            police = polices.first()\n            #dd(police)",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "DetailsHistoriquePoliceView",
        "kind": 6,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "class DetailsHistoriquePoliceView(TemplateView):\n    template_name = 'police/historique_police_detail.html'\n    model = HistoriquePolice\n    def get(self, request, *args, **kwargs):\n        context_original = self.get_context_data(**kwargs)\n        hist_police_id = kwargs['police_id']\n        hist_polices = HistoriquePolice.objects.filter(id=hist_police_id)\n        if hist_polices:\n            hist_police = hist_polices.first()\n            #dd(police)",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "PoliceQuittancesView",
        "kind": 6,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "class PoliceQuittancesView(TemplateView):\n    template_name = 'police/quittances.html'\n    model = Quittance\n    def get(self, request, police_id, *args, **kwargs):\n        context_original = self.get_context_data(**kwargs)\n        police = Police.objects.get(id=police_id)\n        # Récupération du client\n        client = Client.objects.filter(id=police.client_id).first()\n        quittances = Quittance.objects.filter(police_id=police_id, statut_validite=StatutValidite.VALIDE, import_stats=False)\n        types_quittances = TypeQuittance.objects.all()",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "PoliceAvenantsView",
        "kind": 6,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "class PoliceAvenantsView(TemplateView):\n    template_name = 'police/avenants.html'\n    model = Police\n    def get(self, request, police_id, *args, **kwargs):\n        context_original = self.get_context_data(**kwargs)\n        police = Police.objects.filter(id=police_id, bureau=request.user.bureau, statut_validite=StatutValidite.VALIDE).first()\n        if police:\n            mouvements = Mouvement.objects.filter(type=\"POLICE\").exclude(code=\"AN\").order_by('libelle')\n            mouvements_police = MouvementPolice.objects.filter(police_id=police_id, statut_validite=StatutValidite.VALIDE).order_by('-id') #, statut_validite=StatutValidite.VALIDE\n            # etat police = dernier motif",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "PoliceGedView",
        "kind": 6,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "class PoliceGedView(TemplateView):\n    template_name = 'police/ged.html'\n    model = Police\n    def get(self, request, police_id, *args, **kwargs):\n        context_original = self.get_context_data(**kwargs)\n        police = Police.objects.filter(id=police_id, bureau=request.user.bureau, statut_validite=StatutValidite.VALIDE).first()\n        if police:\n            types_documents = TypeDocument.objects.all().order_by('libelle')\n            documents = Document.objects.filter(police_id=police_id)\n            # etat police = dernier motif",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "PoliceSinistresView",
        "kind": 6,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "class PoliceSinistresView(TemplateView):\n    template_name = 'police/sinistres.html'\n    model = DossierSinistre\n    def get(self, request, police_id, *args, **kwargs):\n        context_original = self.get_context_data(**kwargs)\n        police = Police.objects.filter(id=police_id, bureau=request.user.bureau, statut_validite=StatutValidite.VALIDE).first()\n        if police:\n            prestataires_ids = Sinistre.objects.filter(police_id=police_id, statut_validite=StatutValidite.VALIDE).values_list('prestataire_id', flat=True)\n            prestataires = Prestataire.objects.filter(id__in=prestataires_ids).order_by('name')\n            # etat police = dernier motif",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "PoliceBeneficiairesView",
        "kind": 6,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "class PoliceBeneficiairesView(TemplateView):\n    permission_required = \"production.view_clients\"\n    template_name = 'police/beneficiaires.html'\n    model = Aliment\n    def get(self, request, police_id, aliment_id=None, *args, **kwargs):\n        context_original = self.get_context_data(**kwargs)\n        police = Police.objects.filter(id=police_id, bureau=request.user.bureau, statut_validite=StatutValidite.VALIDE).first()\n        if police:\n            liste_des_formules = [] #FormuleGarantie.objects.filter(police_id=police_id)\n            polices_du_bureau_actif = None #Police.objects.filter(bureau=request.user.bureau, statut_validite=StatutValidite.VALIDE)",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "PoliceTarifsSpecifiquesView",
        "kind": 6,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "class PoliceTarifsSpecifiquesView(TemplateView):\n    template_name = 'police/tarifs_specifiques.html'\n    model = TarifPrestataireClient\n    def get(self, request, police_id, *args, **kwargs):\n        context_original = self.get_context_data(**kwargs)\n        police = Police.objects.get(id=police_id)\n        formules = FormuleGarantie.objects.filter(police_id=police_id).order_by('libelle')\n        prestataires = Prestataire.objects.filter(bureau=request.user.bureau, status=True).order_by('name')\n        tarifs_specifiques = TarifPrestataireClient.objects.filter(client_id=police.client.pk, statut=1)\n        context_perso = {'police': police, 'tarifs_specifiques': tarifs_specifiques, 'formules': formules,",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "PhotosBeneficiairesView",
        "kind": 6,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "class PhotosBeneficiairesView(TemplateView):\n    permission_required = \"production.view_clients\"\n    template_name = 'police/benefs_pictures.html'\n    model = Aliment\n    def get(self, request, police_id, *args, **kwargs):\n        context_original = self.get_context_data(**kwargs)\n        # TODO police_beneficiaires_datatable\n        police = Police.objects.get(id=police_id)\n        #Pour éviter les doublons\n        # Récupérer les IDs des aliments dans aliment_formule",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "ClientsView",
        "kind": 6,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "class ClientsView(TemplateView):\n    permission_required = \"production.view_clients\"\n    template_name = 'client/clients.html'\n    model = Client\n    def get(self, request, *args, **kwargs):\n        context_original = self.get_context_data(**kwargs)\n        types_clients = TypeClient.objects.all().order_by('libelle')\n        types_personnes = TypePersonne.objects.all().order_by('libelle')\n        civilites = Civilite.objects.all().order_by('name')\n        bureaux = Bureau.objects.all().order_by('nom')",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "PoliceClientView",
        "kind": 6,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "class PoliceClientView(TemplateView):\n    permission_required = \"production.view_clients\"\n    template_name = 'client/client_polices.html'\n    model = Client\n    def get(self, request, client_id, *args, **kwargs):\n        context_original = self.get_context_data(**kwargs)\n        clients = Client.objects.filter(id=client_id, bureau=request.user.bureau)\n        if clients:\n            client = clients.first()\n            pprint(client.pays.devise)",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "ContactClientView",
        "kind": 6,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "class ContactClientView(TemplateView):\n    permission_required = \"production.view_clients\"\n    template_name = 'client/client_contacts.html'\n    model = Client\n    def get(self, request, client_id, *args, **kwargs):\n        context_original = self.get_context_data(**kwargs)\n        clients = Client.objects.filter(id=client_id, bureau=request.user.bureau)\n        if clients:\n            client = clients.first()\n            statut_contrat = \"CONTRAT\"",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "FilialeClientView",
        "kind": 6,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "class FilialeClientView(TemplateView):\n    permission_required = \"production.view_clients\"\n    template_name = 'client/client_filiales.html'\n    model = Client\n    def get(self, request, client_id, *args, **kwargs):\n        context_original = self.get_context_data(**kwargs)\n        clients = Client.objects.filter(id=client_id, bureau=request.user.bureau)\n        if clients:\n            client = clients.first()\n            statut_contrat = \"CONTRAT\"",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "AcompteClientView",
        "kind": 6,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "class AcompteClientView(TemplateView):\n    permission_required = \"production.view_clients\"\n    template_name = 'client/client_acomptes.html'\n    model = Client\n    def get(self, request, client_id, *args, **kwargs):\n        context_original = self.get_context_data(**kwargs)\n        clients = Client.objects.filter(id=client_id, bureau=request.user.bureau)\n        if clients:\n            client = clients.first()\n            acomptes = Acompte.objects.filter(client_id=client_id)",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "GEDClientView",
        "kind": 6,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "class GEDClientView(TemplateView):\n    permission_required = \"production.view_clients\"\n    template_name = 'client/client_documents.html'\n    model = Client\n    def get(self, request, client_id, *args, **kwargs):\n        context_original = self.get_context_data(**kwargs)\n        clients = Client.objects.filter(id=client_id, bureau=request.user.bureau)\n        if clients:\n            client = clients.first()\n            pprint(client.pays.devise)",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "ExcelFileView",
        "kind": 6,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "class ExcelFileView(View):\n    def get(self, request, *args, **kwargs):\n        formule = FormuleGarantie.objects.get(id=1)\n        print(formule.tarfile.path)\n        excel_data_df = pd.read_excel(formule.tarfile.path, sheet_name='actes')\n        print(excel_data_df.head())\n        print(excel_data_df)\n        acte_row = excel_data_df.loc[excel_data_df['Code acte'] == 'CH0106']\n        print(acte_row)\n        print(acte_row.empty)",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "FormulesUniversellesView",
        "kind": 6,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "class FormulesUniversellesView(TemplateView):\n    # permission_required = \"production.view_formules\"\n    template_name = 'police/formules_universelles.html'\n    model = FormuleGarantie\n    # @never_cache\n    def get(self, request, *args, **kwargs):\n        context_original = self.get_context_data(**kwargs)\n        # police_id = kwargs['police_id']\n        # police = Police.objects.get(id=police_id)\n        bureau = request.user.bureau",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "FormulesView",
        "kind": 6,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "class FormulesView(TemplateView):\n    # permission_required = \"production.view_formules\"\n    template_name = 'police/formules.html'\n    model = FormuleGarantie\n    # @never_cache\n    def get(self, request, *args, **kwargs):\n        context_original = self.get_context_data(**kwargs)\n        police_id = kwargs['police_id']\n        police = Police.objects.filter(id=police_id, bureau=request.user.bureau, statut_validite=StatutValidite.VALIDE).first()\n        if police:",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "DetailsFormuleView",
        "kind": 6,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "class DetailsFormuleView(PermissionRequiredMixin, TemplateView):\n    permission_required = \"production.view_formulegarantie\"\n    template_name = 'police/details_formule.html'\n    model = Bareme\n    @method_decorator(never_cache)\n    def get(self, request, *args, **kwargs):\n        context_original = self.get_context_data(**kwargs)\n        formule_id = kwargs['formule_id']\n        pprint(formule_id)\n        formule = FormuleGarantie.objects.get(id=formule_id)",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "ProspectsGrhView",
        "kind": 6,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "class ProspectsGrhView(TemplateView):\n    template_name = 'grh/liste_prospect.html'\n    model = Prospect\n    def get(self, request, *args, **kwargs):\n        context_original = self.get_context_data(**kwargs)\n        # Get police IDs based on the user's bureau and mouvement status\n        police_ids = MouvementAliment.objects.filter(\n            statut_traitement=StatutTraitement.NON_TRAITE,\n            police__bureau=request.user.bureau\n        ).values_list('police_id', flat=True)",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "AnnulerQuittanceView",
        "kind": 6,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "class AnnulerQuittanceView(TemplateView):\n    template_name = 'police/annuler_quittance.html'\n    model = Quittance\n    # traitement à l'appel du lien en get\n    def get(self, request, *args, **kwargs):\n        context = self.get_context_data(**kwargs)\n        context['breadcrumbs'] = [\n            {'title': 'Factures', 'url': ''},\n            {'title': 'Annulation', 'url': ''},\n        ]",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "supprimer_espaces",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def supprimer_espaces(chaine):\n    return ''.join(str(chaine).split())\ndef convertir_date(date_str):\n    \"\"\"\n    Convertit une date au format JJ/MM/AAAA en objet datetime.date.\n    \"\"\"\n    if date_str:\n        try:\n            return datetime.strptime(date_str, \"%d/%m/%Y\").date()\n        except ValueError:",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "convertir_date",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def convertir_date(date_str):\n    \"\"\"\n    Convertit une date au format JJ/MM/AAAA en objet datetime.date.\n    \"\"\"\n    if date_str:\n        try:\n            return datetime.strptime(date_str, \"%d/%m/%Y\").date()\n        except ValueError:\n            raise ValueError(f\"Format de date incorrect : {date_str}\")\n    return None",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "is_in_group",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def is_in_group(user, groupe_name):\n    return user.groups.filter(name=groupe_name).exists()\ndef is_in_commercial(user):\n    return user.groups.filter(name='COMMERCIAL').exists()\ndef is_in_production(user):\n    return user.groups.filter(name='PRODUCTION').exists()\ndef todo_manuel(request):\n    # IMPORT ADHERENT PRINCIPAUX\n    # IMPORT ADHERENT PRINCIPAUX\n    adherents_principaux = Aliment.objects.filter(adherent_principal__isnull=True)",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "is_in_commercial",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def is_in_commercial(user):\n    return user.groups.filter(name='COMMERCIAL').exists()\ndef is_in_production(user):\n    return user.groups.filter(name='PRODUCTION').exists()\ndef todo_manuel(request):\n    # IMPORT ADHERENT PRINCIPAUX\n    # IMPORT ADHERENT PRINCIPAUX\n    adherents_principaux = Aliment.objects.filter(adherent_principal__isnull=True)\n    for a in adherents_principaux:\n        adp = Aliment.objects.filter(",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "is_in_production",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def is_in_production(user):\n    return user.groups.filter(name='PRODUCTION').exists()\ndef todo_manuel(request):\n    # IMPORT ADHERENT PRINCIPAUX\n    # IMPORT ADHERENT PRINCIPAUX\n    adherents_principaux = Aliment.objects.filter(adherent_principal__isnull=True)\n    for a in adherents_principaux:\n        adp = Aliment.objects.filter(\n            veos_code_aliment=a.veos_adherent_principal).first()  # Utilisez .first() pour obtenir le premier résultat\n        if adp:",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "todo_manuel",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def todo_manuel(request):\n    # IMPORT ADHERENT PRINCIPAUX\n    # IMPORT ADHERENT PRINCIPAUX\n    adherents_principaux = Aliment.objects.filter(adherent_principal__isnull=True)\n    for a in adherents_principaux:\n        adp = Aliment.objects.filter(\n            veos_code_aliment=a.veos_adherent_principal).first()  # Utilisez .first() pour obtenir le premier résultat\n        if adp:\n            aliment = Aliment.objects.get(id=a.id)\n            aliment.adherent_principal = adp",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "add_contact",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def add_contact(request, client_id):\n    if request.method == \"POST\":\n        form = ContactForm(request.POST)\n        if form.is_valid():\n            client_id = request.POST.get('client_id')\n            contact = form.save(commit=False)\n            contact.client = Client.objects.get(id=client_id)\n            contact.save()\n            response = {\n                'statut': 1,",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "modifier_contact",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def modifier_contact(request, contact_id):\n    contact = Contact.objects.get(id=contact_id)\n    if request.method == 'POST':\n        form = ContactForm(request.POST, instance=contact)\n        if form.is_valid():\n            form.save()\n            response = {\n                'statut': 1,\n                'message': \"Modification effectuée avec succès !\",\n                'data': {",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "supprimer_contact",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def supprimer_contact(request):\n    if request.method == \"POST\":\n        contact_id = request.POST.get('contact_id')\n        contact = Contact.objects.get(id=contact_id)\n        if contact.pk is not None:\n            contact.delete()\n            response = {\n                'statut': 1,\n                'message': \"Contact supprimé avec succès !\",\n            }",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "add_filiale",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def add_filiale(request, client_id):\n    if request.method == \"POST\":\n        form = FilialeForm(request.POST)\n        if form.is_valid():\n            client_id = request.POST.get('client_id')\n            filiale = form.save(commit=False)\n            filiale.client = Client.objects.get(id=client_id)\n            filiale.save()\n            response = {\n                'statut': 1,",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "modifier_filiale",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def modifier_filiale(request, filiale_id):\n    filiale = Filiale.objects.get(id=filiale_id)\n    if request.method == 'POST':\n        form = FilialeForm(request.POST, instance=filiale)\n        if form.is_valid():\n            form.save()\n            response = {\n                'statut': 1,\n                'message': \"Modification effectuée avec succès !\",\n                'data': {",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "supprimer_filiale",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def supprimer_filiale(request):\n    if request.method == \"POST\":\n        filiale_id = request.POST.get('filiale_id')\n        filiale = Filiale.objects.get(id=filiale_id)\n        if filiale.pk is not None:\n            filiale.delete()\n            response = {\n                'statut': 1,\n                'message': \"Filiale supprimée avec succès !\",\n            }",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "add_document",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def add_document(request, client_id):\n    if request.method == \"POST\":\n        form = DocumentForm(request.POST, request.FILES)\n        if form.is_valid():\n            client = Client.objects.get(id=client_id)\n            type_document_id = request.POST.get('type_document')\n            #   type_document = get_object_or_404(TypeDocument, id=request.POST.get('type_document'))\n            # Use the ORM to create and update the Document instance\n            document = form.save(commit=False)\n            document.client = client",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "handle_uploaded_document",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def handle_uploaded_document(f, filename):\n    path_ot_db = '/clients/documents/'\n    dirname = settings.MEDIA_URL.replace('/', '') + path_ot_db\n    path = os.path.join(dirname)\n    if not os.path.exists(path):\n        os.makedirs(path)\n    with open(dirname + '/' + filename, 'wb+') as destination:\n        for chunk in f.chunks():\n            destination.write(chunk)\n    return path_ot_db + '/' + filename",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "modifier_document",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def modifier_document(request, document_id):\n    document = Document.objects.get(id=document_id)\n    if request.method == 'POST':\n        form = DocumentForm(request.POST, request.FILES, instance=document)\n        if form.is_valid():\n            document_update = form.save(commit=False)\n            document_update.save()\n            #fichier = request.FILES['fichier']\n            #filename_old = document.fichier.url\n            #filename = \"doc_\" + str(uuid.uuid4()) + \"_\" + fichier.name",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "supprimer_document",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def supprimer_document(request):\n    if request.method == \"POST\":\n        document_id = request.POST.get('document_id')\n        document = Document.objects.get(id=document_id)\n        if document.pk is not None:\n            document.delete()\n            response = {\n                'statut': 1,\n                'message': \"Document supprimé avec succès !\",\n            }",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "add_acompte",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def add_acompte(request, client_id):\n    errors = {}\n    if request.method == \"POST\":\n        montant = request.POST.get('montant')\n        date_versement = request.POST.get('date_versement')\n        if not montant:\n            response = {\n                'statut': 0,\n                'message': \"Veuillez renseigner correctement le formulaire\",\n                'errors': errors",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "modifier_acompte",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def modifier_acompte(request, acompte_id):\n    acompte = Acompte.objects.get(id=acompte_id)\n    if request.method == 'POST':\n        form = AcompteForm(request.POST, instance=acompte)\n        if form.is_valid():\n            form.save()\n            response = {\n                'statut': 1,\n                'message': \"Modification effectuée avec succès !\",\n                'data': {",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "supprimer_acompte",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def supprimer_acompte(request):\n    if request.method == \"POST\":\n        acompte_id = request.POST.get('acompte_id')\n        acompte = Acompte.objects.get(id=acompte_id)\n        if acompte.pk is not None:\n            acompte.delete()\n            response = {\n                'statut': 1,\n                'message': \"Acompte supprimé avec succès !\",\n            }",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "add_police",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def add_police(request, client_id):\n    taxes = request.COOKIES.get('taxes')\n    aliments = request.session.get('aliments', [])\n    client = Client.objects.get(id=client_id)\n    if request.method == 'POST':\n        form = PoliceForm(request.POST)\n        if form.is_valid():\n            produit = Produit.objects.get(id=request.POST.get('produit'))\n            compagnie = Compagnie.objects.get(id=request.POST.get('compagnie'))\n            numero = request.POST.get('numero')",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "modifier_police",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def modifier_police(request, police_id):\n    if request.method == 'POST':\n        produit = Produit.objects.get(id=request.POST.get('produit'))\n        branche = produit.branche\n        compagnie = Compagnie.objects.get(id=request.POST.get('compagnie'))\n        numero = request.POST.get('numero')\n        apporteur = request.POST.get('apporteur')\n        programme_international = request.POST.get('programme_international')\n        placement_gestion = request.POST.get('placement_gestion')\n        date_debut_effet = request.POST.get('date_debut_effet')",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "list_polices",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def list_polices(request, client_id):\n    # request.session['client_id_for_new_police'] = client_id\n    return redirect('/production/clien/?client__id__exact=' + str(client_id))\n# Importer des aliments via le fichier excel\n@login_required\n@csrf_exempt\ndef _import_excel_aliments_(request):\n    if request.method == \"POST\":\n        fichier = request.FILES.get(\"fichier_aliment\")\n        if not fichier:",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "import_excel_aliments",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def import_excel_aliments(request):\n    from django.core.serializers import serialize\n    if request.method == \"POST\":\n        fichier = request.FILES.get(\"fichier_aliment\")\n        if not fichier:\n            return JsonResponse({'success': False, 'message': \"Aucun fichier joint.\"}, status=400)\n        # Lire le fichier Excel\n        try:\n            data = pd.read_excel(fichier)\n            # Ignorer la première ligne (si elle est un en-tête supplémentaire)",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "import_formulaire_aliments",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def import_formulaire_aliments(request):\n    if request.method == 'POST':\n        try:\n            # Vérification de l'immatriculation\n            immat = request.POST.get('immatriculation')\n            if not immat:\n                return JsonResponse({'success': False, 'message': 'Immatriculation manquante.'}, status=400)\n            # Charger les immatriculations existantes de la session\n            aliments_existant = request.session.get('aliments', [])\n            immatriculations_existes = [alim['immat'] for alim in aliments_existant]",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "supprimer_aliment",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def supprimer_aliment(request, index):\n    if request.method == 'POST':\n        try:\n            # Supposons que vous stockez les aliments en session\n            aliments = request.session.get('aliments', [])\n            if 0 <= index < len(aliments):\n                aliments.pop(index)  # Supprimer l'aliment de la session\n                request.session['aliments'] = aliments  # Mettre à jour la session\n                return JsonResponse({'success': True, 'message': 'Aliment supprimé.'})\n            return JsonResponse({'success': False, 'error': 'Index invalide.'}, status=400)",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "clear_session",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def clear_session(request):\n    if request.method == 'POST':\n        aliments = request.session.get('aliments', None)\n        if 'aliments' in request.session:\n            del request.session['aliments']\n        return JsonResponse({'success': True, 'data': aliments}, status=200)\n    return JsonResponse({'success': False, 'error': 'Méthode non autorisée.'}, status=405)\n#Chargement des garanties de la branche liée au produit\ndef get_garanties_by_produit(request):\n    branche_id = request.GET.get('produit_id')",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "get_garanties_by_produit",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def get_garanties_by_produit(request):\n    branche_id = request.GET.get('produit_id')\n    garanties = GarantieBranche.objects.filter(branche_id=branche_id).values('garantie__id', 'garantie__nom')\n    garanties = [{'id': g['garantie__id'], 'nom': g['garantie__nom']} for g in garanties]\n    return JsonResponse({'garanties': list(garanties)})\n#Chargement des garanties de la formule\ndef get_garanties_by_formule(request):\n    formule_id = request.GET.get('formule_id')\n    garanties = GarantieFormule.objects.filter(formule_id=formule_id).values('garantie__id', 'garantie__nom')\n    garanties = [{'id': g['garantie__id'], 'nom': g['garantie__nom']} for g in garanties]",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "get_garanties_by_formule",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def get_garanties_by_formule(request):\n    formule_id = request.GET.get('formule_id')\n    garanties = GarantieFormule.objects.filter(formule_id=formule_id).values('garantie__id', 'garantie__nom')\n    garanties = [{'id': g['garantie__id'], 'nom': g['garantie__nom']} for g in garanties]\n    return JsonResponse({'garanties': list(garanties)})\n@login_required\ndef add_carte(request, aliment_id):\n    aliment = Aliment.objects.get(id=aliment_id)\n    if request.method == 'POST':\n        # générer le pdf",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "add_carte",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def add_carte(request, aliment_id):\n    aliment = Aliment.objects.get(id=aliment_id)\n    if request.method == 'POST':\n        # générer le pdf\n        response = {\n            'statut': 1,\n            'message': \"Carte enregistrée avec succès !\",\n            'data': {\n            }\n        }",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "editer_cartes",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def editer_cartes(request, police_id):\n    return render(request, 'admin/form_edition_cartes.html')\n# IMPRESSION DE LA CARTE\nclass CARTE_SANTE(FPDF):\n    # marron (167, 79, 51)\n    # jaune (234, 173, 82)\n    start_x = 0\n    start_y = 0\n    def set_origin(self, x, y):\n        self.start_x = x",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "html_to_pdf",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def html_to_pdf(template_src, context_dict={}):\n    template = get_template(template_src)\n    html = template.render(context_dict)\n    result = BytesIO()\n    pdf = pisa.pisaDocument(BytesIO(html.encode(\"ISO-8859-1\")), result)\n    if not pdf.err:\n        return HttpResponse(result.getvalue(), content_type='application/pdf')\n    return None\n@login_required\ndef imprimer_carte(request, police_id, aliment_id):",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "imprimer_carte",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def imprimer_carte(request, police_id, aliment_id):\n    # selectionner la carte active de l'aliment pour l'imprimer\n    police = Police.objects.get(id=police_id)\n    cartes = Carte.objects.filter(aliment_id=aliment_id, statut=Statut.ACTIF).order_by('-id')\n    aliment = Aliment.objects.get(id=aliment_id)\n    date_du_jour_gmt_ = datetime.datetime.now(tz=datetime.timezone.utc).date()\n    formulegarantie = aliment.formule_atdate(date_du_jour_gmt_)\n    pprint(formulegarantie)\n    pprint(cartes)\n    if cartes:",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "imprimer_cartes",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def imprimer_cartes(request, police_id):\n    # selectionner la carte active des aliments de la police pour les imprimer\n    if request.method == \"POST\":\n        parametre_impression = request.POST.get('parametre_impression')\n        numero_debut = int(\"0\" + request.POST.get('numero_debut').replace(\" \",\"\"))\n        numero_fin = int(\"0\" + request.POST.get('numero_fin').replace(\" \",\"\"))\n        pprint(numero_debut)\n        pprint(numero_fin)\n        police = Police.objects.get(id=police_id)\n        # Recuperation des beneficiaires",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "imprimer_cartes_new",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def imprimer_cartes_new(request, police_id):\n    # selectionner la carte active des aliments de la police pour les imprimer\n    if request.method == \"POST\":\n        parametre_impression = request.POST.get('parametre_impression')\n        numero_debut = int(\"0\" + request.POST.get('numero_debut').replace(\" \",\"\"))\n        numero_fin = int(\"0\" + request.POST.get('numero_fin').replace(\" \",\"\"))\n        pprint(numero_debut)\n        pprint(numero_fin)\n        police = Police.objects.get(id=police_id)\n        # Pour éviter les doublons",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "download",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def download(request, filename):\n    file_path = os.path.join(settings.MEDIA_ROOT, \"cartes/\" + filename)\n    # file_path = os.path.join(filename)\n    response = FileResponse(open(file_path, 'rb'))\n    return response\ndef dateFromDB(date_naissance):\n    formated_date = None\n    if date_naissance:\n        date = datetime.datetime.strptime(str(date_naissance), \"%Y-%m-%d\")\n        if date.day > 1:",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "dateFromDB",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def dateFromDB(date_naissance):\n    formated_date = None\n    if date_naissance:\n        date = datetime.datetime.strptime(str(date_naissance), \"%Y-%m-%d\")\n        if date.day > 1:\n            jour = str(date.day)\n        else:\n            jour = \"0\" + str(date.day)\n        if date.month > 1:\n            mois = str(date.month)",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "adherents",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def adherents(request, police_id):\n    adherents = Aliment.objects.select_related(\"formule\").all()\n    return render(request, 'admin/liste_adherents.html', {'adherents': adherents})\n@login_required\ndef ajax_apporteurs(request):\n    apporteurs = Apporteur.objects.filter(status=True)\n    apporteurs_serialize = serializers.serialize('json', apporteurs)\n    return HttpResponse(apporteurs_serialize, content_type='application/json')\n@login_required\ndef ajax_produits(request, branche_id):",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "ajax_apporteurs",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def ajax_apporteurs(request):\n    apporteurs = Apporteur.objects.filter(status=True)\n    apporteurs_serialize = serializers.serialize('json', apporteurs)\n    return HttpResponse(apporteurs_serialize, content_type='application/json')\n@login_required\ndef ajax_produits(request, branche_id):\n    produits = Produit.objects.filter(branche_id=branche_id)\n    produits_serialize = serializers.serialize('json', produits)\n    return HttpResponse(produits_serialize, content_type='application/json')\n@login_required",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "ajax_produits",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def ajax_produits(request, branche_id):\n    produits = Produit.objects.filter(branche_id=branche_id)\n    produits_serialize = serializers.serialize('json', produits)\n    return HttpResponse(produits_serialize, content_type='application/json')\n@login_required\ndef sous_rubriques_by_rubrique(request, rubrique_id):\n    actes = SousRubrique.objects.filter(rubrique_id=rubrique_id, status=1).order_by('libelle')\n    actes_serialize = serializers.serialize('json', actes)\n    return HttpResponse(actes_serialize, content_type='application/json')\n@login_required",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "sous_rubriques_by_rubrique",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def sous_rubriques_by_rubrique(request, rubrique_id):\n    actes = SousRubrique.objects.filter(rubrique_id=rubrique_id, status=1).order_by('libelle')\n    actes_serialize = serializers.serialize('json', actes)\n    return HttpResponse(actes_serialize, content_type='application/json')\n@login_required\ndef regroupements_actes_by_rubrique(request, rubrique_id):\n    actes = RegroupementActe.objects.filter(rubrique_id=rubrique_id, status=1).order_by('libelle')\n    actes_serialize = serializers.serialize('json', actes)\n    return HttpResponse(actes_serialize, content_type='application/json')\n@login_required",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "regroupements_actes_by_rubrique",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def regroupements_actes_by_rubrique(request, rubrique_id):\n    actes = RegroupementActe.objects.filter(rubrique_id=rubrique_id, status=1).order_by('libelle')\n    actes_serialize = serializers.serialize('json', actes)\n    return HttpResponse(actes_serialize, content_type='application/json')\n@login_required\ndef sous_regroupements_actes_by_rubrique(request, rubrique_id):\n    data = SousRegroupementActe.objects.filter(rubrique_id=rubrique_id, status=1).order_by('libelle')\n    data_serialize = serializers.serialize('json', data)\n    return HttpResponse(data_serialize, content_type='application/json')\n@login_required",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "sous_regroupements_actes_by_rubrique",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def sous_regroupements_actes_by_rubrique(request, rubrique_id):\n    data = SousRegroupementActe.objects.filter(rubrique_id=rubrique_id, status=1).order_by('libelle')\n    data_serialize = serializers.serialize('json', data)\n    return HttpResponse(data_serialize, content_type='application/json')\n@login_required\ndef actes_by_rubrique(request, rubrique_id):\n    rubrique = Rubrique.objects.get(id=rubrique_id)\n    if rubrique.code != 'PHARMACIE':\n        actes = Acte.objects.filter(rubrique_id=rubrique_id, status=1).order_by('libelle')\n    else:",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "actes_by_rubrique",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def actes_by_rubrique(request, rubrique_id):\n    rubrique = Rubrique.objects.get(id=rubrique_id)\n    if rubrique.code != 'PHARMACIE':\n        actes = Acte.objects.filter(rubrique_id=rubrique_id, status=1).order_by('libelle')\n    else:\n        actes = []\n    actes_serialize = serializers.serialize('json', actes)\n    return HttpResponse(actes_serialize, content_type='application/json')\n@login_required\ndef actes_by_regroupement_acte(request, regroupement_acte_id):",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "actes_by_regroupement_acte",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def actes_by_regroupement_acte(request, regroupement_acte_id):\n    regroupement_acte = RegroupementActe.objects.get(id=regroupement_acte_id)\n    if regroupement_acte and regroupement_acte.rubrique.code != 'PHARMACIE':\n        actes = Acte.objects.filter(regroupement_acte_id=regroupement_acte_id, status=1).order_by('libelle')\n    else:\n        actes = []\n    actes_serialize = serializers.serialize('json', actes)\n    return HttpResponse(actes_serialize, content_type='application/json')\n@login_required\ndef formules_by_police(request, police_id):",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "formules_by_police",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def formules_by_police(request, police_id):\n    formules = FormuleGarantie.objects.filter(police_id=police_id, statut=Statut.ACTIF)\n    formules_serialize = serializers.serialize('json', formules)\n    return HttpResponse(formules_serialize, content_type='application/json')\n@login_required\ndef polices_restantes(request, police_id):\n    police = Police.objects.get(id=police_id)\n    polices_restantes = Police.objects.filter(client_id=police.client_id, statut_validite=StatutValidite.VALIDE).exclude(id=police_id)\n    polices_restantes = [x for x in polices_restantes if x.etat_police==\"En cours\" ]\n    polices_restantes_serialize = serializers.serialize('json', polices_restantes)",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "polices_restantes",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def polices_restantes(request, police_id):\n    police = Police.objects.get(id=police_id)\n    polices_restantes = Police.objects.filter(client_id=police.client_id, statut_validite=StatutValidite.VALIDE).exclude(id=police_id)\n    polices_restantes = [x for x in polices_restantes if x.etat_police==\"En cours\" ]\n    polices_restantes_serialize = serializers.serialize('json', polices_restantes)\n    return HttpResponse(polices_restantes_serialize, content_type='application/json')\n@login_required\n# récupère le taux paramétré sur le produit en fonction de la compagnie\ndef ajax_infos_compagnie(request, compagnie_id, produit_id):\n    param_produit_compagnie = ParamProduitCompagnie.objects.filter(compagnie_id=compagnie_id,",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "ajax_infos_compagnie",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def ajax_infos_compagnie(request, compagnie_id, produit_id):\n    param_produit_compagnie = ParamProduitCompagnie.objects.filter(compagnie_id=compagnie_id,\n                                                                   produit_id=produit_id).first()\n    print(param_produit_compagnie)\n    if (param_produit_compagnie is not None):\n        response = {\n            'id': param_produit_compagnie.compagnie.id,\n            'code': param_produit_compagnie.compagnie.code,\n            'nom': param_produit_compagnie.compagnie.nom,\n            'taux_com_courtage': param_produit_compagnie.taux_com_courtage,",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "motifs_by_mouvement",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def motifs_by_mouvement(request, mouvement_id):\n    motifs = Motif.objects.filter(mouvement_id=mouvement_id)\n    motifs_serialize = serializers.serialize('json', motifs)\n    return HttpResponse(motifs_serialize, content_type='application/json')\n# détails d'une police, du bureau de l'utisateur\n@method_decorator(login_required, name='dispatch')\nclass DetailsPoliceView(TemplateView):\n    template_name = 'police/index.html'\n    model = Police\n    def get(self, request, *args, **kwargs):",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "add_document_to_quittance",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def add_document_to_quittance(request, quittance_id, police_id):\n    if request.method == \"POST\":\n        form = DocumentForm(request.POST, request.FILES)\n        if form.is_valid():\n            police = get_object_or_404(Police, id=police_id)\n            quittance = get_object_or_404(Quittance, id=quittance_id)\n            type_document_id = request.POST.get('type_document')\n            document = form.save(commit=False)\n            document.police = police\n            document.quittance = quittance",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "details_quittance",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def details_quittance(request, quittance_id):\n    quittance = Quittance.objects.get(id=quittance_id)\n    police = quittance.police\n    natures_quittances = NatureQuittance.objects.all().order_by('libelle')\n    types_quittances = TypeQuittance.objects.all().order_by('libelle')\n    types_documents = TypeDocument.objects.all().order_by('libelle')\n    taxes_quittances = TaxeQuittance.objects.filter(quittance_id=quittance_id)\n    reglements = Reglement.objects.filter(quittance_id=quittance_id, statut_validite=StatutValidite.VALIDE)\n    documents = Document.objects.filter(quittance_id=quittance)\n    # reglements = Quittance.objects.all()",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "add_quittance",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def add_quittance(request, police_id):\n    police = Police.objects.get(id=police_id)\n    error = False\n    error_message = \"\"\n    if request.method == 'POST':\n        commission_intermediaires = request.POST.get('commission_intermediaire').replace(' ', '')\n        nature_quittance_id = request.POST.get('nature_quittance')\n        type_quittance_id = request.POST.get('type_quittance')\n        prime_ht = request.POST.get('prime_ht').replace(' ', '')\n        cout_police_courtier = request.POST.get('cout_police_courtier').replace(' ', '')",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "add_reglement",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def add_reglement(request, police_id):\n    if request.method == 'POST':\n        uuid_reglement = request.POST.get('uuid_reglement')\n        devise_id = request.POST.get('devise')\n        # banque_id = request.POST.get('banque')\n        banque_emettrice = request.POST.get('banque')\n        compte_tresorerie_id = request.POST.get('compte_tresorerie')\n        numero_piece = request.POST.get('numero_piece')\n        nature_operation = request.POST.get('nature_operation')\n        mode_reglement = request.POST.get('mode_reglement')",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "police_add_document",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def police_add_document(request, police_id):\n    if request.method == \"POST\":\n        form = DocumentForm(request.POST, request.FILES)\n        if form.is_valid():\n            police = Police.objects.get(id=police_id)\n            type_document_id = request.POST.get('type_document')\n            document = form.save(commit=False)\n            document.client = police.client\n            document.police = police\n            document.type_document = TypeDocument.objects.get(id=type_document_id)",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "aliment_add_document",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def aliment_add_document(request, aliment_id):\n    if request.method == \"POST\":\n        form = DocumentForm(request.POST, request.FILES)\n        if form.is_valid():\n            aliment = Aliment.objects.get(id=aliment_id)\n            type_document_id = request.POST.get('type_document')\n            document = form.save(commit=False)\n            document.aliment = aliment\n            document.type_document = TypeDocument.objects.get(id=type_document_id)\n            document.save()",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "police_sinistres_datatable",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def police_sinistres_datatable(request, police_id):\n    items_per_page = 10\n    page_number = request.GET.get('page')\n    start = int(request.GET.get('start', 0))\n    length = int(request.GET.get('length', items_per_page))\n    sort_column_index = int(request.GET.get('order[0][column]'))\n    sort_direction = request.GET.get('order[0][dir]')\n    search_numero_assure = request.GET.get('num_assure', '')\n    search_numero_sinistre = request.GET.get('num_sinistre', '')\n    search_numero_dossier_sinistre = request.GET.get('num_feuille_soins', '')",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "get_formules",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def get_formules(request, police_id):\n    # Récupérez les formules associées à la police_id (ajustez selon votre modèle)\n    formules = FormuleGarantie.objects.filter(police_id=police_id).values('code', 'libelle')\n    # Convertissez les résultats en un format JSON approprié\n    formules_list = [{'code': formule['code'], 'libelle': formule['libelle']} for formule in formules]\n    return JsonResponse({'formules': formules_list})\ndef police_beneficiaires_datatable(request, police_id):\n    items_per_page = 10\n    page_number = request.GET.get('page')\n    start = int(request.GET.get('start', 0))",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "police_beneficiaires_datatable",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def police_beneficiaires_datatable(request, police_id):\n    items_per_page = 10\n    page_number = request.GET.get('page')\n    start = int(request.GET.get('start', 0))\n    length = int(request.GET.get('length', items_per_page))\n    sort_column_index = request.GET.get('order[0][column]')\n    sort_direction = request.GET.get('order[0][dir]')\n    search_value = request.GET.get('search[value]')\n    search_etat = request.GET.get('search_etat', '')\n    # draw = int(request.GET.get('draw', 1))",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "transfert_beneficiaires_datatable",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def transfert_beneficiaires_datatable(request, client_id):\n    items_per_page = 10\n    page_number = request.GET.get('page')\n    start = int(request.GET.get('start', 0))\n    length = int(request.GET.get('length', items_per_page))\n    sort_column_index = request.GET.get('order[0][column]')\n    sort_direction = request.GET.get('order[0][dir]')\n    search_value = request.GET.get('search[value]')\n    # draw = int(request.GET.get('draw', 1))\n    search_police_origine = request.GET.get('search_police_origine', 0)",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "transfert_beneficiaires",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def transfert_beneficiaires(request, client_id):\n    rstatut = 0\n    rmessage = \"\"\n    rerrors = {}\n    try:\n        if request.method == 'POST':\n            client = Client.objects.get(id=client_id)\n            if client.bureau == request.user.bureau:\n                police_origine_id = request.POST.get('police_origine_id')\n                formule_origine_id = request.POST.get('formule_origine_id')",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "police_beneficiaires",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def police_beneficiaires(request, police_id):\n    return render(request, 'police/beneficiaires.html', )\ndef getAliments(police_id):\n    aliments = []\n    police = Police.objects.filter(pk=police_id, statut_validite=StatutValidite.VALIDE)\n    for formule in police.formules:\n        aliment_formule = AlimentFormule.objects.filter(formule_id=formule.id, statut=Statut.ACTIF).order_by('-id')\n        for af in aliment_formule:\n            if af.aliment not in aliments:\n                aliments.append(af.aliment)",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "getAliments",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def getAliments(police_id):\n    aliments = []\n    police = Police.objects.filter(pk=police_id, statut_validite=StatutValidite.VALIDE)\n    for formule in police.formules:\n        aliment_formule = AlimentFormule.objects.filter(formule_id=formule.id, statut=Statut.ACTIF).order_by('-id')\n        for af in aliment_formule:\n            if af.aliment not in aliments:\n                aliments.append(af.aliment)\n    return aliments\ndef getAdherentsPrincipaux(police_id):",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "getAdherentsPrincipaux",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def getAdherentsPrincipaux(police_id):\n    aliments = []\n    police = Police.objects.get(id=police_id)\n    for formule in police.formules:\n        aliment_formule = AlimentFormule.objects.filter(formule_id=formule.id, statut=Statut.ACTIF, statut_validite=StatutValidite.VALIDE).order_by('-id')\n        for af in aliment_formule:\n            if af.aliment.statut == Statut.ACTIF and af.aliment.qualite_beneficiaire and af.aliment.qualite_beneficiaire.code == \"AD\":\n                if af.aliment not in aliments:\n                    aliments.append(af.aliment)\n    return aliments",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "check_pandas_value",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def check_pandas_value(value):\n    return value if pd.notna(value) else None\ndef check_pandas_date_value(value):\n    return pd.to_datetime(value) if pd.notna(value) else None\n@transaction.atomic\ndef importation_beneficiaire_from_ancienne_police(request, police_id):\n    # Date et l'heure actuelles\n    date_daujourdhui = datetime.now()\n    rstatut = 0\n    rmessage = \"\"",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "check_pandas_date_value",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def check_pandas_date_value(value):\n    return pd.to_datetime(value) if pd.notna(value) else None\n@transaction.atomic\ndef importation_beneficiaire_from_ancienne_police(request, police_id):\n    # Date et l'heure actuelles\n    date_daujourdhui = datetime.now()\n    rstatut = 0\n    rmessage = \"\"\n    rerrors = {}\n    try:",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "importation_beneficiaire_from_ancienne_police",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def importation_beneficiaire_from_ancienne_police(request, police_id):\n    # Date et l'heure actuelles\n    date_daujourdhui = datetime.now()\n    rstatut = 0\n    rmessage = \"\"\n    rerrors = {}\n    try:\n        if request.method == 'POST':\n            formule_sortante_code = request.POST.get('formule_sortante_code')\n            nouvelle_formule_code = request.POST.get('nouvelle_formule_code')",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "changement_compagnie",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def changement_compagnie(request, client_id):\n    #dd(\"Désactivé pour l'instant\")\n    rstatut = 0\n    rmessage = \"\"\n    rerrors = {}\n    try:\n        if request.method == 'POST':\n            ancienne_police_id = request.POST.get('ancienne_police')\n            nouvelle_police_id = request.POST.get('nouvelle_police')\n            ancienne_police = Police.objects.filter(id=ancienne_police_id, statut_validite=StatutValidite.VALIDE).first()",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "verifier_beneficiaires",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def verifier_beneficiaires(request, police_id):\n    if request.method == 'POST' and request.FILES['fichier']:\n        police = Police.objects.get(id=police_id)\n        print(\"Police\")\n        pprint(police)\n        try:\n            fichier = request.FILES['fichier']\n        except MultiValueDictKeyError:\n            fichier = False\n        try:",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "import_beneficiaires",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def import_beneficiaires(request, police_id):\n    if request.method == 'POST' and request.FILES['fichier']:\n        police = Police.objects.get(id=police_id)\n        print(\"Police\")\n        pprint(police)\n        try:\n            fichier = request.FILES['fichier']\n        except MultiValueDictKeyError:\n            fichier = False\n        try:",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "serialize_sets",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def serialize_sets(obj):\n    if isinstance(obj, set):\n        return list(obj)\n    return obj\n# json_str = json.dumps(set([1,2,3]), default=serialize_sets)\n# ajout de bénéficiaire\n@transaction.atomic  # open a transaction\ndef add_beneficiaire(request, police_id):\n    police = Police.objects.get(id=police_id)\n    file_upload_path = ''",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "add_beneficiaire",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def add_beneficiaire(request, police_id):\n    police = Police.objects.get(id=police_id)\n    file_upload_path = ''\n    if request.method == 'POST':\n        # upload de la photo\n        if 'photo' in request.FILES:\n            try:\n                photo = request.FILES['photo']\n                fs = FileSystemStorage()\n                filebase, extension = photo.name.rsplit('.', 1)",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "police_vehicules",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def police_vehicules(request, police_id):\n    police = Police.objects.get(id=police_id)\n    vehicules = AlimentPolice.objects.filter(police_id=police.id)\n    catgories = CategorieVehicule.objects.all().order_by('libelle')\n    carburants = Carburant.objects.all().order_by('libelle')\n    usages = Usage.objects.all().order_by('libelle')\n    carosseries = Carosserie.objects.all().order_by('libelle')\n    formules = Formule.objects.filter(status=True).order_by('libelle')\n    pprint(vehicules)\n    return render(request, 'police/vehicules.html',",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "add_vehicule",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def add_vehicule(request, police_id):\n    police = Police.objects.get(id=police_id)\n    if request.method == 'POST':\n        immatriculation = request.POST.get('immatriculation')\n        date_entree = request.POST.get('date_entree')\n        date_sortie = request.POST.get('date_sortie')\n        mis_en_circulation = request.POST.get('date_mise_circulation')\n        immatriculation_existante = Vehicule.objects.filter(numero_immatriculation=immatriculation).first()\n        date_entree_conversion = datetime.strptime(date_entree, '%Y-%m-%d').date()\n        if date_sortie:",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "update_vehicule",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def update_vehicule(request, police_id, vehicule_id):\n    police = Police.objects.get(id=police_id)\n    vehicule = Vehicule.objects.get(id=vehicule_id)\n    alimentpolice = AlimentPolice.objects.filter(vehicule_id=vehicule.id)\n    catgories = CategorieVehicule.objects.all().order_by('libelle')\n    carburants = Carburant.objects.all().order_by('libelle')\n    usages = Usage.objects.all().order_by('libelle')\n    carosseries = Carosserie.objects.all().order_by('libelle')\n    formules = Formule.objects.filter(status=True).order_by('libelle')\n    if request.method == 'POST':",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "details_vehicule",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def details_vehicule(request, police_id, vehicule_id):\n    police = Police.objects.get(id=police_id)\n    vehicule = Vehicule.objects.get(id=vehicule_id)\n    energies = Carburant.objects.all().order_by('libelle')\n    sinistres = []\n    tarifs = []\n    historiques = HistoriqueVehicule.objects.filter(vehicule_id=vehicule.id)\n    print(historiques)\n    return render(\n        request,",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "details_historique_vehicule",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def details_historique_vehicule(request, vehicule_id, historique_id):\n    vehicule = Vehicule.objects.get(id=vehicule_id)\n    historique = HistoriqueVehicule.objects.get(id=historique_id)\n    return render(\n        request,\n        'police/modal_historique_vehicule.html',\n        {\n            'vehicule': vehicule,\n            'historique': historique,\n        }",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "supprimer_vehicule",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def supprimer_vehicule(request, police_id, vehicule_id):\n    vehicule_police = VehiculePolice.objects.get(id=police_id)\n    police = Police.objects.get(id=police_id)\n    vehicule = Vehicule.objects.get(id=vehicule_id)\n    if request.method == \"POSeT\":\n        vehicule_id = request.POST.get('vehicule_id')\n        vehicule = Vehicule.objects.get(id=vehicule_id)\n        if vehicule.pk is not None:\n            # vehicule.delete()\n            #Vehicule.objects.filter(id=vehicule_id).update(statut=Statut.INACTIF)",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "import_vehicules",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def import_vehicules(request, police_id):\n    # categorieVehicule = CategorieVehicule\n    # marqueVehicule = MarqueVehicule\n    # typeCarosserie = TypeCarosserie\n    formule_id = request.POST.get('formule_id')\n    # print(police_id)\n    try:\n        if request.method == 'POST' and request.FILES['fichier']:\n            try:\n                fichier = request.FILES['fichier']",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "update_beneficiaire",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def update_beneficiaire(request, police_id, aliment_id):\n    police = Police.objects.get(id=police_id)\n    aliment = Aliment.objects.get(id=aliment_id)\n    file_upload_path = ''\n    if request.method == 'POST':\n        if aliment:\n            # upload de la photo\n            if 'photo' in request.FILES:\n                try:\n                    photo = request.FILES['photo']",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "details_beneficiaire",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def details_beneficiaire(request, police_id, aliment_id):\n    police = Police.objects.get(id=police_id)\n    aliment = Aliment.objects.get(id=aliment_id)\n    date_du_jour_gmt_ = datetime.datetime.now(tz=datetime.timezone.utc).date()\n    formulegarantie = aliment.formule_atdate(date_du_jour_gmt_)\n    types_documents = TypeDocument.objects.all().order_by('libelle')\n    documents = Document.objects.filter(aliment_id=aliment_id).order_by('-id')\n    cachet_bureau = police.bureau.cachet.url if police.bureau.cachet else ''\n    cartes = Carte.objects.filter(aliment_id=aliment_id).order_by('-id')\n    if len(cartes) > 0:",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "police_add_membre_famille_beneficiaire",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def police_add_membre_famille_beneficiaire(request, police_id, aliment_id):\n    police = Police.objects.get(id=police_id)\n    file_upload_path = ''\n    if request.method == 'POST':\n        aliment = Aliment.objects.get(pk=aliment_id)\n        # upload de la photo\n        if 'photo' in request.FILES:\n            try:\n                photo = request.FILES['photo']\n                fs = FileSystemStorage()",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "add_carte",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def add_carte(request, aliment_id):\n    aliment = Aliment.objects.get(id=aliment_id)\n    if request.method == 'POST':\n        date_edition = request.POST.get('date_edition')\n        motif = request.POST.get('motif')\n    # désactiver ses cartes actives\n    Carte.objects.filter(aliment_id=aliment_id).filter(statut=Statut.ACTIF).update(statut=Statut.INACTIF,\n                                                                                   date_desactivation=datetime.datetime.now(\n                                                                                       tz=timezone.utc))\n    # enregistrer la nouvelle carte",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "change_formule",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def change_formule(request, police_id, aliment_id):\n    police = Police.objects.get(id=police_id)\n    aliment = Aliment.objects.get(id=aliment_id)\n    if request.method == 'POST':\n        date_mouvement = request.POST.get('date_mouvement')\n        motif = request.POST.get('motif')\n        formule_id = request.POST.get('formule')\n        # desactiver les autres lignes\n        # AlimentFormule.objects.filter(aliment_id=aliment_id).update(statut=Statut.INACTIF)\n        #recuperons la toute derniere formule l'aliment",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "suspension_beneficiaire",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def suspension_beneficiaire(request, police_id, aliment_id):\n    police = Police.objects.get(id=police_id)\n    aliment = Aliment.objects.get(id=aliment_id)\n    # noinspection LanguageDetectionInspection\n    if request.method == 'POST':\n        date_effet = request.POST.get('date_effet')\n        motif = request.POST.get('motif')\n        mouvement = Mouvement.objects.filter(code=\"SUSPENSION-BENEF\").first()\n        #Créer l'avenant\n        mouvement_aliment = MouvementAliment.objects.create(created_by=request.user,",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "remise_en_vigueur",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def remise_en_vigueur(request, police_id, aliment_id):\n    police = Police.objects.get(id=police_id)\n    aliment = Aliment.objects.get(id=aliment_id)\n    # noinspection LanguageDetectionInspection\n    if request.method == 'POST':\n        id = request.POST.get('id')\n        date_effet = request.POST.get('date_effet')\n        motif = request.POST.get('motif')\n        mouvement = Mouvement.objects.filter(code=\"REMISEVIGUEUR-BENEF\").first()\n        #Créer l'avenant",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "sortie_police",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def sortie_police(request, police_id, aliment_id):\n    police = Police.objects.get(id=police_id)\n    aliment = Aliment.objects.get(id=aliment_id)\n    if request.method == 'POST':\n        date_sortie = request.POST.get('date_sortie')\n        motif = request.POST.get('motif')\n        type_retrait = motif = request.POST.get('type_retrait', None)\n        if type_retrait == \"famille\":\n            aliments = Aliment.objects.filter(adherent_principal_id=aliment_id)\n        else:",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "prime_famille",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def prime_famille(request, police_id):\n    police = Police.objects.get(id=police_id)\n    aliments_principaux = getAdherentsPrincipaux(police_id)\n    for aliment in aliments_principaux:\n        aliment.nombre_enfants = Aliment.objects.filter(adherent_principal_id=aliment.id,\n                                                        qualite_beneficiaire_id=3).count()\n        aliment.prime_conjoint = \\\n            Aliment.objects.filter(adherent_principal_id=aliment.id, qualite_beneficiaire_id=2).aggregate(\n                all_sum=Sum('surprime_ttc'))['all_sum']\n        aliment.prime_enfants = \\",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "add_avenant",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def add_avenant(request, police_id):\n    police = Police.objects.get(id=police_id)\n    if request.method == 'POST':\n        if request.POST.get('mouvement') in [\"5\", \"16\"]:\n            request.session['add_avenant'] = request.POST\n            response = {\n                'statut': 1,\n                'message': \"Enregistrement effectuée avec succès !\",\n                'data': {}\n            }",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "add_tarif_specifique",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def add_tarif_specifique(request, police_id):\n    if request.method == 'POST':\n        pprint(request.POST)\n        fichier = request.FILES['fichier_tarif']\n        prestataire_id = request.POST.get('prestataire_id')\n        formule_id = request.POST.get('formule_police_id')\n        police = Police.objects.get(id=police_id)\n        fs = FileSystemStorage()\n        file_name_renamed = fichier.name.replace(\" \", \"_\")\n        filename = fs.save(file_name_renamed, fichier)",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "del_tarif_specifique",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def del_tarif_specifique(request):\n    if request.method == 'POST':\n        tarif_id = request.POST.get('tarif_id')\n        TarifPrestataireClient.objects.filter(id=tarif_id).update(statut=0)\n        response = {\n            'statut': 1,\n            'message': \"Suppression effectué avec succès !\",\n            'data': {\n            }\n        }",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "upload_photo",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def upload_photo(request, beneficiaire_id):\n    if request.method == 'POST':\n        beneficiaire = get_object_or_404(Aliment, pk=beneficiaire_id)\n        form = PhotoUploadForm(request.POST, request.FILES)\n        if form.is_valid():\n            beneficiaire.photo = form.cleaned_data['file']\n            beneficiaire.save()\n            return JsonResponse({'success': True})\n        else:\n            return JsonResponse({'error': 'Une erreur est survenue lors de la sauvegarde de la photo.'})",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "upload_benef_picture",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def upload_benef_picture(request, police_id, aliment_id):\n    police = Police.objects.get(id=police_id)\n    aliment = Aliment.objects.get(id=aliment_id)\n    if request.method == 'POST':\n        fichier = request.FILES['file']\n        extesion = os.path.splitext(str(fichier))[1]\n        # filename = \"ph_\" + str(uuid.uuid4()) + \"_\" + fichier.name\n        filename = str(aliment.id) + extesion\n        # uploader le fichier\n        uploaded_photo_name = handle_uploaded_photo(fichier, filename, police_id)",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "motifs_by_mouvement",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def motifs_by_mouvement(request, mouvement_id):\n    motifs = Motif.objects.filter(mouvement_id=mouvement_id)\n    motifs_serialize = serializers.serialize('json', motifs)\n    return HttpResponse(motifs_serialize, content_type='application/json')\n# upload du fichier\ndef handle_uploaded_photo(f, filename, police_id):\n    path_ot_db = '/aliments/police_' + str(police_id)\n    dirname = settings.MEDIA_URL.replace('/', '') + path_ot_db\n    path = os.path.join(dirname)\n    if not os.path.exists(path):",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "handle_uploaded_photo",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def handle_uploaded_photo(f, filename, police_id):\n    path_ot_db = '/aliments/police_' + str(police_id)\n    dirname = settings.MEDIA_URL.replace('/', '') + path_ot_db\n    path = os.path.join(dirname)\n    if not os.path.exists(path):\n        os.makedirs(path)\n    with open(dirname + '/' + filename, 'wb+') as destination:\n        for chunk in f.chunks():\n            destination.write(chunk)\n    return path_ot_db + '/' + filename",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "handle_uploaded_fichier",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def handle_uploaded_fichier(f, filename):\n    path_ot_db = '/tarifs/'\n    dirname = settings.MEDIA_URL.replace('/', '') + path_ot_db\n    path = os.path.join(dirname)\n    if not os.path.exists(path):\n        os.makedirs(path)\n    with open(dirname + '/' + filename, 'wb+') as destination:\n        for chunk in f.chunks():\n            destination.write(chunk)\n    return path_ot_db + '/' + filename",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "generate_client_code",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def generate_client_code():\n    current_year = str(date.today().year)[-2:]\n    # Trouver le dernier code créé dans la base de données\n    last_code = Client.objects.aggregate(Max('code'))['code__max']\n    # Extraire le numéro incrémental du dernier code\n    if last_code:\n        last_number = int(last_code.split('-')[0])  # Ex: \"0001-CL24\" -> 0001\n        new_number = last_number + 1\n    else:\n        new_number = 1  # Si aucun code n'existe encore",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "clients_datatable",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def clients_datatable(request):\n    items_per_page = 10\n    page_number = request.GET.get('page')\n    start = int(request.GET.get('start', 0))\n    length = int(request.GET.get('length', items_per_page))\n    sort_column_index = int(request.GET.get('order[0][column]'))\n    sort_direction = request.GET.get('order[0][dir]')\n    search_nom = request.GET.get('search_nom', '').strip()\n    search_numero_police = request.GET.get('search_numero_police', '').strip()\n    search_type_personne = request.GET.get('search_type_personne', '').strip()",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "add_client",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def add_client(request):\n    if request.method == 'POST':\n        date_naissance = request.POST.get('date_naissance', None)\n        if date_naissance:\n            date_naissance = datetime.strptime(date_naissance, '%Y-%m-%d').date()\n        else:\n            date_naissance = None\n        client_created = Client.objects.create(bureau_id=request.user.bureau.id,\n                                       nom=request.POST.get('nom'),\n                                       prenoms=request.POST.get('prenoms'),",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "modifier_client",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def modifier_client(request, client_id):\n    client = Client.objects.get(id=client_id)\n    file_upload_path = ''\n    if request.method == 'POST':\n        user = User.objects.get(id=request.user.id)\n        date_naissance = request.POST.get('date_naissance', None)\n        if date_naissance:\n            date_naissance = datetime.strptime(date_naissance, '%Y-%m-%d').date()\n        else:\n            date_naissance = None",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "supprimer_client",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def supprimer_client(request):\n    if request.method == \"POST\":\n        client_id = request.POST.get('client_id')\n        client = Client.objects.get(id=client_id)\n        if client.pk is not None:\n            # client.delete()\n            Client.objects.filter(id=client_id).update(statut=Statut.INACTIF)\n            response = {\n                'statut': 1,\n                'message': \"Client supprimé avec succès !\",",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "add_formule_universelle",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def add_formule_universelle(request):\n    # police = Police.objects.get(id=police_id)\n    # if police and request.method == 'POST':\n    if request.method == 'POST':\n        territorialite_id = request.POST.get('territorialite')\n        type_tarif_id = request.POST.get('type_tarif')\n        reseau_soin_id = request.POST.get('reseau_soin')\n        taux_couverture = request.POST.get('taux_couverture')\n        libelle = request.POST.get('libelle')\n        plafond_conso_famille = request.POST.get('plafond_conso_famille').replace(' ', '')",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "add_formule",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def add_formule(request, police_id):\n    police = Police.objects.get(id=police_id)\n    if police and request.method == 'POST':\n        territorialite_id = request.POST.get('territorialite')\n        type_tarif_id = request.POST.get('type_tarif')\n        reseau_soin_id = request.POST.get('reseau_soin')\n        taux_couverture = request.POST.get('taux_couverture')\n        libelle = request.POST.get('libelle')\n        plafond_conso_famille = request.POST.get('plafond_conso_famille').replace(' ', '')\n        plafond_conso_individuelle = request.POST.get('plafond_conso_individuelle').replace(' ', '')",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "modifier_formule",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def modifier_formule(request, formule_id):\n    formule = FormuleGarantie.objects.get(id=formule_id)\n    police = formule.police if formule else None\n    if request.method == 'POST':\n        formule_before = formule\n        pprint(formule_before)\n        libelle = request.POST.get('libelle')\n        taux_couverture = int(request.POST.get('taux_couverture').replace(\" \", \"\"))\n        type_tarif_id = request.POST.get('type_tarif')\n        reseau_soin_id = request.POST.get('reseau_soin')",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "desactivate_formule",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def desactivate_formule(request):\n    if request.method == 'POST':\n        formule_id = request.POST.get('id')\n        formule = FormuleGarantie.objects.get(id=formule_id)\n        formule_before = formule\n        #voir si aucun bénéficiaire dessus avant de supprimer\n        aliments_formules = AlimentFormule.objects.filter(formule_id=formule_id)\n        if not aliments_formules:\n            date_fin = request.POST.get('date_fin')\n            formule.date_fin = date_fin",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "add_bareme",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def add_bareme(request, formule_id):\n    # dd(request)\n    formule = FormuleGarantie.objects.get(id=formule_id)\n    pprint(formule)\n    if formule and request.method == 'POST':\n        rubrique_id = request.POST.get('rubrique')\n        acte_id = request.POST.get('acte')\n        sous_rubrique_id = request.POST.get('sous_rubrique')\n        regroupement_acte_id = request.POST.get('regroupement_acte')\n        sous_regroupement_acte_id = request.POST.get('sous_regroupement_acte')",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "detail_bareme",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def detail_bareme(request, bareme_id):\n    bareme = Bareme.objects.get(id=bareme_id)\n    return render(request, 'police/modal_details_formule.html', {\n        'bareme': bareme\n    })\ndef del_bareme(request):\n    if request.method == 'POST':\n        bareme_id = request.POST.get('bareme_id')\n        date_fin = request.POST.get('date_fin')\n        Bareme.objects.filter(id=bareme_id).update(statut=Statut.INACTIF, deleted_by=request.user, date_fin=date_fin,",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "del_bareme",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def del_bareme(request):\n    if request.method == 'POST':\n        bareme_id = request.POST.get('bareme_id')\n        date_fin = request.POST.get('date_fin')\n        Bareme.objects.filter(id=bareme_id).update(statut=Statut.INACTIF, deleted_by=request.user, date_fin=date_fin,\n                                                   deleted_at=datetime.datetime.now(tz=timezone.utc))\n        response = {\n            'statut': 1,\n            'message': \"Barème désactivé avec succès !\",\n            'data': {",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "generate_qrcode",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def generate_qrcode(request):\n    cartes = Carte.objects.filter(Q(qrcode_file__isnull=True) | Q(qrcode_file=\"\"))[:5000] #Q(qrcode_file__isnull=True) | Q(qrcode_file__isnull=\"\"))[:5000] #generate-qrcode-carte\n    print(\"cartes\")\n    #dd(cartes)\n    print(len(cartes))\n    datas = []\n    for carte in cartes:\n        # générer le qrcode\n        qrcode_file = generer_qrcode_carte(carte.numero)\n        print(\"carte.numero\")",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "beneficiaire_carte_pdf",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def beneficiaire_carte_pdf(request):\n    logo = settings.JAZZMIN_SETTINGS.get('logo_for_carte')\n    print(logo)\n    aliments = [1,2,3,4,5]\n    pdf = render_pdf('police/courriers/cartes-model.html', {\"logo\": logo, \"aliments\": aliments})\n    return HttpResponse(File(pdf), content_type='application/pdf')\ndef beneficiaire_carte_html(request):\n    return render(request, 'police/courriers/cartes.html', {})\n@login_required()\ndef export_beneficiaires(request, police_id):",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "beneficiaire_carte_html",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def beneficiaire_carte_html(request):\n    return render(request, 'police/courriers/cartes.html', {})\n@login_required()\ndef export_beneficiaires(request, police_id):\n    police = Police.objects.get(id=police_id)\n    today = timezone.now().date()\n    if police:\n        aliment_ids = AlimentFormule.objects.filter(\n            formule_id__in=[p.id for p in police.formules],\n            statut=Statut.ACTIF,",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "export_beneficiaires",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def export_beneficiaires(request, police_id):\n    police = Police.objects.get(id=police_id)\n    today = timezone.now().date()\n    if police:\n        aliment_ids = AlimentFormule.objects.filter(\n            formule_id__in=[p.id for p in police.formules],\n            statut=Statut.ACTIF,\n            statut_validite=StatutValidite.VALIDE\n        ).values_list('aliment_id', flat=True)\n        queryset = Aliment.objects.filter(id__in=aliment_ids).order_by('adherent_principal_id', 'qualite_beneficiaire_id', 'nom', 'prenoms')",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "export_sinistres_beneficiaire",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def export_sinistres_beneficiaire(request, police_id, aliment_id):\n    police = Police.objects.get(id=police_id)\n    #today = datetime.datetime.now(tz=timezone.utc)\n    aliment = Aliment.objects.get(id=aliment_id)\n    if aliment:\n        #queryset = Aliment.objects.select_related('qualite_beneficiaire', 'police__client').filter(formulegarantie__police=police=police).order_by('-id')\n        # Optimisation de la recuperation des beneficiaires\n        #queryset = AlimentFormule.objects.filter(formule_id__in=[p.id for p in police.formules], statut=Statut.ACTIF).order_by('-id')\n        queryset = Sinistre.objects.filter(aliment_id=aliment_id, statut_validite=StatutValidite.VALIDE).order_by('-id')\n        print(\"queryset\")",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "export_sinistres_famille",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def export_sinistres_famille(request, police_id, aliment_id):\n    police = Police.objects.get(id=police_id)\n    #today = datetime.datetime.now(tz=timezone.utc)\n    aliment = Aliment.objects.get(id=aliment_id)\n    if aliment:\n        #queryset = Aliment.objects.select_related('qualite_beneficiaire', 'police__client').filter(formulegarantie__police=police=police).order_by('-id')\n        # Optimisation de la recuperation des beneficiaires\n        #queryset = AlimentFormule.objects.filter(formule_id__in=[p.id for p in police.formules], statut=Statut.ACTIF).order_by('-id')\n        adherent_principal = aliment.adherent_principal.nom + \" \" + aliment.adherent_principal.prenoms\n        queryset = Sinistre.objects.filter(adherent_principal=aliment.adherent_principal, statut_validite=StatutValidite.VALIDE).order_by('-id')",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "export_sinistres_police",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def export_sinistres_police(request, police_id):\n    police = Police.objects.get(id=police_id)\n    #today = datetime.datetime.now(tz=timezone.utc)\n    if police:\n        #queryset = Aliment.objects.select_related('qualite_beneficiaire', 'police__client').filter(formulegarantie__police=police=police).order_by('-id')\n        # Optimisation de la recuperation des beneficiaires\n        #queryset = AlimentFormule.objects.filter(formule_id__in=[p.id for p in police.formules], statut=Statut.ACTIF).order_by('-id')\n        queryset = Sinistre.objects.filter(police=police, statut_validite=StatutValidite.VALIDE).order_by('-id')\n        #dd(aliment.adherent_principal)\n        print(\"queryset\")",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "export_prospect",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def export_prospect(request):\n    mouvements = MouvementAliment.objects.filter(\n        statut_traitement=StatutTraitement.NON_TRAITE,\n        police__bureau=request.user.bureau\n    ).order_by('aliment__nom').distinct()\n    # Create an HttpResponse object with the appropriate content type and headers\n    response = HttpResponse(content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')\n    response['Content-Disposition'] = 'attachment; filename=\"LISTE DES MOUVEMENTS GRH.xlsx\"'\n    # Create a new Workbook and select the active worksheet\n    workbook = openpyxl.Workbook()",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "prospect_grh_datatable",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def prospect_grh_datatable(request):\n    items_per_page = 10\n    page_number = request.GET.get('page')\n    start = int(request.GET.get('start', 0))\n    length = int(request.GET.get('length', items_per_page))\n    sort_column_index = int(request.GET.get('order[0][column]'))\n    sort_direction = request.GET.get('order[0][dir]')\n    # Retrieve search filters from request\n    search_client_id = request.GET.get('client', None)\n    search_num_police = request.GET.get('num_police', None)",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "details_prospect",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def details_prospect(request, aliment_grh_id):\n    aliment_grh = Aliment.objects.filter(id=aliment_grh_id).first()\n    famille = Aliment.objects.filter(adherent_principal=aliment_grh.adherent_principal)\n    # last() cause pour changement de formule (aliment a plusieurs formules)\n    aliment_formule = AlimentFormule.objects.filter(aliment=aliment_grh).last()\n    police = aliment_formule.formule.police if aliment_formule else None\n    historique_formules = aliment_grh.historique_formules.filter(formule__police=police).order_by('date_debut')\n    mouvements_aliments = MouvementAliment.objects.filter(aliment=aliment_grh, statut_validite=StatutValidite.VALIDE).order_by('id')\n    return render(request, 'grh/modal_details_prospect.html',\n                  {'prospect': aliment_grh, 'famille':famille, 'historique_formules':historique_formules, 'mouvements_aliments': mouvements_aliments, 'police':police})",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "submit_prospect",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def submit_prospect(request, aliment_grh_id, police_id):\n    aliment_grh = Aliment.objects.filter(id=aliment_grh_id).first()\n    police = Police.objects.get(id=police_id)\n    # prospect.statut_enrolement = StatutEnrolement.INCORPORE\n    if aliment_grh is not None:\n        prospect = Prospect.objects.filter(aliment=aliment_grh).first()\n        if prospect:\n            prospect.statut_enrolement = StatutEnrolement.INCORPORE\n            prospect.save()\n        campagne_prospect = CampagneProspect.objects.filter(prospect=prospect).first()",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "rejet_prospect",
        "kind": 2,
        "importPath": "src.production.views",
        "description": "src.production.views",
        "peekOfCode": "def rejet_prospect(request, prospect_id):\n    prospect = Prospect.objects.filter(id=prospect_id).first()\n    if prospect is not None:\n        prospect.statut_enrolement = StatutEnrolement.SOUMIS\n        prospect.save()\n        campagne_prospect = CampagneProspect.objects.filter(prospect=prospect).first()\n        if campagne_prospect:\n            campagne_prospect.statut_enrolement = StatutEnrolement.SOUMIS\n            campagne_prospect.save()\n        return JsonResponse({",
        "detail": "src.production.views",
        "documentation": {}
    },
    {
        "label": "StatutEnrolement",
        "kind": 6,
        "importPath": "src.shared.enum",
        "description": "src.shared.enum",
        "peekOfCode": "class StatutEnrolement(models.TextChoices):\n    ATTENTE = 'EN ATTENTE'\n    ENCOURS = 'EN COURS'\n    SOUMIS = 'SOUMIS'\n    VALIDE = 'VALIDE'\n    REJETE = 'REJETE'\n    INCORPORE = 'INCORPORE'\nclass StatutIncorporation(models.TextChoices):\n    ENCOURS = 'ENCOURS'\n    INCORPORE = 'INCORPORE'",
        "detail": "src.shared.enum",
        "documentation": {}
    },
    {
        "label": "StatutIncorporation",
        "kind": 6,
        "importPath": "src.shared.enum",
        "description": "src.shared.enum",
        "peekOfCode": "class StatutIncorporation(models.TextChoices):\n    ENCOURS = 'ENCOURS'\n    INCORPORE = 'INCORPORE'\nclass StatutTraitement(models.TextChoices):\n    TRAITE = 'TRAITE'\n    NON_TRAITE = 'NON TRAITE'\nclass Etat(models.TextChoices):\n    ENTRE = 'ENTRÉ'\n    SUSPENDU = 'SUSPENDU'\n    SORTIE = 'SORTIE'",
        "detail": "src.shared.enum",
        "documentation": {}
    },
    {
        "label": "StatutTraitement",
        "kind": 6,
        "importPath": "src.shared.enum",
        "description": "src.shared.enum",
        "peekOfCode": "class StatutTraitement(models.TextChoices):\n    TRAITE = 'TRAITE'\n    NON_TRAITE = 'NON TRAITE'\nclass Etat(models.TextChoices):\n    ENTRE = 'ENTRÉ'\n    SUSPENDU = 'SUSPENDU'\n    SORTIE = 'SORTIE'\nclass PasswordType(models.TextChoices):\n    DEFAULT = 'DEFAULT'\n    CUSTOM = 'CUSTOM'",
        "detail": "src.shared.enum",
        "documentation": {}
    },
    {
        "label": "Etat",
        "kind": 6,
        "importPath": "src.shared.enum",
        "description": "src.shared.enum",
        "peekOfCode": "class Etat(models.TextChoices):\n    ENTRE = 'ENTRÉ'\n    SUSPENDU = 'SUSPENDU'\n    SORTIE = 'SORTIE'\nclass PasswordType(models.TextChoices):\n    DEFAULT = 'DEFAULT'\n    CUSTOM = 'CUSTOM'\nclass SatutBordereauDossierSinistres(models.TextChoices):\n    ATTENTE = 'ATTENTE'\n    VALIDE = 'VALIDE'",
        "detail": "src.shared.enum",
        "documentation": {}
    },
    {
        "label": "PasswordType",
        "kind": 6,
        "importPath": "src.shared.enum",
        "description": "src.shared.enum",
        "peekOfCode": "class PasswordType(models.TextChoices):\n    DEFAULT = 'DEFAULT'\n    CUSTOM = 'CUSTOM'\nclass SatutBordereauDossierSinistres(models.TextChoices):\n    ATTENTE = 'ATTENTE'\n    VALIDE = 'VALIDE'\n    REJETE = 'REJETE'\n    ORDONNANCE = 'ORDONNANCE'\n    PAYE = 'PAYE'\n    ANNULE = 'ANNULE'",
        "detail": "src.shared.enum",
        "documentation": {}
    },
    {
        "label": "SatutBordereauDossierSinistres",
        "kind": 6,
        "importPath": "src.shared.enum",
        "description": "src.shared.enum",
        "peekOfCode": "class SatutBordereauDossierSinistres(models.TextChoices):\n    ATTENTE = 'ATTENTE'\n    VALIDE = 'VALIDE'\n    REJETE = 'REJETE'\n    ORDONNANCE = 'ORDONNANCE'\n    PAYE = 'PAYE'\n    ANNULE = 'ANNULE'\nclass StatutSinistreBordereau(models.TextChoices):\n    AJOUTE_BORDEREAU = 'AJOUTE BORDEREAU'\n    PAYE = 'PAYE'",
        "detail": "src.shared.enum",
        "documentation": {}
    },
    {
        "label": "StatutSinistreBordereau",
        "kind": 6,
        "importPath": "src.shared.enum",
        "description": "src.shared.enum",
        "peekOfCode": "class StatutSinistreBordereau(models.TextChoices):\n    AJOUTE_BORDEREAU = 'AJOUTE BORDEREAU'\n    PAYE = 'PAYE'\n    ATTENTE = 'ATTENTE DE PAIEMENT'\nclass StatutSinistre(models.TextChoices):\n    ACCORDE = 'ACCORDE'\n    ATTENTE = 'EN ATTENTE'\n    REJETE = 'REJETE'\nclass StatutSinistrePrestation(models.TextChoices):\n    EFFECTUE = 'EFFECTUE'",
        "detail": "src.shared.enum",
        "documentation": {}
    },
    {
        "label": "StatutSinistre",
        "kind": 6,
        "importPath": "src.shared.enum",
        "description": "src.shared.enum",
        "peekOfCode": "class StatutSinistre(models.TextChoices):\n    ACCORDE = 'ACCORDE'\n    ATTENTE = 'EN ATTENTE'\n    REJETE = 'REJETE'\nclass StatutSinistrePrestation(models.TextChoices):\n    EFFECTUE = 'EFFECTUE'\n    ATTENTE = 'NON EFFECTUE'\nclass BaseCalculTM(models.TextChoices):\n    FRAIS_REEL = 'FRAIS REEL'\n    PLAFOND = 'PLAFOND'",
        "detail": "src.shared.enum",
        "documentation": {}
    },
    {
        "label": "StatutSinistrePrestation",
        "kind": 6,
        "importPath": "src.shared.enum",
        "description": "src.shared.enum",
        "peekOfCode": "class StatutSinistrePrestation(models.TextChoices):\n    EFFECTUE = 'EFFECTUE'\n    ATTENTE = 'NON EFFECTUE'\nclass BaseCalculTM(models.TextChoices):\n    FRAIS_REEL = 'FRAIS REEL'\n    PLAFOND = 'PLAFOND'\nclass Genre(models.TextChoices):\n    MASCULIN = 'M'\n    FEMININ = 'F'\nclass StatutFamilial(models.TextChoices):",
        "detail": "src.shared.enum",
        "documentation": {}
    },
    {
        "label": "BaseCalculTM",
        "kind": 6,
        "importPath": "src.shared.enum",
        "description": "src.shared.enum",
        "peekOfCode": "class BaseCalculTM(models.TextChoices):\n    FRAIS_REEL = 'FRAIS REEL'\n    PLAFOND = 'PLAFOND'\nclass Genre(models.TextChoices):\n    MASCULIN = 'M'\n    FEMININ = 'F'\nclass StatutFamilial(models.TextChoices):\n    MARIE = 'M'\n    CELIBATAIRE = 'C'\n    DIVORCE = 'D'",
        "detail": "src.shared.enum",
        "documentation": {}
    },
    {
        "label": "Genre",
        "kind": 6,
        "importPath": "src.shared.enum",
        "description": "src.shared.enum",
        "peekOfCode": "class Genre(models.TextChoices):\n    MASCULIN = 'M'\n    FEMININ = 'F'\nclass StatutFamilial(models.TextChoices):\n    MARIE = 'M'\n    CELIBATAIRE = 'C'\n    DIVORCE = 'D'\n    CHOISIR = ''\nclass Statut(models.TextChoices):\n    ACTIF = 'ACTIF'",
        "detail": "src.shared.enum",
        "documentation": {}
    },
    {
        "label": "StatutFamilial",
        "kind": 6,
        "importPath": "src.shared.enum",
        "description": "src.shared.enum",
        "peekOfCode": "class StatutFamilial(models.TextChoices):\n    MARIE = 'M'\n    CELIBATAIRE = 'C'\n    DIVORCE = 'D'\n    CHOISIR = ''\nclass Statut(models.TextChoices):\n    ACTIF = 'ACTIF'\n    INACTIF = 'INACTIF'\nclass StatutValidite(models.TextChoices):\n    VALIDE = 'VALIDE'",
        "detail": "src.shared.enum",
        "documentation": {}
    },
    {
        "label": "Statut",
        "kind": 6,
        "importPath": "src.shared.enum",
        "description": "src.shared.enum",
        "peekOfCode": "class Statut(models.TextChoices):\n    ACTIF = 'ACTIF'\n    INACTIF = 'INACTIF'\nclass StatutValidite(models.TextChoices):\n    VALIDE = 'VALIDE'\n    SUPPRIME = 'SUPPRIME'\n    BROUILLON = 'BROUILLON'\n    CLOTURE = 'CLOTURE'\nclass StatutRemboursement(models.TextChoices):\n    ATTENTE = 'EN ATTENTE'",
        "detail": "src.shared.enum",
        "documentation": {}
    },
    {
        "label": "StatutValidite",
        "kind": 6,
        "importPath": "src.shared.enum",
        "description": "src.shared.enum",
        "peekOfCode": "class StatutValidite(models.TextChoices):\n    VALIDE = 'VALIDE'\n    SUPPRIME = 'SUPPRIME'\n    BROUILLON = 'BROUILLON'\n    CLOTURE = 'CLOTURE'\nclass StatutRemboursement(models.TextChoices):\n    ATTENTE = 'EN ATTENTE'\n    DEMANDE = 'DEMANDE'\n    ACCEPTE = 'ACCEPTE'\n    ACCEPTE_PARTIELLEMENT = 'ACCEPTE PARTIELLEMENT'",
        "detail": "src.shared.enum",
        "documentation": {}
    },
    {
        "label": "StatutRemboursement",
        "kind": 6,
        "importPath": "src.shared.enum",
        "description": "src.shared.enum",
        "peekOfCode": "class StatutRemboursement(models.TextChoices):\n    ATTENTE = 'EN ATTENTE'\n    DEMANDE = 'DEMANDE'\n    ACCEPTE = 'ACCEPTE'\n    ACCEPTE_PARTIELLEMENT = 'ACCEPTE PARTIELLEMENT'\n    REFUSE = 'REFUSE'\n    ANNULE = 'ANNULE'\nclass OptionRefacturation(models.TextChoices):\n    REFACTURABLE = 'REFACTURABLE'\n    NON_REFACTURABLE = 'NON REFACTURABLE'",
        "detail": "src.shared.enum",
        "documentation": {}
    },
    {
        "label": "OptionRefacturation",
        "kind": 6,
        "importPath": "src.shared.enum",
        "description": "src.shared.enum",
        "peekOfCode": "class OptionRefacturation(models.TextChoices):\n    REFACTURABLE = 'REFACTURABLE'\n    NON_REFACTURABLE = 'NON REFACTURABLE'\nclass StatutRemboursementSinistre(models.TextChoices):\n    ACCEPTE = 'ACCEPTE'\n    REFUSE = 'REFUSE'\n    NET_A_PAYER = 'NET A PAYER'\n    TAXT = 'TAXT'\n    FAR_TAXE = 'TAXE FAR'\nclass DesignationRemboursementSinistre(models.TextChoices):",
        "detail": "src.shared.enum",
        "documentation": {}
    },
    {
        "label": "StatutRemboursementSinistre",
        "kind": 6,
        "importPath": "src.shared.enum",
        "description": "src.shared.enum",
        "peekOfCode": "class StatutRemboursementSinistre(models.TextChoices):\n    ACCEPTE = 'ACCEPTE'\n    REFUSE = 'REFUSE'\n    NET_A_PAYER = 'NET A PAYER'\n    TAXT = 'TAXT'\n    FAR_TAXE = 'TAXE FAR'\nclass DesignationRemboursementSinistre(models.TextChoices):\n    NET_A_PAYER = 'NET A PAYER'\n    TAXT = 'TAXT'\n    MONTANT_REFUSE = 'MONTANT REFUSE'",
        "detail": "src.shared.enum",
        "documentation": {}
    },
    {
        "label": "DesignationRemboursementSinistre",
        "kind": 6,
        "importPath": "src.shared.enum",
        "description": "src.shared.enum",
        "peekOfCode": "class DesignationRemboursementSinistre(models.TextChoices):\n    NET_A_PAYER = 'NET A PAYER'\n    TAXT = 'TAXT'\n    MONTANT_REFUSE = 'MONTANT REFUSE'\nclass StatutPolice(models.TextChoices):\n    ACTIF = 'ACTIF'\n    INACTIF = 'INACTIF'\n    ANNULE = 'ANNULE'\nclass EtatPolice(models.TextChoices):\n    EN_COURS = 'EN COURS'",
        "detail": "src.shared.enum",
        "documentation": {}
    },
    {
        "label": "StatutPolice",
        "kind": 6,
        "importPath": "src.shared.enum",
        "description": "src.shared.enum",
        "peekOfCode": "class StatutPolice(models.TextChoices):\n    ACTIF = 'ACTIF'\n    INACTIF = 'INACTIF'\n    ANNULE = 'ANNULE'\nclass EtatPolice(models.TextChoices):\n    EN_COURS = 'EN COURS'\n    SUSPENDU = 'SUSPENDU'\n    RESILIE = 'RESILIE'\nclass StatutRelation(models.TextChoices):\n    PROSPECT = 'PROSPECT'",
        "detail": "src.shared.enum",
        "documentation": {}
    },
    {
        "label": "EtatPolice",
        "kind": 6,
        "importPath": "src.shared.enum",
        "description": "src.shared.enum",
        "peekOfCode": "class EtatPolice(models.TextChoices):\n    EN_COURS = 'EN COURS'\n    SUSPENDU = 'SUSPENDU'\n    RESILIE = 'RESILIE'\nclass StatutRelation(models.TextChoices):\n    PROSPECT = 'PROSPECT'\n    CLIENT = 'CLIENT'\nclass StatutContrat(models.TextChoices):\n    PROJET = 'PROJET'\n    CONTRAT = 'CONTRAT'",
        "detail": "src.shared.enum",
        "documentation": {}
    },
    {
        "label": "StatutRelation",
        "kind": 6,
        "importPath": "src.shared.enum",
        "description": "src.shared.enum",
        "peekOfCode": "class StatutRelation(models.TextChoices):\n    PROSPECT = 'PROSPECT'\n    CLIENT = 'CLIENT'\nclass StatutContrat(models.TextChoices):\n    PROJET = 'PROJET'\n    CONTRAT = 'CONTRAT'\nclass EtapeProjet(models.TextChoices):\n    PROSPECTION = 'PROSPECTION'\n    ETUDE = 'ETUDE'\n    PROPOSITION = 'PROPOSITION'",
        "detail": "src.shared.enum",
        "documentation": {}
    },
    {
        "label": "StatutContrat",
        "kind": 6,
        "importPath": "src.shared.enum",
        "description": "src.shared.enum",
        "peekOfCode": "class StatutContrat(models.TextChoices):\n    PROJET = 'PROJET'\n    CONTRAT = 'CONTRAT'\nclass EtapeProjet(models.TextChoices):\n    PROSPECTION = 'PROSPECTION'\n    ETUDE = 'ETUDE'\n    PROPOSITION = 'PROPOSITION'\n    ACCORD_CLIENT = 'ACCORD CLIENT'\nclass StatutQuittance(models.TextChoices):\n    IMPAYE = 'IMPAYE'",
        "detail": "src.shared.enum",
        "documentation": {}
    },
    {
        "label": "EtapeProjet",
        "kind": 6,
        "importPath": "src.shared.enum",
        "description": "src.shared.enum",
        "peekOfCode": "class EtapeProjet(models.TextChoices):\n    PROSPECTION = 'PROSPECTION'\n    ETUDE = 'ETUDE'\n    PROPOSITION = 'PROPOSITION'\n    ACCORD_CLIENT = 'ACCORD CLIENT'\nclass StatutQuittance(models.TextChoices):\n    IMPAYE = 'IMPAYE'\n    PAYE = 'PAYE'\nclass StatutValiditeQuittance(models.TextChoices):\n    VALIDE = 'VALIDE'",
        "detail": "src.shared.enum",
        "documentation": {}
    },
    {
        "label": "StatutQuittance",
        "kind": 6,
        "importPath": "src.shared.enum",
        "description": "src.shared.enum",
        "peekOfCode": "class StatutQuittance(models.TextChoices):\n    IMPAYE = 'IMPAYE'\n    PAYE = 'PAYE'\nclass StatutValiditeQuittance(models.TextChoices):\n    VALIDE = 'VALIDE'\n    ANNULEE = 'ANNULEE'\nclass StatutFacture(models.TextChoices):\n    SOLDE = 'SOLDE'\n    NON_SOLDE = 'NON SOLDE'\nclass StatutReversementCompagnie(models.TextChoices):",
        "detail": "src.shared.enum",
        "documentation": {}
    },
    {
        "label": "StatutValiditeQuittance",
        "kind": 6,
        "importPath": "src.shared.enum",
        "description": "src.shared.enum",
        "peekOfCode": "class StatutValiditeQuittance(models.TextChoices):\n    VALIDE = 'VALIDE'\n    ANNULEE = 'ANNULEE'\nclass StatutFacture(models.TextChoices):\n    SOLDE = 'SOLDE'\n    NON_SOLDE = 'NON SOLDE'\nclass StatutReversementCompagnie(models.TextChoices):\n    REVERSE = 'REVERSE'\n    NON_REVERSE = 'NON REVERSE'\nclass StatutEncaissementCommission(models.TextChoices):",
        "detail": "src.shared.enum",
        "documentation": {}
    },
    {
        "label": "StatutFacture",
        "kind": 6,
        "importPath": "src.shared.enum",
        "description": "src.shared.enum",
        "peekOfCode": "class StatutFacture(models.TextChoices):\n    SOLDE = 'SOLDE'\n    NON_SOLDE = 'NON SOLDE'\nclass StatutReversementCompagnie(models.TextChoices):\n    REVERSE = 'REVERSE'\n    NON_REVERSE = 'NON REVERSE'\nclass StatutEncaissementCommission(models.TextChoices):\n    ENCAISSEE = 'ENCAISSEE'\n    NON_ENCAISSEE = 'NON ENCAISSEE'\nclass TypeEncaissementCommission(models.TextChoices):",
        "detail": "src.shared.enum",
        "documentation": {}
    },
    {
        "label": "StatutReversementCompagnie",
        "kind": 6,
        "importPath": "src.shared.enum",
        "description": "src.shared.enum",
        "peekOfCode": "class StatutReversementCompagnie(models.TextChoices):\n    REVERSE = 'REVERSE'\n    NON_REVERSE = 'NON REVERSE'\nclass StatutEncaissementCommission(models.TextChoices):\n    ENCAISSEE = 'ENCAISSEE'\n    NON_ENCAISSEE = 'NON ENCAISSEE'\nclass TypeEncaissementCommission(models.TextChoices):\n    COURTAGE = 'COURTAGE'\n    GESTION = 'GESTION'\nclass StatutReglementApporteurs(models.TextChoices):",
        "detail": "src.shared.enum",
        "documentation": {}
    },
    {
        "label": "StatutEncaissementCommission",
        "kind": 6,
        "importPath": "src.shared.enum",
        "description": "src.shared.enum",
        "peekOfCode": "class StatutEncaissementCommission(models.TextChoices):\n    ENCAISSEE = 'ENCAISSEE'\n    NON_ENCAISSEE = 'NON ENCAISSEE'\nclass TypeEncaissementCommission(models.TextChoices):\n    COURTAGE = 'COURTAGE'\n    GESTION = 'GESTION'\nclass StatutReglementApporteurs(models.TextChoices):\n    REGLE = 'REGLE'\n    NON_REGLE = 'NON REGLE'\nclass OptionYesNo(models.TextChoices):",
        "detail": "src.shared.enum",
        "documentation": {}
    },
    {
        "label": "TypeEncaissementCommission",
        "kind": 6,
        "importPath": "src.shared.enum",
        "description": "src.shared.enum",
        "peekOfCode": "class TypeEncaissementCommission(models.TextChoices):\n    COURTAGE = 'COURTAGE'\n    GESTION = 'GESTION'\nclass StatutReglementApporteurs(models.TextChoices):\n    REGLE = 'REGLE'\n    NON_REGLE = 'NON REGLE'\nclass OptionYesNo(models.TextChoices):\n    OUI = 'OUI'\n    NON = 'NON'\n    CHOISIR = ''",
        "detail": "src.shared.enum",
        "documentation": {}
    },
    {
        "label": "StatutReglementApporteurs",
        "kind": 6,
        "importPath": "src.shared.enum",
        "description": "src.shared.enum",
        "peekOfCode": "class StatutReglementApporteurs(models.TextChoices):\n    REGLE = 'REGLE'\n    NON_REGLE = 'NON REGLE'\nclass OptionYesNo(models.TextChoices):\n    OUI = 'OUI'\n    NON = 'NON'\n    CHOISIR = ''\nclass PlacementEtGestion(models.TextChoices):\n    EN_LOCAL = 'LOCAL'\n    PAR_LE_COURTIER_MASTER = 'PAR LE COURTIER MASTER'",
        "detail": "src.shared.enum",
        "documentation": {}
    },
    {
        "label": "OptionYesNo",
        "kind": 6,
        "importPath": "src.shared.enum",
        "description": "src.shared.enum",
        "peekOfCode": "class OptionYesNo(models.TextChoices):\n    OUI = 'OUI'\n    NON = 'NON'\n    CHOISIR = ''\nclass PlacementEtGestion(models.TextChoices):\n    EN_LOCAL = 'LOCAL'\n    PAR_LE_COURTIER_MASTER = 'PAR LE COURTIER MASTER'\n    CHOISIR = ''\nclass ModeRenouvellement(models.TextChoices):\n    TACITE_RECONDUCTION = 'TACITE RECONDUCTION'",
        "detail": "src.shared.enum",
        "documentation": {}
    },
    {
        "label": "PlacementEtGestion",
        "kind": 6,
        "importPath": "src.shared.enum",
        "description": "src.shared.enum",
        "peekOfCode": "class PlacementEtGestion(models.TextChoices):\n    EN_LOCAL = 'LOCAL'\n    PAR_LE_COURTIER_MASTER = 'PAR LE COURTIER MASTER'\n    CHOISIR = ''\nclass ModeRenouvellement(models.TextChoices):\n    TACITE_RECONDUCTION = 'TACITE RECONDUCTION'\n    SANS_TACITE_RECONDUCTION = 'SANS TACITE RECONDUCTION'\n    CHOISIR = ''\nclass CalculTM(models.TextChoices):\n    SUR_PLAFOND = 'SUR PLAFOND'",
        "detail": "src.shared.enum",
        "documentation": {}
    },
    {
        "label": "ModeRenouvellement",
        "kind": 6,
        "importPath": "src.shared.enum",
        "description": "src.shared.enum",
        "peekOfCode": "class ModeRenouvellement(models.TextChoices):\n    TACITE_RECONDUCTION = 'TACITE RECONDUCTION'\n    SANS_TACITE_RECONDUCTION = 'SANS TACITE RECONDUCTION'\n    CHOISIR = ''\nclass CalculTM(models.TextChoices):\n    SUR_PLAFOND = 'SUR PLAFOND'\n    SUR_FRAIS_REEL = 'SUR FRAIS REEL'\n    CHOISIR = ''\nclass TypeMajorationContrat(models.TextChoices):\n        TAUX = 'TAUX'",
        "detail": "src.shared.enum",
        "documentation": {}
    },
    {
        "label": "CalculTM",
        "kind": 6,
        "importPath": "src.shared.enum",
        "description": "src.shared.enum",
        "peekOfCode": "class CalculTM(models.TextChoices):\n    SUR_PLAFOND = 'SUR PLAFOND'\n    SUR_FRAIS_REEL = 'SUR FRAIS REEL'\n    CHOISIR = ''\nclass TypeMajorationContrat(models.TextChoices):\n        TAUX = 'TAUX'\n        MONTANT = 'MONTANT'\nclass Energie(models.TextChoices):\n        ES = 'ESSENCE'\n        DL = 'DISEL'",
        "detail": "src.shared.enum",
        "documentation": {}
    },
    {
        "label": "TypeMajorationContrat",
        "kind": 6,
        "importPath": "src.shared.enum",
        "description": "src.shared.enum",
        "peekOfCode": "class TypeMajorationContrat(models.TextChoices):\n        TAUX = 'TAUX'\n        MONTANT = 'MONTANT'\nclass Energie(models.TextChoices):\n        ES = 'ESSENCE'\n        DL = 'DISEL'\n        GPL = 'GAZ DE PETROLE LIQUEFIE'\n        EL = 'ELECTRIQUE'\nclass MoyenPaiement(models.TextChoices):\n        CHQ = 'CHÈQUE'",
        "detail": "src.shared.enum",
        "documentation": {}
    },
    {
        "label": "Energie",
        "kind": 6,
        "importPath": "src.shared.enum",
        "description": "src.shared.enum",
        "peekOfCode": "class Energie(models.TextChoices):\n        ES = 'ESSENCE'\n        DL = 'DISEL'\n        GPL = 'GAZ DE PETROLE LIQUEFIE'\n        EL = 'ELECTRIQUE'\nclass MoyenPaiement(models.TextChoices):\n        CHQ = 'CHÈQUE'\n        ESP = 'ESPÈCE'\n        VRMT = 'VIREMENT BANCAIRE'\nclass StatutPaiementSinistre(models.TextChoices):",
        "detail": "src.shared.enum",
        "documentation": {}
    },
    {
        "label": "MoyenPaiement",
        "kind": 6,
        "importPath": "src.shared.enum",
        "description": "src.shared.enum",
        "peekOfCode": "class MoyenPaiement(models.TextChoices):\n        CHQ = 'CHÈQUE'\n        ESP = 'ESPÈCE'\n        VRMT = 'VIREMENT BANCAIRE'\nclass StatutPaiementSinistre(models.TextChoices):\n    ATTENTE = 'EN ATTENTE'\n    ORDONNANCE = 'ORDONNANCE'\n    PAYE = 'PAYE'\nclass TypeBonConsultation(models.TextChoices):\n    AUTO_CARBONE = 'AUTO CARBONE'",
        "detail": "src.shared.enum",
        "documentation": {}
    },
    {
        "label": "StatutPaiementSinistre",
        "kind": 6,
        "importPath": "src.shared.enum",
        "description": "src.shared.enum",
        "peekOfCode": "class StatutPaiementSinistre(models.TextChoices):\n    ATTENTE = 'EN ATTENTE'\n    ORDONNANCE = 'ORDONNANCE'\n    PAYE = 'PAYE'\nclass TypeBonConsultation(models.TextChoices):\n    AUTO_CARBONE = 'AUTO CARBONE'\n    NUMERIQUE = 'NUMERIQUE'\nclass TypeAlerte(models.TextChoices):\n    FILIALE = 'FILIALE'\n    HOLDING = 'HOLDING'",
        "detail": "src.shared.enum",
        "documentation": {}
    },
    {
        "label": "TypeBonConsultation",
        "kind": 6,
        "importPath": "src.shared.enum",
        "description": "src.shared.enum",
        "peekOfCode": "class TypeBonConsultation(models.TextChoices):\n    AUTO_CARBONE = 'AUTO CARBONE'\n    NUMERIQUE = 'NUMERIQUE'\nclass TypeAlerte(models.TextChoices):\n    FILIALE = 'FILIALE'\n    HOLDING = 'HOLDING'\nclass SourceCreationSinistre(models.TextChoices):\n    WEB = 'WEB'\n    MOBILE = 'MOBILE'\n    BACKOFFICE = 'BACKOFFICE'",
        "detail": "src.shared.enum",
        "documentation": {}
    },
    {
        "label": "TypeAlerte",
        "kind": 6,
        "importPath": "src.shared.enum",
        "description": "src.shared.enum",
        "peekOfCode": "class TypeAlerte(models.TextChoices):\n    FILIALE = 'FILIALE'\n    HOLDING = 'HOLDING'\nclass SourceCreationSinistre(models.TextChoices):\n    WEB = 'WEB'\n    MOBILE = 'MOBILE'\n    BACKOFFICE = 'BACKOFFICE'\n    API = 'API'",
        "detail": "src.shared.enum",
        "documentation": {}
    },
    {
        "label": "SourceCreationSinistre",
        "kind": 6,
        "importPath": "src.shared.enum",
        "description": "src.shared.enum",
        "peekOfCode": "class SourceCreationSinistre(models.TextChoices):\n    WEB = 'WEB'\n    MOBILE = 'MOBILE'\n    BACKOFFICE = 'BACKOFFICE'\n    API = 'API'",
        "detail": "src.shared.enum",
        "documentation": {}
    },
    {
        "label": "debug",
        "kind": 2,
        "importPath": "src.shared.helpers",
        "description": "src.shared.helpers",
        "peekOfCode": "def debug(bareme):\n    attributes = vars(bareme)\n    print(\"bareme:{\")\n    for attr, value in attributes.items():\n        print(f\"{attr}: {value}\")\n    print(\"}\")\ndef today_utc():\n    today = datetime.datetime.now(tz=datetime.timezone.utc)\n    return today\ndef as_money(montant):",
        "detail": "src.shared.helpers",
        "documentation": {}
    },
    {
        "label": "today_utc",
        "kind": 2,
        "importPath": "src.shared.helpers",
        "description": "src.shared.helpers",
        "peekOfCode": "def today_utc():\n    today = datetime.datetime.now(tz=datetime.timezone.utc)\n    return today\ndef as_money(montant):\n    if montant == \"\" or montant is None: montant = 0\n    return intcomma(int(montant))\ndef is_jour_ferie(date_jour):\n    jours_feries = JourFerie.objects.filter(date=date_jour)\n    return jours_feries.exists()\ndef get_type_prefinancement_of_acte(acte, formule):",
        "detail": "src.shared.helpers",
        "documentation": {}
    },
    {
        "label": "as_money",
        "kind": 2,
        "importPath": "src.shared.helpers",
        "description": "src.shared.helpers",
        "peekOfCode": "def as_money(montant):\n    if montant == \"\" or montant is None: montant = 0\n    return intcomma(int(montant))\ndef is_jour_ferie(date_jour):\n    jours_feries = JourFerie.objects.filter(date=date_jour)\n    return jours_feries.exists()\ndef get_type_prefinancement_of_acte(acte, formule):\n    type_prefinancement = TypePrefinancement.objects.filter(code='NON_PREF').first()\n    mode_prefinancement = formule.mode_prefinancement\n    if mode_prefinancement:",
        "detail": "src.shared.helpers",
        "documentation": {}
    },
    {
        "label": "is_jour_ferie",
        "kind": 2,
        "importPath": "src.shared.helpers",
        "description": "src.shared.helpers",
        "peekOfCode": "def is_jour_ferie(date_jour):\n    jours_feries = JourFerie.objects.filter(date=date_jour)\n    return jours_feries.exists()\ndef get_type_prefinancement_of_acte(acte, formule):\n    type_prefinancement = TypePrefinancement.objects.filter(code='NON_PREF').first()\n    mode_prefinancement = formule.mode_prefinancement\n    if mode_prefinancement:\n        if mode_prefinancement.code == 'TPG':\n            type_prefinancement = TypePrefinancement.objects.filter(code='PREF_TOUT').first()\n        elif mode_prefinancement.code == 'TPP':",
        "detail": "src.shared.helpers",
        "documentation": {}
    },
    {
        "label": "get_type_prefinancement_of_acte",
        "kind": 2,
        "importPath": "src.shared.helpers",
        "description": "src.shared.helpers",
        "peekOfCode": "def get_type_prefinancement_of_acte(acte, formule):\n    type_prefinancement = TypePrefinancement.objects.filter(code='NON_PREF').first()\n    mode_prefinancement = formule.mode_prefinancement\n    if mode_prefinancement:\n        if mode_prefinancement.code == 'TPG':\n            type_prefinancement = TypePrefinancement.objects.filter(code='PREF_TOUT').first()\n        elif mode_prefinancement.code == 'TPP':\n            # vérifier si la rubrique de l'acte est préfinancé\n            rubrique_of_acte = acte.rubrique\n            rubriques_prefinancees = FormuleRubriquePrefinance.objects.filter(formulegarantie=formule, rubrique=rubrique_of_acte, statut_validite=StatutValidite.VALIDE)",
        "detail": "src.shared.helpers",
        "documentation": {}
    },
    {
        "label": "recalcule_montant_refacture_compagnie_et_client",
        "kind": 2,
        "importPath": "src.shared.helpers",
        "description": "src.shared.helpers",
        "peekOfCode": "def recalcule_montant_refacture_compagnie_et_client(sinistre):\n    if not sinistre.tm_prefinanced:\n        pprint(\"Sinistre non préfinancé\")\n        # mettre à jour le sinistre\n        sinistre.frais_reel_accepte = 0\n        sinistre.depassement_accepte = 0\n        sinistre.part_assure_accepte = 0\n        sinistre.part_compagnie_accepte = 0\n        sinistre.montant_refacture_client = 0\n        sinistre.montant_refacture_compagnie = sinistre.montant_remboursement_accepte",
        "detail": "src.shared.helpers",
        "documentation": {}
    },
    {
        "label": "actes_non_autorises_prescripteur",
        "kind": 2,
        "importPath": "src.shared.helpers",
        "description": "src.shared.helpers",
        "peekOfCode": "def actes_non_autorises_prescripteur(prescripteur, acte):\n    if prescripteur:\n        if acte.specialiste_uniquement and not prescripteur.specialite.is_specialite:\n            return True\n    return False\n    #return not SpecialiteActeAutorise.objects.filter(specialite=prescripteur.specialite, acte=acte).exists()\ndef respecte_conditions(date_survenance, bareme_srb, acte, aliment):\n    cdt_respectee = True\n    #A corriger avec gpt\n    #si la date_survenance est compris entre la date début et la date fin du barème",
        "detail": "src.shared.helpers",
        "documentation": {}
    },
    {
        "label": "respecte_conditions",
        "kind": 2,
        "importPath": "src.shared.helpers",
        "description": "src.shared.helpers",
        "peekOfCode": "def respecte_conditions(date_survenance, bareme_srb, acte, aliment):\n    cdt_respectee = True\n    #A corriger avec gpt\n    #si la date_survenance est compris entre la date début et la date fin du barème\n    #if bareme_srb.date_debut__isnull or bareme_srb.date_debut__gt == date_survenance:\n    if not bareme_srb.date_debut:\n        cdt_respectee = False\n        pprint(\"date début non renseignée\")\n    if bareme_srb.date_debut and bareme_srb.date_debut > date_survenance.date():\n        cdt_respectee = False",
        "detail": "src.shared.helpers",
        "documentation": {}
    },
    {
        "label": "filtrer_selon_lien_parente_et_age",
        "kind": 2,
        "importPath": "src.shared.helpers",
        "description": "src.shared.helpers",
        "peekOfCode": "def filtrer_selon_lien_parente_et_age(baremes, aliment):\n    pprint(\"Fonction de filtrage des baremes selon le lien de parenté et l'age de l'aliment\")\n    pprint(\"baremes\")\n    pprint(baremes)\n    pprint(\"aliment\")\n    pprint(aliment)\n    #\n    selected_bareme = None\n    pprint(\"Filtrer sur le lien de parenté, puis sur l'age min et sur l'age max\")\n    # filtrer les baremes_selon_acte trouvés selon le lien de parente",
        "detail": "src.shared.helpers",
        "documentation": {}
    },
    {
        "label": "get_plafond_rubrique",
        "kind": 2,
        "importPath": "src.shared.helpers",
        "description": "src.shared.helpers",
        "peekOfCode": "def get_plafond_rubrique(acte, aliment, formule, date_survenance):\n    pprint(\"Récupérer le plafond rubrique en recherchant une autre ligne de barème spécifique\")\n    # définir une variable critères sur les dates de façon générale\n    criteres_dates = Q(date_debut__lte=date_survenance) & (Q(date_fin__gte=date_survenance) | Q(date_fin__isnull=True))\n    # Vérifier si la rubrique est dans les spécificités\n    baremes_rubrique = Bareme.objects.filter(\n        Q(statut=Statut.ACTIF, formulegarantie_id=formule.id, rubrique_id=acte.rubrique.id, sous_rubrique_id__isnull=True,\n          regroupement_acte_id__isnull=True, acte_id__isnull=True) & criteres_dates)\n    if baremes_rubrique:\n        # si une seule ligne",
        "detail": "src.shared.helpers",
        "documentation": {}
    },
    {
        "label": "get_plafond_sous_rubrique",
        "kind": 2,
        "importPath": "src.shared.helpers",
        "description": "src.shared.helpers",
        "peekOfCode": "def get_plafond_sous_rubrique(acte, aliment, date_survenance):\n    criteres_dates = Q(date_debut__lte=date_survenance) & (Q(date_fin__gte=date_survenance) | Q(date_fin__isnull=True))\n    return 0\ndef get_plafond_regroupement_acte(acte, aliment, formule, date_survenance):\n    pprint(\"Récupérer le plafond du regroupement d'acte en recherchant une autre ligne de barème spécifique\")\n    criteres_dates = Q(date_debut__lte=date_survenance) & (Q(date_fin__gte=date_survenance) | Q(date_fin__isnull=True))\n    plafond_regroupement_acte = 0\n    # vérifier si le regroupement_acte est dans les spécificités (SANS ACTE)\n    if acte.regroupement_acte:\n        baremes_regroupement_acte = Bareme.objects.filter(",
        "detail": "src.shared.helpers",
        "documentation": {}
    },
    {
        "label": "get_plafond_regroupement_acte",
        "kind": 2,
        "importPath": "src.shared.helpers",
        "description": "src.shared.helpers",
        "peekOfCode": "def get_plafond_regroupement_acte(acte, aliment, formule, date_survenance):\n    pprint(\"Récupérer le plafond du regroupement d'acte en recherchant une autre ligne de barème spécifique\")\n    criteres_dates = Q(date_debut__lte=date_survenance) & (Q(date_fin__gte=date_survenance) | Q(date_fin__isnull=True))\n    plafond_regroupement_acte = 0\n    # vérifier si le regroupement_acte est dans les spécificités (SANS ACTE)\n    if acte.regroupement_acte:\n        baremes_regroupement_acte = Bareme.objects.filter(\n            Q(statut=Statut.ACTIF, formulegarantie_id=formule.id, regroupement_acte_id=acte.regroupement_acte_id,\n              acte_id__isnull=True) & criteres_dates)\n        if baremes_regroupement_acte:",
        "detail": "src.shared.helpers",
        "documentation": {}
    },
    {
        "label": "get_tarif_acte_from_bareme",
        "kind": 2,
        "importPath": "src.shared.helpers",
        "description": "src.shared.helpers",
        "peekOfCode": "def get_tarif_acte_from_bareme(type_priseencharge_code, date_survenance, acte_id, prestataire_id, prescripteur_id,\n                               aliment_id, cout_acte, quantite, consommation_individuelle, consommation_famille, session_pec=None):\n    #utiliser les transactions\n    with transaction.atomic():\n        print(\"***** LES VARIABLES D'ENTREE *****\")\n        print(\"- type_priseencharge_code: \" + str(type_priseencharge_code))\n        print(\"- date_survenance: \" + str(date_survenance))\n        print(\"- acte_id: \" + str(acte_id))\n        print(\"- prestataire_id: \" + str(prestataire_id))\n        print(\"- prescripteur_id: \" + str(prescripteur_id))",
        "detail": "src.shared.helpers",
        "documentation": {}
    },
    {
        "label": "get_exel_df_to_dict",
        "kind": 2,
        "importPath": "src.shared.helpers",
        "description": "src.shared.helpers",
        "peekOfCode": "def get_exel_df_to_dict(file_pah, sheet_name, search_colum, search_value):\n    try:\n        # lire le fichier excel\n        df = pd.read_excel(file_pah, sheet_name=sheet_name)\n        # print(df)\n        # filtrer les données\n        df = df[df[search_colum] == search_value]\n        # print(df)\n        # convertir en dictionnaire\n        data = df.to_dict()",
        "detail": "src.shared.helpers",
        "documentation": {}
    },
    {
        "label": "render_pdf",
        "kind": 2,
        "importPath": "src.shared.helpers",
        "description": "src.shared.helpers",
        "peekOfCode": "def render_pdf(template_src, context_dict={}):\n    pprint(\"::: render_pdf :::\")\n    pprint(\"@@@@@@@@@@ render_pdf_view @@@@@@@\")\n    template_path = template_src\n    context = context_dict\n    # Create a Django response object, and specify content_type as pdf\n    response = BytesIO()\n    # find the template and render it.\n    template = get_template(template_path)\n    html = template.render(context)",
        "detail": "src.shared.helpers",
        "documentation": {}
    },
    {
        "label": "get_file_as_base64",
        "kind": 2,
        "importPath": "src.shared.helpers",
        "description": "src.shared.helpers",
        "peekOfCode": "def get_file_as_base64(file_url):\n    try:\n        print(f\"Fetching file from URL: {file_url}\")\n        # Fetch the file content from the URL\n        response = requests.get(file_url)\n        response.raise_for_status()  # Raise an error for bad responses\n        # Read the content and encode it as Base64\n        file_content = response.content\n        base64_encoded = base64.b64encode(file_content).decode('utf-8')\n        # Return the Base64 encoded string",
        "detail": "src.shared.helpers",
        "documentation": {}
    },
    {
        "label": "fetch_resources",
        "kind": 2,
        "importPath": "src.shared.helpers",
        "description": "src.shared.helpers",
        "peekOfCode": "def fetch_resources(uri, rel):\n    if uri.startswith('http') or uri.startswith('https'):\n        response = requests.get(uri, stream=True)\n        if response.status_code == 200:\n            # Renvoie les données de l'image si l'URL est correcte\n            return response.content\n    return None\ndef link_callback(uri, rel):\n    pprint(\"link_callback\")\n    pprint(uri)",
        "detail": "src.shared.helpers",
        "documentation": {}
    },
    {
        "label": "link_callback",
        "kind": 2,
        "importPath": "src.shared.helpers",
        "description": "src.shared.helpers",
        "peekOfCode": "def link_callback(uri, rel):\n    pprint(\"link_callback\")\n    pprint(uri)\n    \"\"\"\n    Convert HTML URIs to absolute system paths so xhtml2pdf can access those\n    resources\n    \"\"\"\n    result = finders.find(uri)\n    if result:\n        if not isinstance(result, (list, tuple)):",
        "detail": "src.shared.helpers",
        "documentation": {}
    },
    {
        "label": "fetch_resources",
        "kind": 2,
        "importPath": "src.shared.helpers",
        "description": "src.shared.helpers",
        "peekOfCode": "def fetch_resources(uri, rel):\n    if uri.startswith('http') or uri.startswith('https'):\n        response = requests.get(uri, stream=True)\n        if response.status_code == 200:\n            # Renvoie les données de l'image si l'URL est correcte\n            return response.content\n    return None\ndef api_send_sms(message, destinataires):\n    uri = \"https://app.nerhysms.com/api/send\"\n    data = {",
        "detail": "src.shared.helpers",
        "documentation": {}
    },
    {
        "label": "api_send_sms",
        "kind": 2,
        "importPath": "src.shared.helpers",
        "description": "src.shared.helpers",
        "peekOfCode": "def api_send_sms(message, destinataires):\n    uri = \"https://app.nerhysms.com/api/send\"\n    data = {\n        \"from\": \"INOV\",\n        \"content\": message,\n        \"to\": destinataires\n    }\n    headers = {\n        \"Accept\": \"application/json\",\n        \"Content-Type\": \"application/json\",",
        "detail": "src.shared.helpers",
        "documentation": {}
    },
    {
        "label": "generer_qrcode_carte",
        "kind": 2,
        "importPath": "src.shared.helpers",
        "description": "src.shared.helpers",
        "peekOfCode": "def generer_qrcode_carte(numero_carte):\n    qr = qrcode.QRCode(box_size=10, border=1)\n    qr.add_data(numero_carte)\n    qr.make()\n    img = qr.make_image()\n    # Convert PIL Image to Bytes\n    image_bytes = BytesIO()\n    img.save(image_bytes, format='PNG')\n    image_bytes.seek(0)\n    return File(image_bytes)",
        "detail": "src.shared.helpers",
        "documentation": {}
    },
    {
        "label": "generate_numero_famille",
        "kind": 2,
        "importPath": "src.shared.helpers",
        "description": "src.shared.helpers",
        "peekOfCode": "def generate_numero_famille():\n    current_date = datetime.datetime.now(tz=datetime.timezone.utc)\n    year_part = str(current_date.year)[2:]\n    month_part = f\"{current_date.month:02d}\"\n    period = f\"{month_part}{year_part}\" # Exemple '1223' Quand on est dans la period de decembre 2023\n    # On trouve le nombre actuelle a incrementer\n    nombre_distinct_numero_famille = Aliment.objects.filter(numero_famille__endswith=period).values('numero_famille').distinct().count()\n    current_number = nombre_distinct_numero_famille + 1 # On incremente pour prendre le numero suivant\n    numero_famille = f\"F{current_number:03d}{month_part}{year_part}\"\n    return numero_famille",
        "detail": "src.shared.helpers",
        "documentation": {}
    },
    {
        "label": "generate_numero_famille_for_existing_aliment",
        "kind": 2,
        "importPath": "src.shared.helpers",
        "description": "src.shared.helpers",
        "peekOfCode": "def generate_numero_famille_for_existing_aliment(aliment):\n    date_reference = aliment.date_affiliation\n    year_part = str(date_reference.year)[2:]\n    month_part = f\"{date_reference.month:02d}\"\n    period = f\"{month_part}{year_part}\"  # Exemple '1223' Quand on est dans la period de decembre 2023\n    # On trouve le nombre actuelle a incrementer\n    nombre_distinct_numero_famille = Aliment.objects.filter(numero_famille__endswith=period).values('numero_famille').distinct().count()\n    current_number = nombre_distinct_numero_famille + 1  # On incremente pour prendre le numero suivant\n    numero_famille = f\"F{current_number:03d}{month_part}{year_part}\"\n    return numero_famille",
        "detail": "src.shared.helpers",
        "documentation": {}
    },
    {
        "label": "generer_numero_ordre",
        "kind": 2,
        "importPath": "src.shared.helpers",
        "description": "src.shared.helpers",
        "peekOfCode": "def generer_numero_ordre(aliment):\n    numero_ordre = Aliment.objects.filter(adherent_principal=aliment.adherent_principal).count() #pas necessaire de faire + 1 puisqu'il a été déjà enregistré, il est compté\n    return numero_ordre\ndef generer_nombre_famille_du_mois():\n    today = datetime.datetime.now(tz=timezone.utc)\n    #nombre_famille_du_mois = Aliment.objects.filter(qualite_beneficiaire__code=\"AD\", date_affiliation__month=today.month, date_affiliation__year=today.year).count() + 1\n    nombre_famille_du_mois = Aliment.objects.filter(qualite_beneficiaire__code=\"AD\", created_at__month=today.month, created_at__year=today.year).count() + 1\n    print(\"nombre_famille_du_mois\")\n    print(nombre_famille_du_mois)\n    return nombre_famille_du_mois",
        "detail": "src.shared.helpers",
        "documentation": {}
    },
    {
        "label": "generer_nombre_famille_du_mois",
        "kind": 2,
        "importPath": "src.shared.helpers",
        "description": "src.shared.helpers",
        "peekOfCode": "def generer_nombre_famille_du_mois():\n    today = datetime.datetime.now(tz=timezone.utc)\n    #nombre_famille_du_mois = Aliment.objects.filter(qualite_beneficiaire__code=\"AD\", date_affiliation__month=today.month, date_affiliation__year=today.year).count() + 1\n    nombre_famille_du_mois = Aliment.objects.filter(qualite_beneficiaire__code=\"AD\", created_at__month=today.month, created_at__year=today.year).count() + 1\n    print(\"nombre_famille_du_mois\")\n    print(nombre_famille_du_mois)\n    return nombre_famille_du_mois\ndef generer_nombre_famille_du_mois_for_existing_aliment(aliment):\n    date_reference = aliment.date_affiliation\n    print(aliment)",
        "detail": "src.shared.helpers",
        "documentation": {}
    },
    {
        "label": "generer_nombre_famille_du_mois_for_existing_aliment",
        "kind": 2,
        "importPath": "src.shared.helpers",
        "description": "src.shared.helpers",
        "peekOfCode": "def generer_nombre_famille_du_mois_for_existing_aliment(aliment):\n    date_reference = aliment.date_affiliation\n    print(aliment)\n    print(date_reference)\n    nombre_famille_du_mois = Aliment.objects.filter(qualite_beneficiaire__code=\"AD\", date_affiliation__month=date_reference.month, date_affiliation__year=date_reference.year,  id__lte=aliment.id).count() + 1\n    print(\"nombre_famille_du_mois\")\n    print(nombre_famille_du_mois)\n    return nombre_famille_du_mois\ndef generate_numero_carte(aliment):\n    # Nomenclature: X-NOMBRE_FAMILLE_DU_MOIS-MMAA-A*.  exemple: 1-00001-1223-A",
        "detail": "src.shared.helpers",
        "documentation": {}
    },
    {
        "label": "generate_numero_carte",
        "kind": 2,
        "importPath": "src.shared.helpers",
        "description": "src.shared.helpers",
        "peekOfCode": "def generate_numero_carte(aliment):\n    # Nomenclature: X-NOMBRE_FAMILLE_DU_MOIS-MMAA-A*.  exemple: 1-00001-1223-A\n    # nouvelle nomenclature : 7 caract auto incrément, annee\n    today = datetime.datetime.now(tz=timezone.utc)\n    annee = str(today.year)[2:]\n    mois = f\"{today.month:02d}\"\n    # vérifier s'il a déjà une carte\n    carte_precedente = Carte.objects.filter(aliment=aliment, numero__isnull=False).order_by('-id').first()\n    if carte_precedente:\n        # récupérer le dernier caractère",
        "detail": "src.shared.helpers",
        "documentation": {}
    },
    {
        "label": "bool_plafond_atteint",
        "kind": 2,
        "importPath": "src.shared.helpers",
        "description": "src.shared.helpers",
        "peekOfCode": "def bool_plafond_atteint(dossier_sinistre):\n    plafond_atteint = False\n    formule = dossier_sinistre.formulegarantie\n    if formule:\n        # récupérer ses consommations individuel et par famille\n        periode_couverture_encours = formule.police.periode_couverture_encours_atdate(dossier_sinistre.date_survenance)\n        consommation_individuelle = Sinistre.objects.filter(periode_couverture_id=periode_couverture_encours.pk,\n                                                            aliment_id=dossier_sinistre.aliment.id,\n                                                            statut=StatutSinistre.ACCORDE,\n                                                            statut_remboursement__in=[StatutRemboursement.ATTENTE, StatutRemboursement.DEMANDE, StatutRemboursement.ACCEPTE, StatutRemboursement.ACCEPTE_PARTIELLEMENT],",
        "detail": "src.shared.helpers",
        "documentation": {}
    },
    {
        "label": "get_ticket_moderateur_pharmacie",
        "kind": 2,
        "importPath": "src.shared.helpers",
        "description": "src.shared.helpers",
        "peekOfCode": "def get_ticket_moderateur_pharmacie(aliment_id, formulegarantie_id, date_survenance):\n    aliment = Aliment.objects.filter(id=aliment_id).first()\n    formulegarantie = FormuleGarantie.objects.filter(id=formulegarantie_id).first()\n    tc_generale = formulegarantie.taux_couverture\n    tc = 0\n    # vérifier si l'acte est dans les spécificités (et que c'est garanti)\n    criteres_regroupement_acte = Q(Q(regroupement_acte__isnull=True) | Q(regroupement_acte__code='RAPHAR0020'))#pharmacie usuelle\n    criteres_dates = Q(date_debut__lte=date_survenance) & (Q(date_fin__gte=date_survenance) | Q(date_fin__isnull=True))\n    baremes = Bareme.objects.filter(Q(statut=Statut.ACTIF, formulegarantie_id=formulegarantie.id,\n                                      rubrique__code='PHARMACIE',",
        "detail": "src.shared.helpers",
        "documentation": {}
    },
    {
        "label": "respecte_conditions_bareme_pharmacie",
        "kind": 2,
        "importPath": "src.shared.helpers",
        "description": "src.shared.helpers",
        "peekOfCode": "def respecte_conditions_bareme_pharmacie(date_survenance, bareme_srb, aliment):\n    cdt_respectee = True\n    pprint(\"Véficiation du barème #\")\n    #si la date_survenance est compris entre la date début et la date fin du barème\n    if not bareme_srb.date_debut:\n        cdt_respectee = False\n        pprint(\"date début non renseignée\")\n    if bareme_srb.date_debut and bareme_srb.date_debut > date_survenance.date():\n        cdt_respectee = False\n        pprint(\"date début du barème plus grand que la date de survenance du sinistre\")",
        "detail": "src.shared.helpers",
        "documentation": {}
    },
    {
        "label": "generate_random_string",
        "kind": 2,
        "importPath": "src.shared.helpers",
        "description": "src.shared.helpers",
        "peekOfCode": "def generate_random_string(length=12):\n    \"\"\"\n    Generate a random string of specified length using secure random choice.\n    \"\"\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"\n    random_string = ''.join(secrets.choice(alphabet) for _ in range(length))\n    return random_string\ndef custom_model_to_dict(instance, fields=None, exclude=None):\n    data = model_to_dict(instance, fields=fields, exclude=exclude)\n    for key, value in data.items():",
        "detail": "src.shared.helpers",
        "documentation": {}
    },
    {
        "label": "custom_model_to_dict",
        "kind": 2,
        "importPath": "src.shared.helpers",
        "description": "src.shared.helpers",
        "peekOfCode": "def custom_model_to_dict(instance, fields=None, exclude=None):\n    data = model_to_dict(instance, fields=fields, exclude=exclude)\n    for key, value in data.items():\n        if isinstance(value, (datetime, datetime.date)):\n            data[key] = value.strftime('%Y-%m-%d %H:%M:%S') if isinstance(value, datetime) else value.strftime('%Y-%m-%d')\n    return data\ndef openai_complete():\n    pprint(\"openai_complete\")",
        "detail": "src.shared.helpers",
        "documentation": {}
    },
    {
        "label": "openai_complete",
        "kind": 2,
        "importPath": "src.shared.helpers",
        "description": "src.shared.helpers",
        "peekOfCode": "def openai_complete():\n    pprint(\"openai_complete\")",
        "detail": "src.shared.helpers",
        "documentation": {}
    },
    {
        "label": "debug",
        "kind": 2,
        "importPath": "src.shared.helpers_old_03022024",
        "description": "src.shared.helpers_old_03022024",
        "peekOfCode": "def debug(bareme):\n    attributes = vars(bareme)\n    print(\"bareme:{\")\n    for attr, value in attributes.items():\n        print(f\"{attr}: {value}\")\n    print(\"}\")\ndef today_utc():\n    today = datetime.datetime.now(tz=datetime.timezone.utc)\n    return today\ndef as_money(montant):",
        "detail": "src.shared.helpers_old_03022024",
        "documentation": {}
    },
    {
        "label": "today_utc",
        "kind": 2,
        "importPath": "src.shared.helpers_old_03022024",
        "description": "src.shared.helpers_old_03022024",
        "peekOfCode": "def today_utc():\n    today = datetime.datetime.now(tz=datetime.timezone.utc)\n    return today\ndef as_money(montant):\n    if montant == \"\" or montant is None: montant = 0\n    return intcomma(int(montant))\ndef is_jour_ferie(date_jour):\n    jours_feries = JourFerie.objects.filter(date=date_jour)\n    return jours_feries.exists()\ndef actes_non_autorises_prescripteur(prescripteur, acte):",
        "detail": "src.shared.helpers_old_03022024",
        "documentation": {}
    },
    {
        "label": "as_money",
        "kind": 2,
        "importPath": "src.shared.helpers_old_03022024",
        "description": "src.shared.helpers_old_03022024",
        "peekOfCode": "def as_money(montant):\n    if montant == \"\" or montant is None: montant = 0\n    return intcomma(int(montant))\ndef is_jour_ferie(date_jour):\n    jours_feries = JourFerie.objects.filter(date=date_jour)\n    return jours_feries.exists()\ndef actes_non_autorises_prescripteur(prescripteur, acte):\n    if prescripteur:\n        if acte.specialiste_uniquement and not prescripteur.specialite.is_specialite:\n            return True",
        "detail": "src.shared.helpers_old_03022024",
        "documentation": {}
    },
    {
        "label": "is_jour_ferie",
        "kind": 2,
        "importPath": "src.shared.helpers_old_03022024",
        "description": "src.shared.helpers_old_03022024",
        "peekOfCode": "def is_jour_ferie(date_jour):\n    jours_feries = JourFerie.objects.filter(date=date_jour)\n    return jours_feries.exists()\ndef actes_non_autorises_prescripteur(prescripteur, acte):\n    if prescripteur:\n        if acte.specialiste_uniquement and not prescripteur.specialite.is_specialite:\n            return True\n    return False\n    #return not SpecialiteActeAutorise.objects.filter(specialite=prescripteur.specialite, acte=acte).exists()\ndef respecte_conditions(date_survenance, bareme_srb, acte, aliment):",
        "detail": "src.shared.helpers_old_03022024",
        "documentation": {}
    },
    {
        "label": "actes_non_autorises_prescripteur",
        "kind": 2,
        "importPath": "src.shared.helpers_old_03022024",
        "description": "src.shared.helpers_old_03022024",
        "peekOfCode": "def actes_non_autorises_prescripteur(prescripteur, acte):\n    if prescripteur:\n        if acte.specialiste_uniquement and not prescripteur.specialite.is_specialite:\n            return True\n    return False\n    #return not SpecialiteActeAutorise.objects.filter(specialite=prescripteur.specialite, acte=acte).exists()\ndef respecte_conditions(date_survenance, bareme_srb, acte, aliment):\n    cdt_respectee = True\n    #A corriger avec gpt\n    #si la date_survenance est compris entre la date début et la date fin du barème",
        "detail": "src.shared.helpers_old_03022024",
        "documentation": {}
    },
    {
        "label": "respecte_conditions",
        "kind": 2,
        "importPath": "src.shared.helpers_old_03022024",
        "description": "src.shared.helpers_old_03022024",
        "peekOfCode": "def respecte_conditions(date_survenance, bareme_srb, acte, aliment):\n    cdt_respectee = True\n    #A corriger avec gpt\n    #si la date_survenance est compris entre la date début et la date fin du barème\n    #if bareme_srb.date_debut__isnull or bareme_srb.date_debut__gt == date_survenance:\n    if not bareme_srb.date_debut:\n        cdt_respectee = False\n        pprint(\"date début non renseignée\")\n    if bareme_srb.date_debut and bareme_srb.date_debut > date_survenance.date():\n        cdt_respectee = False",
        "detail": "src.shared.helpers_old_03022024",
        "documentation": {}
    },
    {
        "label": "filtrer_selon_lien_parente_et_age",
        "kind": 2,
        "importPath": "src.shared.helpers_old_03022024",
        "description": "src.shared.helpers_old_03022024",
        "peekOfCode": "def filtrer_selon_lien_parente_et_age(baremes, aliment):\n    pprint(\"Fonction de filtrage des baremes selon le lien de parenté et l'age de l'aliment\")\n    #\n    selected_bareme = None\n    pprint(\"Filtrer sur le lien de parenté, puis sur l'age min et sur l'age max\")\n    # filtrer les baremes_selon_acte trouvés selon le lien de parente\n    baremes_selon_lien_parente = [b for b in baremes if b.qualite_beneficiaire_id == aliment.qualite_beneficiaire.id]\n    pprint(\"baremes_selon_lien_parente\")\n    pprint(len(baremes_selon_lien_parente))\n    pprint(baremes_selon_lien_parente)",
        "detail": "src.shared.helpers_old_03022024",
        "documentation": {}
    },
    {
        "label": "get_plafond_rubrique",
        "kind": 2,
        "importPath": "src.shared.helpers_old_03022024",
        "description": "src.shared.helpers_old_03022024",
        "peekOfCode": "def get_plafond_rubrique(acte, aliment, formule, date_survenance):\n    pprint(\"Récupérer le plafond rubrique en recherchant une autre ligne de barème spécifique\")\n    # définir une variable critères sur les dates de façon générale\n    criteres_dates = Q(date_debut__lte=date_survenance) & (Q(date_fin__gte=date_survenance) | Q(date_fin__isnull=True))\n    # Vérifier si la rubrique est dans les spécificités\n    baremes_rubrique = Bareme.objects.filter(\n        Q(formulegarantie_id=formule.id, rubrique_id=acte.rubrique.id, sous_rubrique_id__isnull=True,\n          regroupement_acte_id__isnull=True, acte_id__isnull=True) & criteres_dates)\n    if baremes_rubrique:\n        # si une seule ligne",
        "detail": "src.shared.helpers_old_03022024",
        "documentation": {}
    },
    {
        "label": "get_plafond_sous_rubrique",
        "kind": 2,
        "importPath": "src.shared.helpers_old_03022024",
        "description": "src.shared.helpers_old_03022024",
        "peekOfCode": "def get_plafond_sous_rubrique(acte, aliment, date_survenance):\n    criteres_dates = Q(date_debut__lte=date_survenance) & (Q(date_fin__gte=date_survenance) | Q(date_fin__isnull=True))\n    return 0\ndef get_plafond_regroupement_acte(acte, aliment, formule, date_survenance):\n    pprint(\"Récupérer le plafond du regroupement d'acte en recherchant une autre ligne de barème spécifique\")\n    criteres_dates = Q(date_debut__lte=date_survenance) & (Q(date_fin__gte=date_survenance) | Q(date_fin__isnull=True))\n    plafond_regroupement_acte = 0\n    # vérifier si le regroupement_acte est dans les spécificités (SANS ACTE)\n    if acte.regroupement_acte:\n        baremes_regroupement_acte = Bareme.objects.filter(",
        "detail": "src.shared.helpers_old_03022024",
        "documentation": {}
    },
    {
        "label": "get_plafond_regroupement_acte",
        "kind": 2,
        "importPath": "src.shared.helpers_old_03022024",
        "description": "src.shared.helpers_old_03022024",
        "peekOfCode": "def get_plafond_regroupement_acte(acte, aliment, formule, date_survenance):\n    pprint(\"Récupérer le plafond du regroupement d'acte en recherchant une autre ligne de barème spécifique\")\n    criteres_dates = Q(date_debut__lte=date_survenance) & (Q(date_fin__gte=date_survenance) | Q(date_fin__isnull=True))\n    plafond_regroupement_acte = 0\n    # vérifier si le regroupement_acte est dans les spécificités (SANS ACTE)\n    if acte.regroupement_acte:\n        baremes_regroupement_acte = Bareme.objects.filter(\n            Q(formulegarantie_id=formule.id, regroupement_acte_id=acte.regroupement_acte_id,\n              acte_id__isnull=True) & criteres_dates)\n        if baremes_regroupement_acte:",
        "detail": "src.shared.helpers_old_03022024",
        "documentation": {}
    },
    {
        "label": "get_tarif_acte_from_bareme",
        "kind": 2,
        "importPath": "src.shared.helpers_old_03022024",
        "description": "src.shared.helpers_old_03022024",
        "peekOfCode": "def get_tarif_acte_from_bareme(type_priseencharge_code, date_survenance, acte_id, prestataire_id, prescripteur_id,\n                               aliment_id, cout_acte, quantite, consommation_individuelle, consommation_famille, session_pec=None):\n    #utiliser les transactions\n    with transaction.atomic():\n        print(\"***** LES VARIABLES D'ENTREE *****\")\n        print(\"- type_priseencharge_code: \" + str(type_priseencharge_code))\n        print(\"- date_survenance: \" + str(date_survenance))\n        print(\"- acte_id: \" + str(acte_id))\n        print(\"- prestataire_id: \" + str(prestataire_id))\n        print(\"- prescripteur_id: \" + str(prescripteur_id))",
        "detail": "src.shared.helpers_old_03022024",
        "documentation": {}
    },
    {
        "label": "get_exel_df_to_dict",
        "kind": 2,
        "importPath": "src.shared.helpers_old_03022024",
        "description": "src.shared.helpers_old_03022024",
        "peekOfCode": "def get_exel_df_to_dict(file_pah, sheet_name, search_colum, search_value):\n    try:\n        # lire le fichier excel\n        df = pd.read_excel(file_pah, sheet_name=sheet_name)\n        # print(df)\n        # filtrer les données\n        df = df[df[search_colum] == search_value]\n        # print(df)\n        # convertir en dictionnaire\n        data = df.to_dict()",
        "detail": "src.shared.helpers_old_03022024",
        "documentation": {}
    },
    {
        "label": "render_pdf",
        "kind": 2,
        "importPath": "src.shared.helpers_old_03022024",
        "description": "src.shared.helpers_old_03022024",
        "peekOfCode": "def render_pdf(template_src, context_dict={}):\n    print(\"@@@@@@@@@@ render_pdf_view @@@@@@@\")\n    template_path = template_src\n    context = context_dict\n    # Create a Django response object, and specify content_type as pdf\n    response = BytesIO()\n    # find the template and render it.\n    template = get_template(template_path)\n    html = template.render(context)\n    # create a pdf",
        "detail": "src.shared.helpers_old_03022024",
        "documentation": {}
    },
    {
        "label": "link_callback",
        "kind": 2,
        "importPath": "src.shared.helpers_old_03022024",
        "description": "src.shared.helpers_old_03022024",
        "peekOfCode": "def link_callback(uri, rel):\n    \"\"\"\n    Convert HTML URIs to absolute system paths so xhtml2pdf can access those\n    resources\n    \"\"\"\n    result = finders.find(uri)\n    if result:\n        if not isinstance(result, (list, tuple)):\n            result = [result]\n        result = list(os.path.realpath(path) for path in result)",
        "detail": "src.shared.helpers_old_03022024",
        "documentation": {}
    },
    {
        "label": "api_send_sms",
        "kind": 2,
        "importPath": "src.shared.helpers_old_03022024",
        "description": "src.shared.helpers_old_03022024",
        "peekOfCode": "def api_send_sms(message, destinataires):\n    uri = \"https://app.nerhysms.com/api/send\"\n    data = {\n        \"from\": \"INOV\",\n        \"content\": message,\n        \"to\": destinataires\n    }\n    headers = {\n        \"Accept\": \"application/json\",\n        \"Content-Type\": \"application/json\",",
        "detail": "src.shared.helpers_old_03022024",
        "documentation": {}
    },
    {
        "label": "generer_qrcode_carte",
        "kind": 2,
        "importPath": "src.shared.helpers_old_03022024",
        "description": "src.shared.helpers_old_03022024",
        "peekOfCode": "def generer_qrcode_carte(numero_carte):\n    qr = qrcode.QRCode(box_size=10, border=1)\n    qr.add_data(numero_carte)\n    qr.make()\n    img = qr.make_image()\n    # Convert PIL Image to Bytes\n    image_bytes = BytesIO()\n    img.save(image_bytes, format='PNG')\n    image_bytes.seek(0)\n    return File(image_bytes)",
        "detail": "src.shared.helpers_old_03022024",
        "documentation": {}
    },
    {
        "label": "generate_numero_famille",
        "kind": 2,
        "importPath": "src.shared.helpers_old_03022024",
        "description": "src.shared.helpers_old_03022024",
        "peekOfCode": "def generate_numero_famille():\n    current_date = datetime.datetime.now(tz=datetime.timezone.utc)\n    year_part = str(current_date.year)[2:]\n    month_part = f\"{current_date.month:02d}\"\n    period = f\"{month_part}{year_part}\" # Exemple '1223' Quand on est dans la period de decembre 2023\n    # On trouve le nombre actuelle a incrementer\n    nombre_distinct_numero_famille = Aliment.objects.filter(numero_famille__endswith=period).values('numero_famille').distinct().count()\n    current_number = nombre_distinct_numero_famille + 1 # On incremente pour prendre le numero suivant\n    numero_famille = f\"F{current_number:03d}{month_part}{year_part}\"\n    return numero_famille",
        "detail": "src.shared.helpers_old_03022024",
        "documentation": {}
    },
    {
        "label": "generate_numero_famille_for_existing_aliment",
        "kind": 2,
        "importPath": "src.shared.helpers_old_03022024",
        "description": "src.shared.helpers_old_03022024",
        "peekOfCode": "def generate_numero_famille_for_existing_aliment(aliment):\n    date_reference = aliment.date_affiliation\n    year_part = str(date_reference.year)[2:]\n    month_part = f\"{date_reference.month:02d}\"\n    period = f\"{month_part}{year_part}\"  # Exemple '1223' Quand on est dans la period de decembre 2023\n    # On trouve le nombre actuelle a incrementer\n    nombre_distinct_numero_famille = Aliment.objects.filter(numero_famille__endswith=period).values(\n        'numero_famille').distinct().count()\n    current_number = nombre_distinct_numero_famille + 1  # On incremente pour prendre le numero suivant\n    numero_famille = f\"F{current_number:03d}{month_part}{year_part}\"",
        "detail": "src.shared.helpers_old_03022024",
        "documentation": {}
    },
    {
        "label": "generer_numero_ordre",
        "kind": 2,
        "importPath": "src.shared.helpers_old_03022024",
        "description": "src.shared.helpers_old_03022024",
        "peekOfCode": "def generer_numero_ordre(aliment):\n    numero_ordre = Aliment.objects.filter(adherent_principal=aliment.adherent_principal).count() #pas necessaire de faire + 1 puisqu'il a été déjà enregistré, il est compté\n    return numero_ordre\ndef generer_nombre_famille_du_mois():\n    today = datetime.datetime.now(tz=timezone.utc)\n    nombre_famille_du_mois = Aliment.objects.filter(qualite_beneficiaire__code=\"AD\", date_affiliation__month=today.month, date_affiliation__year=today.year).count() + 1\n    print(\"nombre_famille_du_mois\")\n    print(nombre_famille_du_mois)\n    return nombre_famille_du_mois\ndef generate_numero_carte(aliment):",
        "detail": "src.shared.helpers_old_03022024",
        "documentation": {}
    },
    {
        "label": "generer_nombre_famille_du_mois",
        "kind": 2,
        "importPath": "src.shared.helpers_old_03022024",
        "description": "src.shared.helpers_old_03022024",
        "peekOfCode": "def generer_nombre_famille_du_mois():\n    today = datetime.datetime.now(tz=timezone.utc)\n    nombre_famille_du_mois = Aliment.objects.filter(qualite_beneficiaire__code=\"AD\", date_affiliation__month=today.month, date_affiliation__year=today.year).count() + 1\n    print(\"nombre_famille_du_mois\")\n    print(nombre_famille_du_mois)\n    return nombre_famille_du_mois\ndef generate_numero_carte(aliment):\n    # Nomenclature: X-NOMBRE_FAMILLE_DU_MOIS-MMAA-A*.  exemple: 1-00001-1223-A\n    today = datetime.datetime.now(tz=timezone.utc)\n    annee = str(today.year)[2:]",
        "detail": "src.shared.helpers_old_03022024",
        "documentation": {}
    },
    {
        "label": "generate_numero_carte",
        "kind": 2,
        "importPath": "src.shared.helpers_old_03022024",
        "description": "src.shared.helpers_old_03022024",
        "peekOfCode": "def generate_numero_carte(aliment):\n    # Nomenclature: X-NOMBRE_FAMILLE_DU_MOIS-MMAA-A*.  exemple: 1-00001-1223-A\n    today = datetime.datetime.now(tz=timezone.utc)\n    annee = str(today.year)[2:]\n    mois = f\"{today.month:02d}\"\n    # vérifier s'il a déjà une carte\n    carte_precedente = Carte.objects.filter(aliment=aliment, numero__isnull=False).order_by('-id').first()\n    if carte_precedente:\n        # récupérer le dernier caractère\n        lettre_precedente = carte_precedente.numero[-1]",
        "detail": "src.shared.helpers_old_03022024",
        "documentation": {}
    },
    {
        "label": "bool_plafond_atteint",
        "kind": 2,
        "importPath": "src.shared.helpers_old_03022024",
        "description": "src.shared.helpers_old_03022024",
        "peekOfCode": "def bool_plafond_atteint(dossier_sinistre):\n    plafond_atteint = False\n    formule = dossier_sinistre.formulegarantie\n    if formule:\n        # récupérer ses consommations individuel et par famille\n        periode_couverture_encours = formule.police.periode_couverture_encours_atdate(dossier_sinistre.date_survenance)\n        consommation_individuelle = \\\n            Sinistre.objects.filter(periode_couverture_id=periode_couverture_encours.pk, aliment_id=dossier_sinistre.aliment.id,\n                                    statut=StatutSinistre.ACCORDE, statut_validite=StatutValidite.VALIDE).aggregate(Sum('part_compagnie'))[\n                'part_compagnie__sum'] or 0",
        "detail": "src.shared.helpers_old_03022024",
        "documentation": {}
    },
    {
        "label": "base_url",
        "kind": 2,
        "importPath": "src.shared.sinistres_repository",
        "description": "src.shared.sinistres_repository",
        "peekOfCode": "def base_url(base='default'):\n    \"\"\"\n    Get the base URL based on the provided environment base name.\n    \"\"\"\n    #return settings.BASE_URLS.get(base, settings.BASE_URLS['default']) #commented\n    return BASE_URLS.get('prod')\ndef post(self, request, *args, **kwargs):\n    token = request.POST.get('token')\n    vehicule = self.get_vehicule(token, request.POST)\n    police = self.get_police(token, request.POST)",
        "detail": "src.shared.sinistres_repository",
        "documentation": {}
    },
    {
        "label": "post",
        "kind": 2,
        "importPath": "src.shared.sinistres_repository",
        "description": "src.shared.sinistres_repository",
        "peekOfCode": "def post(self, request, *args, **kwargs):\n    token = request.POST.get('token')\n    vehicule = self.get_vehicule(token, request.POST)\n    police = self.get_police(token, request.POST)\n    domage = self.get_dommage(request.POST)\n    ligne_domage = self.get_ligne_dommage(request.POST)\n    exist_sinistre = self.get_sinistre_id(token, request.user, request.POST.get('num_sinistre'))\n    if exist_sinistre:\n        return self.response(\"Ce numéro de sinistre existe déjà\", 409)\n    else:",
        "detail": "src.shared.sinistres_repository",
        "documentation": {}
    },
    {
        "label": "update",
        "kind": 2,
        "importPath": "src.shared.sinistres_repository",
        "description": "src.shared.sinistres_repository",
        "peekOfCode": "def update(self, request, *args, **kwargs):\n    token = request.POST.get('token')\n    sinistre = self.get_sinistre_by_id(token, request.user, kwargs['id_sin'])\n    if sinistre:\n        sinistre['motif'] = request.POST.get('code_motif')\n        logger.info('Sinistre::update', {'sinistre': sinistre, 'token': token, 'request-user': request.user, 'id_sin': kwargs['id_sin']})\n        return self.save_data(token, sinistre, request.user, kwargs['id_sin'])\n    else:\n        return self.response(\"Oups une erreur s'est produite. veuillez réessayer plus tard\", 404)\ndef get_sinistre_id(self, token, user, num_sinistre):",
        "detail": "src.shared.sinistres_repository",
        "documentation": {}
    },
    {
        "label": "get_sinistre_id",
        "kind": 2,
        "importPath": "src.shared.sinistres_repository",
        "description": "src.shared.sinistres_repository",
        "peekOfCode": "def get_sinistre_id(self, token, user, num_sinistre):\n    sinistre_response = None\n    param = [\n        {\n            \"name\": \"WS_GET_INFO_SIN\",\n            \"params\": {\n                \"REF_EXPERT\": num_sinistre\n            }\n        }\n    ]",
        "detail": "src.shared.sinistres_repository",
        "documentation": {}
    },
    {
        "label": "get_vehicule",
        "kind": 2,
        "importPath": "src.shared.sinistres_repository",
        "description": "src.shared.sinistres_repository",
        "peekOfCode": "def get_vehicule(self, token, request_data):\n    vehicule_response = None\n    param = [\n        {\n            \"name\": \"WS_GET_INFO_VEHICULE\",\n            \"params\": {\n                \"NUM_PARC\": request_data.get('num_parc'),\n                \"NUMPOL\": request_data.get('num_police'),\n                \"IMMAT_VEH\": request_data.get('immat_veh')\n            }",
        "detail": "src.shared.sinistres_repository",
        "documentation": {}
    },
    {
        "label": "get_dommage",
        "kind": 2,
        "importPath": "src.shared.sinistres_repository",
        "description": "src.shared.sinistres_repository",
        "peekOfCode": "def get_dommage(self, request_data):\n    dommage = Dommage.objects.filter(code=request_data.get('code_dommage')).first()\n    if dommage:\n        return dommage.to_dict()\n    return None\ndef get_ligne_dommage(self, request_data):\n    dommages = request_data.get('code_detail_dommage')\n    dom_array = list(set(dommages.split(\";\")))\n    lignes_dommage = LigneDommage.objects.filter(id__in=dom_array)\n    if lignes_dommage.count() > 0:",
        "detail": "src.shared.sinistres_repository",
        "documentation": {}
    },
    {
        "label": "get_ligne_dommage",
        "kind": 2,
        "importPath": "src.shared.sinistres_repository",
        "description": "src.shared.sinistres_repository",
        "peekOfCode": "def get_ligne_dommage(self, request_data):\n    dommages = request_data.get('code_detail_dommage')\n    dom_array = list(set(dommages.split(\";\")))\n    lignes_dommage = LigneDommage.objects.filter(id__in=dom_array)\n    if lignes_dommage.count() > 0:\n        thmp = [value['description'] for value in lignes_dommage.values('description')]\n        return \"; \".join(thmp)\n    return None\ndef get_police(self, token, request_data):\n    police_response = None",
        "detail": "src.shared.sinistres_repository",
        "documentation": {}
    },
    {
        "label": "get_police",
        "kind": 2,
        "importPath": "src.shared.sinistres_repository",
        "description": "src.shared.sinistres_repository",
        "peekOfCode": "def get_police(self, token, request_data):\n    police_response = None\n    param = [\n        {\n            \"name\": \"WS_GET_INFO_POLICE\",\n            \"params\": {\n                \"NUMPOL\": request_data.get('num_police')\n            }\n        }\n    ]",
        "detail": "src.shared.sinistres_repository",
        "documentation": {}
    },
    {
        "label": "get_sinistre_by_id",
        "kind": 2,
        "importPath": "src.shared.sinistres_repository",
        "description": "src.shared.sinistres_repository",
        "peekOfCode": "def get_sinistre_by_id(self, token, user, id):\n    error_data = {\n        'user': user,\n        'param': id,\n        'url': f\"{base_url(user.base)}/rs/rsExtranet2/sinistre/{id}\"\n    }\n    sinistre_response = None\n    try:\n        headers = {'Authorization': 'Bearer ' + token}\n        response = requests.get(f\"{base_url(user.base)}/rs/rsExtranet2/sinistre/{id}\", headers=headers)",
        "detail": "src.shared.sinistres_repository",
        "documentation": {}
    },
    {
        "label": "save_data",
        "kind": 2,
        "importPath": "src.shared.sinistres_repository",
        "description": "src.shared.sinistres_repository",
        "peekOfCode": "def save_data(self, token, param, user, id=None):\n    error_data = {\n        'user': user,\n        'param': json.dumps(param),\n        'url': f\"{base_url(user.base)}/rs/rsExtranet2/sinistre\"\n    }\n    try:\n        headers = {'Authorization': 'Bearer ' + token}\n        message = None\n        response = requests.post(f\"{base_url(user.base)}/rs/rsExtranet2/sinistre\", json=param, headers=headers)",
        "detail": "src.shared.sinistres_repository",
        "documentation": {}
    },
    {
        "label": "response",
        "kind": 2,
        "importPath": "src.shared.sinistres_repository",
        "description": "src.shared.sinistres_repository",
        "peekOfCode": "def response(self, message, code=200):\n    if code == 200:\n        return JsonResponse({'message': message}, status=code)\n    else:\n        return JsonResponse({'error': message}, status=code)",
        "detail": "src.shared.sinistres_repository",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "src.shared.sinistres_repository",
        "description": "src.shared.sinistres_repository",
        "peekOfCode": "logger = logging.getLogger(__name__)\n# settings.py\n# Define base URLs for different environments\nBASE_URLS = {\n    'default': 'https://inov.veos.iga.fr',\n    'inov2': 'https://inov2.preprod-veos.iga.fr',\n    'recSante': 'https://inov.rec-veos.iga.fr',\n    'prod': 'https://inov.prod-veos.iga.fr/rs/rsExtranet2',\n}\n# utils.py",
        "detail": "src.shared.sinistres_repository",
        "documentation": {}
    },
    {
        "label": "BASE_URLS",
        "kind": 5,
        "importPath": "src.shared.sinistres_repository",
        "description": "src.shared.sinistres_repository",
        "peekOfCode": "BASE_URLS = {\n    'default': 'https://inov.veos.iga.fr',\n    'inov2': 'https://inov2.preprod-veos.iga.fr',\n    'recSante': 'https://inov.rec-veos.iga.fr',\n    'prod': 'https://inov.prod-veos.iga.fr/rs/rsExtranet2',\n}\n# utils.py\nfrom django.conf import settings\ndef base_url(base='default'):\n    \"\"\"",
        "detail": "src.shared.sinistres_repository",
        "documentation": {}
    },
    {
        "label": "get_api_url",
        "kind": 2,
        "importPath": "src.shared.veos",
        "description": "src.shared.veos",
        "peekOfCode": "def get_api_url():\n    env = environ.Env()\n    environ.Env.read_env(env_file=str(BASE_DIR / \"inov\" / \".env\"))\n    ENVIRONMENT = env(\"ENVIRONMENT\")\n    url = API_URL_PROD if ENVIRONMENT == \"PROD\" else API_URL_PREPROD\n    return url\nAPI_URL = get_api_url()\ndef getToken():\n    try:\n        api_url = f\"{API_URL}/login\"",
        "detail": "src.shared.veos",
        "documentation": {}
    },
    {
        "label": "getToken",
        "kind": 2,
        "importPath": "src.shared.veos",
        "description": "src.shared.veos",
        "peekOfCode": "def getToken():\n    try:\n        api_url = f\"{API_URL}/login\"\n        pprint(api_url)\n        # Les données que vous souhaitez envoyer à l'API\n        data = {\n            \"uid\": \"WS\",\n            \"passwd\": \"WS1234\"\n        }\n        # Appel de l'API en utilisant la méthode POST avec les données JSON et les en-têtes",
        "detail": "src.shared.veos",
        "documentation": {}
    },
    {
        "label": "getPoliceIdPol",
        "kind": 2,
        "importPath": "src.shared.veos",
        "description": "src.shared.veos",
        "peekOfCode": "def getPoliceIdPol(police):\n    # Les données que vous souhaitez envoyer à l'API\n    data = {\n        \"requests\": [\n            {\n                \"name\": \"WS_GET_LAST_POLICE_IDPOL\",\n                \"params\": {\n                    'id_npol': police\n                }\n            }",
        "detail": "src.shared.veos",
        "documentation": {}
    },
    {
        "label": "call_api_with_data",
        "kind": 2,
        "importPath": "src.shared.veos",
        "description": "src.shared.veos",
        "peekOfCode": "def call_api_with_data(data):\n    # Construire l'URL de l'API en utilisant la variable API_URL\n    api_url = f\"{API_URL}/boBy/list\"\n    error_message = \"Impossible de récupérer les données sur VEOS.\"\n    # dd(error_message)\n    try:\n        # refresh token\n        BEARER_TOKEN = getToken()\n        print(f\"Token : {BEARER_TOKEN}\")\n        # Définir les en-têtes de la requête avec le Bearer token",
        "detail": "src.shared.veos",
        "documentation": {}
    },
    {
        "label": "query_builder",
        "kind": 2,
        "importPath": "src.shared.veos",
        "description": "src.shared.veos",
        "peekOfCode": "def query_builder(boby, param, start_row, end_row):\n    status = None\n    api_url = f\"{API_URL}/boBy/list\"\n    try:\n        headers = {'Authorization': 'Bearer ' + BEARER_TOKEN}\n        payload = {\n            'requests': [\n                {\n                    'name': boby,\n                    'params': param,",
        "detail": "src.shared.veos",
        "documentation": {}
    },
    {
        "label": "query_builder_tools",
        "kind": 2,
        "importPath": "src.shared.veos",
        "description": "src.shared.veos",
        "peekOfCode": "def query_builder_tools(boby, param):\n    data = []\n    start_row = 1\n    end_row = 3000\n    loop_step = 3000\n    try:\n        query1 = query_builder(boby, param, start_row, end_row)\n        data = query1.get('beans', [])\n        while len(data) < query1['totalCount']:\n            start_row = end_row + 1",
        "detail": "src.shared.veos",
        "documentation": {}
    },
    {
        "label": "get_document",
        "kind": 2,
        "importPath": "src.shared.veos",
        "description": "src.shared.veos",
        "peekOfCode": "def get_document(ID_ADOC):\n    # Construire l'URL de l'API en utilisant la variable API_URL\n    api_url = f\"{API_URL}/document/v2/{ID_ADOC}\"\n    error_message = \"Impossible de récupérer les données sur VEOS.\"\n    #dd(api_url)\n    try:\n        # Définir les en-têtes de la requête avec le Bearer token\n        headers = {\n            \"Authorization\": f\"Bearer {BEARER_TOKEN}\",\n            \"Content-Type\": \"application/json\"",
        "detail": "src.shared.veos",
        "documentation": {}
    },
    {
        "label": "create_sinistre_veos",
        "kind": 2,
        "importPath": "src.shared.veos",
        "description": "src.shared.veos",
        "peekOfCode": "def create_sinistre_veos(data):\n    # Construire l'URL de l'API en utilisant la variable API_URL\n    # api_url = f\"{API_URL}/sinistre\"\n    api_url = f\"{API_URL_PREPROD}/sinistre\"\n    headers = {\n        \"Authorization\": f\"Bearer {BEARER_TOKEN}\",\n        \"Content-Type\": \"application/json\"\n    }\n    try:\n        # Appel de l'API en utilisant la méthode POST avec les données JSON et les en-têtes",
        "detail": "src.shared.veos",
        "documentation": {}
    },
    {
        "label": "get_pays_lists",
        "kind": 2,
        "importPath": "src.shared.veos",
        "description": "src.shared.veos",
        "peekOfCode": "def get_pays_lists():\n    # Les données que vous souhaitez envoyer à l'API\n    data = {\n        \"requests\": [\n            {\n                \"name\": \"WS_LISTE_TOTALE_PAYS\",\n                \"params\": {\n                }\n            }\n        ]",
        "detail": "src.shared.veos",
        "documentation": {}
    },
    {
        "label": "get_bureaux_lists",
        "kind": 2,
        "importPath": "src.shared.veos",
        "description": "src.shared.veos",
        "peekOfCode": "def get_bureaux_lists():\n    # Les données que vous souhaitez envoyer à l'API\n    data = {\n        \"requests\": [\n            {\n                \"name\": \"WS_BUREAU_TACHE_CRON\",\n                \"params\": {\n                }\n            }\n        ]",
        "detail": "src.shared.veos",
        "documentation": {}
    },
    {
        "label": "get_devise_lists",
        "kind": 2,
        "importPath": "src.shared.veos",
        "description": "src.shared.veos",
        "peekOfCode": "def get_devise_lists():\n    # Les données que vous souhaitez envoyer à l'API\n    data = {\n        \"requests\": [\n            {\n                \"name\": \"WS_DIVISE_TACHE_CRON\",\n                \"params\": {\n                }\n            }\n        ]",
        "detail": "src.shared.veos",
        "documentation": {}
    },
    {
        "label": "get_compagnie_lists",
        "kind": 2,
        "importPath": "src.shared.veos",
        "description": "src.shared.veos",
        "peekOfCode": "def get_compagnie_lists():\n    # Les données que vous souhaitez envoyer à l'API\n    data = {\n        \"requests\": [\n            {\n                \"name\": \"WS_COMPAGNIE_TACHE_CRON\",\n                \"params\": {\n                }\n            }\n        ]",
        "detail": "src.shared.veos",
        "documentation": {}
    },
    {
        "label": "get_clients_lists",
        "kind": 2,
        "importPath": "src.shared.veos",
        "description": "src.shared.veos",
        "peekOfCode": "def get_clients_lists():\n    cpt_anciens_clients = 0\n    cpt_nouveaux_clients = 0\n    cpt_tous_clients = 0\n    # Les données que vous souhaitez envoyer à l'API\n    today = datetime.now(tz=timezone.utc).strftime('%d/%m/%Y')\n    yesterday = (datetime.now(tz=timezone.utc) - timedelta(days=3)).strftime('%d/%m/%Y')\n    data = {\n        \"requests\": [\n            {",
        "detail": "src.shared.veos",
        "documentation": {}
    },
    {
        "label": "import_compagnie_manuellement",
        "kind": 2,
        "importPath": "src.shared.veos",
        "description": "src.shared.veos",
        "peekOfCode": "def import_compagnie_manuellement(request):\n    cpt_anciens_compagnies = 0\n    cpt_nouveaux_compagnies = 0\n    cpt_tous_compagnies = 0\n    compagnies_veos = CompagnieVeos.objects.filter(STATUT_IMPORT=False).order_by('ID_PER')[:1000]\n    #dd(compagnies_veos)\n    if compagnies_veos:\n        for compagnie in compagnies_veos:\n            # Check if the record already exists based on a unique field (code)\n            existing_record = Compagnie.objects.filter(code=compagnie.CODE).first()",
        "detail": "src.shared.veos",
        "documentation": {}
    },
    {
        "label": "import_client_manuellement",
        "kind": 2,
        "importPath": "src.shared.veos",
        "description": "src.shared.veos",
        "peekOfCode": "def import_client_manuellement(request):\n    cpt_anciens_clients = 0\n    cpt_nouveaux_clients = 0\n    cpt_tous_clients = 0\n    clients_veos = ClientVeos.objects.filter(STATUT_IMPORT=False).order_by('ID_PER')[:1000]\n    cpt = 0\n    #dd(clients_veos)\n    if clients_veos:\n        for cv in clients_veos:\n            # Check if the record already exists based on a unique field (code)",
        "detail": "src.shared.veos",
        "documentation": {}
    },
    {
        "label": "cron_create_police",
        "kind": 2,
        "importPath": "src.shared.veos",
        "description": "src.shared.veos",
        "peekOfCode": "def cron_create_police(data):\n    api_url = f\"{API_URL_PREPROD}/police\"\n    headers = {\n        \"Authorization\": f\"Bearer {BEARER_TOKEN}\",\n        \"Content-Type\": \"application/json\"\n    }\n    try:\n        # Appel de l'API en utilisant la méthode POST avec les données JSON et les en-têtes\n        response = requests.post(api_url, json=data, headers=headers)\n        # Vérification du statut de la réponse",
        "detail": "src.shared.veos",
        "documentation": {}
    },
    {
        "label": "get_polices_lists",
        "kind": 2,
        "importPath": "src.shared.veos",
        "description": "src.shared.veos",
        "peekOfCode": "def get_polices_lists():\n    cpt_anciennes_polices = 0\n    cpt_nouvelles_polices = 0\n    cpt_toutes_polices=0\n    # Les données que vous souhaitez envoyer à l'API\n    today = datetime.now(tz=timezone.utc).strftime('%d/%m/%Y')\n    yesterday = (datetime.now(tz=timezone.utc) - timedelta(days=3)).strftime('%d/%m/%Y')\n    jours_10 = (datetime.now(tz=timezone.utc) - timedelta(days=30)).strftime('%d/%m/%Y')\n    jours_7 = (datetime.now(tz=timezone.utc) - timedelta(days=7)).strftime('%d/%m/%Y')\n    data = {",
        "detail": "src.shared.veos",
        "documentation": {}
    },
    {
        "label": "create_police_veos",
        "kind": 2,
        "importPath": "src.shared.veos",
        "description": "src.shared.veos",
        "peekOfCode": "def create_police_veos(data):\n    # Construire l'URL de l'API en utilisant la variable API_URL\n    # api_url = f\"{API_URL}/sinistre\"\n    api_url = f\"{API_URL_PREPROD}/sinistre\"\n    headers = {\n        \"Authorization\": f\"Bearer {BEARER_TOKEN}\",\n        \"Content-Type\": \"application/json\"\n    }\n    try:\n        # Appel de l'API en utilisant la méthode POST avec les données JSON et les en-têtes",
        "detail": "src.shared.veos",
        "documentation": {}
    },
    {
        "label": "send_polices",
        "kind": 2,
        "importPath": "src.shared.veos",
        "description": "src.shared.veos",
        "peekOfCode": "def send_polices():\n    # Liste des polices à envoyer\n    polices = Police.objects.filter(id=26)\n    nombre_police = polices.count()\n    # Démarrage du compte à rebourt pour la création des polices sur veos\n    temps_debut = time.time()\n    for police in polices:\n        date_str = police.created_at.strftime(\"%Y-%m-%d %H:%M:%S\")\n        date_format = \"%Y-%m-%d %H:%M:%S\"\n        timestamp = datetime.strptime(date_str, date_format).timestamp()",
        "detail": "src.shared.veos",
        "documentation": {}
    },
    {
        "label": "call_api_updt_mvquittances_veos",
        "kind": 2,
        "importPath": "src.shared.veos",
        "description": "src.shared.veos",
        "peekOfCode": "def call_api_updt_mvquittances_veos(data):\n    # Construire l'URL de l'API en utilisant la variable API_URL\n    # api_url = f\"{API_URL}/sinistre\"\n    api_url = f\"{API_URL_PROD_UPD_QUI}/rsUpdateBoByTrs/json\"\n    # dd(data)\n    headers = {\n        \"Authorization\": f\"Bearer {BEARER_TOKEN}\",\n        \"Content-Type\": \"application/json\"\n    }\n    try:",
        "detail": "src.shared.veos",
        "documentation": {}
    },
    {
        "label": "updt_mvquittances",
        "kind": 2,
        "importPath": "src.shared.veos",
        "description": "src.shared.veos",
        "peekOfCode": "def updt_mvquittances():\n    env = environ.Env()\n    environ.Env.read_env(env_file=str(BASE_DIR / \"inov\" / \".env\"))\n    ENVIRONMENT = env(\"ENVIRONMENT\")\n    # if ENVIRONMENT:\n    if ENVIRONMENT == \"PROD\":\n        # Liste des quttances à envoyer\n        quittances = Quittance.objects.filter(statut_validite=StatutValidite.VALIDE, import_stats=False)\n        nombre_quittance = quittances.count()\n        # Démarrage du compte à rebourt pour la création des quittances sur veos",
        "detail": "src.shared.veos",
        "documentation": {}
    },
    {
        "label": "get_grinter_veos",
        "kind": 2,
        "importPath": "src.shared.veos",
        "description": "src.shared.veos",
        "peekOfCode": "def get_grinter_veos():\n    # Les données que vous souhaitez envoyer à l'API\n    data = {\n        \"requests\": [\n            {\n                \"name\": \"WS_BUREAU_TACHE_CRON\",\n                \"params\": {\n                }\n            }\n        ]",
        "detail": "src.shared.veos",
        "documentation": {}
    },
    {
        "label": "get_apporteur_veos",
        "kind": 2,
        "importPath": "src.shared.veos",
        "description": "src.shared.veos",
        "peekOfCode": "def get_apporteur_veos():\n    # Les données que vous souhaitez envoyer à l'API\n    data = {\n        \"requests\": [\n            {\n                \"name\": \"WS_BUREAU_TACHE_CRON\",\n                \"params\": {\n                }\n            }\n        ]",
        "detail": "src.shared.veos",
        "documentation": {}
    },
    {
        "label": "get_clients_veos",
        "kind": 2,
        "importPath": "src.shared.veos",
        "description": "src.shared.veos",
        "peekOfCode": "def get_clients_veos():\n    # Les données que vous souhaitez envoyer à l'API\n    data = {\n        \"requests\": [\n            {\n                \"name\": \"WS_BUREAU_TACHE_CRON\",\n                \"params\": {\n                }\n            }\n        ]",
        "detail": "src.shared.veos",
        "documentation": {}
    },
    {
        "label": "call_api_client_veos",
        "kind": 2,
        "importPath": "src.shared.veos",
        "description": "src.shared.veos",
        "peekOfCode": "def call_api_client_veos(data):\n    # Construire l'URL de l'API en utilisant la variable API_URL\n    # api_url = f\"{API_URL}/sinistre\"\n    api_url = f\"{API_URL_PROD}/personne\"\n    #api_url = f\"{API_URL_PROD}/personne\"\n    # dd(data)\n    headers = {\n        \"Authorization\": f\"Bearer {BEARER_TOKEN}\",\n        \"Content-Type\": \"application/json\"\n    }",
        "detail": "src.shared.veos",
        "documentation": {}
    },
    {
        "label": "send_list_clients_to_veos",
        "kind": 2,
        "importPath": "src.shared.veos",
        "description": "src.shared.veos",
        "peekOfCode": "def send_list_clients_to_veos():\n    env = environ.Env()\n    environ.Env.read_env(env_file=str(BASE_DIR / \"inov\" / \".env\"))\n    ENVIRONMENT = env(\"ENVIRONMENT\")\n    if ENVIRONMENT  == \"PROD\":\n    #if ENVIRONMENT == \"PREPROD\":\n    # if ENVIRONMENT:\n        # Liste des quttances à envoyer\n        clients = Client.objects.filter(veos_client_idper__isnull=True, nom__isnull=False, polices__isnull=False, statut=Statut.ACTIF).exclude(nom='')\n        nombre_clients = clients.count()",
        "detail": "src.shared.veos",
        "documentation": {}
    },
    {
        "label": "send_client_to_veos",
        "kind": 2,
        "importPath": "src.shared.veos",
        "description": "src.shared.veos",
        "peekOfCode": "def send_client_to_veos(client):\n    env = environ.Env()\n    environ.Env.read_env(env_file=str(BASE_DIR / \"inov\" / \".env\"))\n    ENVIRONMENT = env(\"ENVIRONMENT\")\n    #if ENVIRONMENT  == \"PROD\":\n    if ENVIRONMENT == \"PROD\":\n    # if ENVIRONMENT:\n        # Liste des quttances à envoyer\n        # Démarrage du compte à rebourt pour la création des quittances sur veos\n        temps_debut = time.time()",
        "detail": "src.shared.veos",
        "documentation": {}
    },
    {
        "label": "import_police_manuellement",
        "kind": 2,
        "importPath": "src.shared.veos",
        "description": "src.shared.veos",
        "peekOfCode": "def import_police_manuellement(request):\n    cpt_anciennes_polices = 0\n    cpt_nouvelles_polices = 0\n    cpt_toutes_polices=0\n    polices_veos = PoliceVeos.objects.filter(STATUT_IMPORT=False).order_by('ID_NPOL')[:1000]\n    cpt = 0\n    #dd(polices_veos)\n    if polices_veos:\n        for police in polices_veos:\n            #infos pour créer la nouvelle police",
        "detail": "src.shared.veos",
        "documentation": {}
    },
    {
        "label": "import_formule_manuellement",
        "kind": 2,
        "importPath": "src.shared.veos",
        "description": "src.shared.veos",
        "peekOfCode": "def import_formule_manuellement(request):\n    cpt_anciennes_formules = 0\n    cpt_nouvelles_formules = 0\n    cpt_toutes_formules=0\n    formules_veos = FormuleVeos.objects.filter(STATUT_IMPORT=False).order_by('ID_NPOL')[:1000]\n    cpt = 0\n    #dd(formules_veos)\n    if formules_veos:\n        for formule in formules_veos:\n            existing_record = FormuleGarantie.objects.filter(code=formule.CODE_FORMULE).first()",
        "detail": "src.shared.veos",
        "documentation": {}
    },
    {
        "label": "get_formules_lists",
        "kind": 2,
        "importPath": "src.shared.veos",
        "description": "src.shared.veos",
        "peekOfCode": "def get_formules_lists():\n    cpt_anciennes_formules = 0\n    cpt_nouvelles_formules = 0\n    cpt_toutes_formules=0\n    api_url = f\"{API_URL}/boBy/list\"\n    data = {\n        \"requests\": [\n            {\n                \"name\": \"WS_FORMULE_TACHE_CRON\",\n                \"params\": {",
        "detail": "src.shared.veos",
        "documentation": {}
    },
    {
        "label": "get_aliments_lists",
        "kind": 2,
        "importPath": "src.shared.veos",
        "description": "src.shared.veos",
        "peekOfCode": "def get_aliments_lists():\n    today = datetime.now(tz=timezone.utc).strftime('%d/%m/%Y')\n    yesterday = (datetime.now(tz=timezone.utc) - timedelta(days=3)).strftime('%d/%m/%Y')\n    # Les données que vous souhaitez envoyer à l'API\n    liste_code_bureaux = ['SN01', 'TG01', 'BN01', 'BF01', 'CF01', 'CG01', 'CM01', 'GA01'] #'CI01': la ci est entièrement sur la v2 désormais,\n    for code_bureau in liste_code_bureaux:\n        param = {\n            'date_debut': yesterday,\n            'date_fin': today,\n            'num_soc': code_bureau",
        "detail": "src.shared.veos",
        "documentation": {}
    },
    {
        "label": "import_aliments_manuellement",
        "kind": 2,
        "importPath": "src.shared.veos",
        "description": "src.shared.veos",
        "peekOfCode": "def import_aliments_manuellement(request):\n    cpt_all = 0\n    cpt_anciens_sans_changement_formule = 0\n    cpt_anciens_avec_changement_formule = 0\n    cpt_nouveaux = 0\n    date_du_jour = datetime.now(tz=timezone.utc).date()\n    # Appel de la fonction pour effectuer l'appel à l'API\n    aliments = AlimentVeos.objects.filter(STATUT_IMPORT=False).order_by('ID_ALIMENT')[:3000]\n    #dd(aliments)\n    for aliment in aliments:",
        "detail": "src.shared.veos",
        "documentation": {}
    },
    {
        "label": "get_prestataire_lists",
        "kind": 2,
        "importPath": "src.shared.veos",
        "description": "src.shared.veos",
        "peekOfCode": "def get_prestataire_lists():\n    # Les données que vous souhaitez envoyer à l'API\n    data = {\n        \"requests\": [\n            {\n                \"name\": \"WS_PRESTATAIRE_TACHE_CRON\",\n                \"params\": {\n                }\n            }\n        ]",
        "detail": "src.shared.veos",
        "documentation": {}
    },
    {
        "label": "import_prestataires_manuellement",
        "kind": 2,
        "importPath": "src.shared.veos",
        "description": "src.shared.veos",
        "peekOfCode": "def import_prestataires_manuellement(request):\n    prestataires_veos = PrestataireVeos.objects.filter(STATUT_IMPORT=False)\n    cpt_anciens = 0\n    cpt_nouveaux = 0\n    for prestataire in prestataires_veos:\n            # dd(prestataire)\n            # Check if the record already exists based on a unique field (code)\n            existing_record = Prestataire.objects.filter(id_per=prestataire.ID_PER).first()\n            bureaux = Bureau.objects.filter(code=prestataire.SOCIETE)\n            bureau = bureaux.first() if bureaux else None",
        "detail": "src.shared.veos",
        "documentation": {}
    },
    {
        "label": "import_prescripteurs_manuellement",
        "kind": 2,
        "importPath": "src.shared.veos",
        "description": "src.shared.veos",
        "peekOfCode": "def import_prescripteurs_manuellement(request):\n    #TODO DOES\n    prescripteurs_veos = PrescripteurVeos.objects.filter(STATUT_IMPORT=False)\n    cpt_anciens = 0\n    cpt_nouveaux = 0\n    # dd(prescripteurs_veos)\n    for prescripteur in prescripteurs_veos:\n        # Check if the record already exists based on a unique field (code)\n        existing_prescripteur = Prescripteur.objects.filter(veos_id_per=prescripteur.id_per).first()\n        # Prestataire",
        "detail": "src.shared.veos",
        "documentation": {}
    },
    {
        "label": "import_utilisateurs_manuellement",
        "kind": 2,
        "importPath": "src.shared.veos",
        "description": "src.shared.veos",
        "peekOfCode": "def import_utilisateurs_manuellement(request):\n    cpt_anciens = 0\n    cpt_nouveaux = 0\n    utilisateurs_veos = UtilisateurVeos.objects.filter(STATUT_IMPORT=False)\n    #dd(utilisateurs_veos)\n    for utilisateur in utilisateurs_veos:\n        user_exist = User.objects.filter(username=utilisateur.LOGIN).exists()\n        # dd(user_exist)\n        if user_exist:\n            cpt_anciens += 1",
        "detail": "src.shared.veos",
        "documentation": {}
    },
    {
        "label": "import_utilisateurs_grh_manuellement",
        "kind": 2,
        "importPath": "src.shared.veos",
        "description": "src.shared.veos",
        "peekOfCode": "def import_utilisateurs_grh_manuellement(request):\n    cpt_anciens = 0\n    cpt_nouveaux = 0\n    utilisateurs_grh_veos = UtilisateurGrhVeos.objects.filter(STATUT_IMPORT=False)\n    #dd(utilisateurs_veos)\n    for utilisateur in utilisateurs_grh_veos:\n        user = User.objects.filter(username=utilisateur.LOGIN).first()\n        list_client_associated = user.client_grh.all() if user else None\n        bureau = Bureau.objects.filter(code=utilisateur.BUREAU).first()\n        list_code_client = [code.strip() for code in utilisateur.CODE_CLIENT.strip().replace(';', ',').split(',')] if utilisateur.CODE_CLIENT else \"\"",
        "detail": "src.shared.veos",
        "documentation": {}
    },
    {
        "label": "import_utilisateurs_prestataire_manuellement",
        "kind": 2,
        "importPath": "src.shared.veos",
        "description": "src.shared.veos",
        "peekOfCode": "def import_utilisateurs_prestataire_manuellement(request):\n    cpt_anciens = 0\n    cpt_nouveaux = 0\n    utilisateurs_veos = ComptePrestataireVeos.objects.filter(STATUT_IMPORT=False)\n    #dd(utilisateurs_veos)\n    for utilisateur in utilisateurs_veos:\n        list_email_user = [email.strip() for email in utilisateur.EMAIL.strip().replace(';', ',').split(',')] if utilisateur.EMAIL else \"\"\n        prestataire = Prestataire.objects.filter(code=utilisateur.CODE_PRESTATAIRE).first()\n        secteur_prestataire = Secteur.objects.filter(libelle=utilisateur.SECTEUR_PRESTATAIRE).first()\n        type_prestataire = TypePrestataire.objects.filter(name=utilisateur.TYPE_PRESTATAIRE).first()",
        "detail": "src.shared.veos",
        "documentation": {}
    },
    {
        "label": "import_changement_formule_manuellement",
        "kind": 2,
        "importPath": "src.shared.veos",
        "description": "src.shared.veos",
        "peekOfCode": "def import_changement_formule_manuellement(request):\n    cpt_anciens = 0 #ceci stockera le nombre des formules qui ne seront pas impactées car déjà conforme\n    cpt_nouveaux = 0 #ceci stockera le nombre des formules qui ont ete tout simplement créées nouvellement\n    cpt_desactives = 0 #ceci stockera le nombre des formules qui sont a proscrire\n    cpt_updates = 0#ceci stockera le nombre des formules qui ont subit une mise a jour \n    changement_formules = ChangementFormule.objects.filter(STATUT_IMPORT=False) #recuperer toutes les donnees pas encore importes\n    new = []\n    \"\"\"\n    # Exportation excel\n    response = HttpResponse(content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')",
        "detail": "src.shared.veos",
        "documentation": {}
    },
    {
        "label": "import_quittances_manuellement",
        "kind": 2,
        "importPath": "src.shared.veos",
        "description": "src.shared.veos",
        "peekOfCode": "def import_quittances_manuellement(request):\n    cpt_anciens = 0\n    cpt_nouveaux = 0\n    cpt_failed = 0\n    quittances_veos = QuittanceVeos.objects.filter(STATUT_IMPORT=False)[:1000]\n    if quittances_veos:\n        #Parcourrir les quittances\n        for quittance_veos in quittances_veos:\n            quittance_existant = Quittance.objects.filter(numero=quittance_veos.ID_NPOL).first()\n            if quittance_existant:",
        "detail": "src.shared.veos",
        "documentation": {}
    },
    {
        "label": "get_prescripteurs_lists",
        "kind": 2,
        "importPath": "src.shared.veos",
        "description": "src.shared.veos",
        "peekOfCode": "def get_prescripteurs_lists():\n    today = datetime.now(tz=timezone.utc).strftime('%d/%m/%Y')\n    yesterday = (datetime.now(tz=timezone.utc) - timedelta(days=30)).strftime('%d/%m/%Y')\n    # Les données que vous souhaitez envoyer à l'API\n    data = {\n        \"requests\": [\n            {\n                \"name\": \"WS_PRESCRIPTEUR_TACHE_CRON\",\n                \"params\": {\n                    'date_debut':yesterday,",
        "detail": "src.shared.veos",
        "documentation": {}
    },
    {
        "label": "get_sinistres_lists",
        "kind": 2,
        "importPath": "src.shared.veos",
        "description": "src.shared.veos",
        "peekOfCode": "def get_sinistres_lists():\n    # Les données que vous souhaitez envoyer à l'API\n    boby_name = \"WS_SINISTRE_TACHE_CRON\" #WS_CRON_SINISTRE_TEST WS_MAJ_TABLE_SINISTRE\n    param = {}\n    # Appel de la fonction pour effectuer l'appel à l'API\n    sinistres = query_builder_tools(boby_name, param)\n    pprint(sinistres)\n    '''\n    sinistres = [\n        {",
        "detail": "src.shared.veos",
        "documentation": {}
    },
    {
        "label": "import_sinistre_manuellement_old",
        "kind": 2,
        "importPath": "src.shared.veos",
        "description": "src.shared.veos",
        "peekOfCode": "def import_sinistre_manuellement_old(request):\n    sinistres_veos = SinistreVeos.objects.filter(STATUT_IMPORT=False).order_by('ID_SIN')[:1000]\n    cpt = 0\n    #dd(sinistres_veos)\n    if sinistres_veos:\n        for sv in sinistres_veos:\n            # Check if the record already exists based on a unique field (code)\n            existing_record = Sinistre.objects.filter(veos_id_sin=sv.ID_SIN).first()\n            # dd(existing_record)\n            if existing_record:",
        "detail": "src.shared.veos",
        "documentation": {}
    },
    {
        "label": "import_sinistre_manuellement",
        "kind": 2,
        "importPath": "src.shared.veos",
        "description": "src.shared.veos",
        "peekOfCode": "def import_sinistre_manuellement(request):\n    # Générer un UUID unique pour la session\n    session_uuid = str(uuid.uuid4())\n    # Récupérer les 10 000 premiers IDs des objets à mettre à jour\n    ids_to_update = list(SinistreVeos.objects.filter(STATUT_IMPORT=False, SESSION_UUID__isnull=True).order_by('ID_SIN').values_list('id', flat=True)[:10000])\n    # Mettre à jour les objets correspondant aux IDs récupérés\n    SinistreVeos.objects.filter(id__in=ids_to_update).update(SESSION_UUID=session_uuid)\n    # Récupérer les objets mis à jour\n    sinistres_veos = SinistreVeos.objects.filter(STATUT_IMPORT=False, SESSION_UUID=session_uuid).order_by('ID_SIN')[:10000]\n    cpt = 0",
        "detail": "src.shared.veos",
        "documentation": {}
    },
    {
        "label": "import_sinistre_manuellement_cron",
        "kind": 2,
        "importPath": "src.shared.veos",
        "description": "src.shared.veos",
        "peekOfCode": "def import_sinistre_manuellement_cron():\n    # Générer un UUID unique pour la session\n    session_uuid = str(uuid.uuid4())\n    # Récupérer les 10 000 premiers IDs des objets à mettre à jour\n    ids_to_update = list(SinistreVeos.objects.filter(STATUT_IMPORT=False, SESSION_UUID__isnull=True).order_by('ID_SIN').values_list('id', flat=True)[:10000])\n    # Mettre à jour les objets correspondant aux IDs récupérés\n    SinistreVeos.objects.filter(id__in=ids_to_update).update(SESSION_UUID=session_uuid)\n    # Récupérer les objets mis à jour\n    sinistres_veos = SinistreVeos.objects.filter(STATUT_IMPORT=False, SESSION_UUID=session_uuid).order_by('ID_SIN')[:10000]\n    cpt = 0",
        "detail": "src.shared.veos",
        "documentation": {}
    },
    {
        "label": "get_specialites_lists",
        "kind": 2,
        "importPath": "src.shared.veos",
        "description": "src.shared.veos",
        "peekOfCode": "def get_specialites_lists():\n    # Construire l'URL de l'API en utilisant la variable API_URL\n    api_url = f\"{API_URL}/boBy/list\"\n    # Les données que vous souhaitez envoyer à l'API\n    data = {\n        \"requests\": [\n            {\n                \"name\": \"WS_SPECIALITE_TACHE_CRON\",\n                \"params\": {\n                }",
        "detail": "src.shared.veos",
        "documentation": {}
    },
    {
        "label": "get_actes_lists",
        "kind": 2,
        "importPath": "src.shared.veos",
        "description": "src.shared.veos",
        "peekOfCode": "def get_actes_lists():\n    # Les données que vous souhaitez envoyer à l'API\n    data = {\n        \"requests\": [\n            {\n                \"name\": \"WS_ACTE_TACHE_CRON\",\n                \"params\": {\n                }\n            }\n        ]",
        "detail": "src.shared.veos",
        "documentation": {}
    },
    {
        "label": "import_apporteurs_manuellement",
        "kind": 2,
        "importPath": "src.shared.veos",
        "description": "src.shared.veos",
        "peekOfCode": "def import_apporteurs_manuellement(request):\n    cpt_anciens_apporteurs = 0\n    cpt_nouveaux_apporteurs = 0\n    cpt_tous_apporteurs = 0\n    apporteurs_veos = ApporteurVeos.objects.filter(STATUT_IMPORT=False).order_by('ID_PER_APPORTEUR')[:1000]\n    # dd(apporteurs_veos)\n    if apporteurs_veos:\n        for apporteur in apporteurs_veos:\n            # Check if the record already exists based on a unique field (code)\n            existing_record = Apporteur.objects.filter(id_per=apporteur.ID_PER_APPORTEUR).first()",
        "detail": "src.shared.veos",
        "documentation": {}
    },
    {
        "label": "import_apporteurs_manuellement_sans_contrat",
        "kind": 2,
        "importPath": "src.shared.veos",
        "description": "src.shared.veos",
        "peekOfCode": "def import_apporteurs_manuellement_sans_contrat(request):\n    cpt_anciens_apporteurs = 0\n    cpt_nouveaux_apporteurs = 0\n    cpt_tous_apporteurs = 0\n    apporteurs_veos = ApporteurVeos.objects.filter(STATUT_IMPORT=False).order_by('ID_PER_APPORTEUR')[:1000]\n    # dd(apporteurs_veos)\n    if apporteurs_veos:\n        for apporteur in apporteurs_veos:\n            # Check if the record already exists based on a unique field (code)\n            existing_record = Apporteur.objects.filter(Q(id_per=apporteur.ID_PER_APPORTEUR) | Q(code=apporteur.NUM_APPORTEUR)).first()",
        "detail": "src.shared.veos",
        "documentation": {}
    },
    {
        "label": "send_sinistres",
        "kind": 2,
        "importPath": "src.shared.veos",
        "description": "src.shared.veos",
        "peekOfCode": "def send_sinistres():\n    # récupérer les sinistres et les envoyer vers veos\n    # sinistres = Sinistre.objects.filter(id=342121)\n    # sinistres = Sinistre.objects.filter(statut_synchro_veos=False)\n    # sinistres = Sinistre.objects.filter(\n    #     aliment__veos_adherent_principal_id_per__isnull=False,\n    #     police__client__veos_assure_sante_idper__isnull=False,\n    #     dossier_sinistre_id__isnull=False\n    # )\n    sinistres = Sinistre.objects.filter(id=347937)",
        "detail": "src.shared.veos",
        "documentation": {}
    },
    {
        "label": "get_photos_lists_of_bureau",
        "kind": 2,
        "importPath": "src.shared.veos",
        "description": "src.shared.veos",
        "peekOfCode": "def get_photos_lists_of_bureau(bureau_id):\n    polices = Police.objects.filter(bureau_id=bureau_id)\n    for police in polices:\n        get_photos_lists(police.numero)\n    message = f\"Récupération des photos terminée.\"\n    pprint(message)\n    return message\ndef get_photos_lists(numero_police):\n    police = Police.objects.filter(numero=numero_police).first()\n    aliments_ids = AlimentFormule.objects.filter(formule__police=police).values_list('aliment_id', flat=True)",
        "detail": "src.shared.veos",
        "documentation": {}
    },
    {
        "label": "get_photos_lists",
        "kind": 2,
        "importPath": "src.shared.veos",
        "description": "src.shared.veos",
        "peekOfCode": "def get_photos_lists(numero_police):\n    police = Police.objects.filter(numero=numero_police).first()\n    aliments_ids = AlimentFormule.objects.filter(formule__police=police).values_list('aliment_id', flat=True)\n    aliments = Aliment.objects.filter(id__in=aliments_ids).filter(veos_numero_carte__isnull=False, has_photo_veos=True, statut_import_photo_veos=False).filter(Q(photo__isnull=True) | Q(photo__exact=''))[:1000]\n    #aliments = Aliment.objects.filter(veos_numero_carte__isnull=False, photo__isnull=True)[:1000]\n    #dd(aliments_ids)\n    list_aliment_with_photo_importees = []\n    list_aliment_with_photo_non_importees = []\n    for aliment in aliments:\n        veos_id_aliment = aliment.carte_active().numero[:-1]",
        "detail": "src.shared.veos",
        "documentation": {}
    },
    {
        "label": "get_aliment_id_adoc",
        "kind": 2,
        "importPath": "src.shared.veos",
        "description": "src.shared.veos",
        "peekOfCode": "def get_aliment_id_adoc(veos_id_aliment):\n    ID_ADOC = ''\n    # Les données que vous souhaitez envoyer à l'API\n    data = {\n        \"requests\": [\n            {\n                \"name\": \"WS_SANTE_MOB_IDADOC_BY_ADHERENT\",\n                \"params\": {\n                    \"ID_ADH\": veos_id_aliment\n                }",
        "detail": "src.shared.veos",
        "documentation": {}
    },
    {
        "label": "send_quittances",
        "kind": 2,
        "importPath": "src.shared.veos",
        "description": "src.shared.veos",
        "peekOfCode": "def send_quittances():\n    # récupérer les quittances et les envoyer vers veos\n    # sinistres = Sinistre.objects.filter(id=342121)\n    quittances = Quittance.objects.filter(id=1)\n    temps_debut = time.time()\n    nombre_quittances = quittances.count()\n    for quittance in quittances:\n        # Les données que vous souhaitez envoyer à l'API\n        data = {\n            \"requests\": [",
        "detail": "src.shared.veos",
        "documentation": {}
    },
    {
        "label": "get_taux_euro_by_devise",
        "kind": 2,
        "importPath": "src.shared.veos",
        "description": "src.shared.veos",
        "peekOfCode": "def get_taux_euro_by_devise(devise):\n    # Les données que vous souhaitez envoyer à l'API\n    data = {\n            \"requests\": [\n                {\n                    \"name\": \"WS_GET_TAUX_EURO_BY_DEVISE\",\n                    \"params\":\n                        {\n                            \"devise\": devise\n                        }",
        "detail": "src.shared.veos",
        "documentation": {}
    },
    {
        "label": "get_taux_usd_by_devise",
        "kind": 2,
        "importPath": "src.shared.veos",
        "description": "src.shared.veos",
        "peekOfCode": "def get_taux_usd_by_devise(devise):\n    euro_by_usd = get_taux_euro_by_devise(\"USD\") \n    euro_by_devise = get_taux_euro_by_devise(devise)\n    taux_usd = euro_by_usd/euro_by_devise if euro_by_usd and euro_by_devise else None\n    return taux_usd   \ndef convert_montant_from_devise_to_euro_or_usd(devise_from, montant, euro_or_usd, taux_euro_or_usd=None):\n    if taux_euro_or_usd and taux_euro_or_usd > 0:\n        montant_convert = montant*taux_euro_or_usd\n    elif euro_or_usd == \"USD\":\n        montant_convert = montant*get_taux_usd_by_devise(devise_from)",
        "detail": "src.shared.veos",
        "documentation": {}
    },
    {
        "label": "convert_montant_from_devise_to_euro_or_usd",
        "kind": 2,
        "importPath": "src.shared.veos",
        "description": "src.shared.veos",
        "peekOfCode": "def convert_montant_from_devise_to_euro_or_usd(devise_from, montant, euro_or_usd, taux_euro_or_usd=None):\n    if taux_euro_or_usd and taux_euro_or_usd > 0:\n        montant_convert = montant*taux_euro_or_usd\n    elif euro_or_usd == \"USD\":\n        montant_convert = montant*get_taux_usd_by_devise(devise_from)\n    else:\n        montant_convert = montant*get_taux_euro_by_devise(devise_from)\n    return montant_convert\ndef get_clients_from_veos():\n    cpt_anciens_clients = 0",
        "detail": "src.shared.veos",
        "documentation": {}
    },
    {
        "label": "get_clients_from_veos",
        "kind": 2,
        "importPath": "src.shared.veos",
        "description": "src.shared.veos",
        "peekOfCode": "def get_clients_from_veos():\n    cpt_anciens_clients = 0\n    cpt_nouveaux_clients = 0\n    cpt_tous_clients = 0\n    cpt_grinter = 0\n    cpt_apporteur = 0\n    cpt_apporteur_inter = 0\n    cpt_grinter_old = 0\n    cpt_apporteur_old = 0\n    cpt_apporteur_inter_old = 0",
        "detail": "src.shared.veos",
        "documentation": {}
    },
    {
        "label": "import_periode_veos_manuellement",
        "kind": 2,
        "importPath": "src.shared.veos",
        "description": "src.shared.veos",
        "peekOfCode": "def import_periode_veos_manuellement(request):\n    cpt_anciennes_polices = 0\n    cpt_nouvelles_polices = 0\n    cpt_toutes_polices=0\n    periode_veos = PeriodeVeos.objects.filter(STATUT_IMPORT=False).order_by('ID_NPOL')[:1000]\n    cpt = 0\n    #dd(polices_veos)\n    if periode_veos:\n        for periode in periode_veos:\n            police = Police.objects.filter(veos_id_npol=periode.ID_NPOL).first()",
        "detail": "src.shared.veos",
        "documentation": {}
    },
    {
        "label": "API_URL_PROD",
        "kind": 5,
        "importPath": "src.shared.veos",
        "description": "src.shared.veos",
        "peekOfCode": "API_URL_PROD = \"https://inov.prod-veos.iga.fr/rs/rsExtranet2\"\nAPI_URL_PREPROD = \"https://inov.preprod-veos.iga.fr/rs/rsExtranet2\"#--pre\nAPI_URL_PREPROD_UPD_QUI = \"https://inov.preprod-veos.iga.fr/rs\"#--pre\nAPI_URL_REPORTING_PREPROD_UPD_QUI = \"https://inovreporting.preprod-veos.iga.fr/rs\"#--pre\nAPI_URL_PROD_UPD_QUI = \"https://inov.prod-veos.iga.fr/rs\"#--pre\nAPI_URL_REPORTING_PREPROD = \"https://inovreporting.preprod-veos.iga.fr/rs/rsExtranet2\"#--pre\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\ndef get_api_url():\n    env = environ.Env()",
        "detail": "src.shared.veos",
        "documentation": {}
    },
    {
        "label": "API_URL_PREPROD",
        "kind": 5,
        "importPath": "src.shared.veos",
        "description": "src.shared.veos",
        "peekOfCode": "API_URL_PREPROD = \"https://inov.preprod-veos.iga.fr/rs/rsExtranet2\"#--pre\nAPI_URL_PREPROD_UPD_QUI = \"https://inov.preprod-veos.iga.fr/rs\"#--pre\nAPI_URL_REPORTING_PREPROD_UPD_QUI = \"https://inovreporting.preprod-veos.iga.fr/rs\"#--pre\nAPI_URL_PROD_UPD_QUI = \"https://inov.prod-veos.iga.fr/rs\"#--pre\nAPI_URL_REPORTING_PREPROD = \"https://inovreporting.preprod-veos.iga.fr/rs/rsExtranet2\"#--pre\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\ndef get_api_url():\n    env = environ.Env()\n    environ.Env.read_env(env_file=str(BASE_DIR / \"inov\" / \".env\"))",
        "detail": "src.shared.veos",
        "documentation": {}
    },
    {
        "label": "API_URL_PREPROD_UPD_QUI",
        "kind": 5,
        "importPath": "src.shared.veos",
        "description": "src.shared.veos",
        "peekOfCode": "API_URL_PREPROD_UPD_QUI = \"https://inov.preprod-veos.iga.fr/rs\"#--pre\nAPI_URL_REPORTING_PREPROD_UPD_QUI = \"https://inovreporting.preprod-veos.iga.fr/rs\"#--pre\nAPI_URL_PROD_UPD_QUI = \"https://inov.prod-veos.iga.fr/rs\"#--pre\nAPI_URL_REPORTING_PREPROD = \"https://inovreporting.preprod-veos.iga.fr/rs/rsExtranet2\"#--pre\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\ndef get_api_url():\n    env = environ.Env()\n    environ.Env.read_env(env_file=str(BASE_DIR / \"inov\" / \".env\"))\n    ENVIRONMENT = env(\"ENVIRONMENT\")",
        "detail": "src.shared.veos",
        "documentation": {}
    },
    {
        "label": "API_URL_REPORTING_PREPROD_UPD_QUI",
        "kind": 5,
        "importPath": "src.shared.veos",
        "description": "src.shared.veos",
        "peekOfCode": "API_URL_REPORTING_PREPROD_UPD_QUI = \"https://inovreporting.preprod-veos.iga.fr/rs\"#--pre\nAPI_URL_PROD_UPD_QUI = \"https://inov.prod-veos.iga.fr/rs\"#--pre\nAPI_URL_REPORTING_PREPROD = \"https://inovreporting.preprod-veos.iga.fr/rs/rsExtranet2\"#--pre\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\ndef get_api_url():\n    env = environ.Env()\n    environ.Env.read_env(env_file=str(BASE_DIR / \"inov\" / \".env\"))\n    ENVIRONMENT = env(\"ENVIRONMENT\")\n    url = API_URL_PROD if ENVIRONMENT == \"PROD\" else API_URL_PREPROD",
        "detail": "src.shared.veos",
        "documentation": {}
    },
    {
        "label": "API_URL_PROD_UPD_QUI",
        "kind": 5,
        "importPath": "src.shared.veos",
        "description": "src.shared.veos",
        "peekOfCode": "API_URL_PROD_UPD_QUI = \"https://inov.prod-veos.iga.fr/rs\"#--pre\nAPI_URL_REPORTING_PREPROD = \"https://inovreporting.preprod-veos.iga.fr/rs/rsExtranet2\"#--pre\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\ndef get_api_url():\n    env = environ.Env()\n    environ.Env.read_env(env_file=str(BASE_DIR / \"inov\" / \".env\"))\n    ENVIRONMENT = env(\"ENVIRONMENT\")\n    url = API_URL_PROD if ENVIRONMENT == \"PROD\" else API_URL_PREPROD\n    return url",
        "detail": "src.shared.veos",
        "documentation": {}
    },
    {
        "label": "API_URL_REPORTING_PREPROD",
        "kind": 5,
        "importPath": "src.shared.veos",
        "description": "src.shared.veos",
        "peekOfCode": "API_URL_REPORTING_PREPROD = \"https://inovreporting.preprod-veos.iga.fr/rs/rsExtranet2\"#--pre\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\ndef get_api_url():\n    env = environ.Env()\n    environ.Env.read_env(env_file=str(BASE_DIR / \"inov\" / \".env\"))\n    ENVIRONMENT = env(\"ENVIRONMENT\")\n    url = API_URL_PROD if ENVIRONMENT == \"PROD\" else API_URL_PREPROD\n    return url\nAPI_URL = get_api_url()",
        "detail": "src.shared.veos",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "src.shared.veos",
        "description": "src.shared.veos",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\ndef get_api_url():\n    env = environ.Env()\n    environ.Env.read_env(env_file=str(BASE_DIR / \"inov\" / \".env\"))\n    ENVIRONMENT = env(\"ENVIRONMENT\")\n    url = API_URL_PROD if ENVIRONMENT == \"PROD\" else API_URL_PREPROD\n    return url\nAPI_URL = get_api_url()\ndef getToken():\n    try:",
        "detail": "src.shared.veos",
        "documentation": {}
    },
    {
        "label": "API_URL",
        "kind": 5,
        "importPath": "src.shared.veos",
        "description": "src.shared.veos",
        "peekOfCode": "API_URL = get_api_url()\ndef getToken():\n    try:\n        api_url = f\"{API_URL}/login\"\n        pprint(api_url)\n        # Les données que vous souhaitez envoyer à l'API\n        data = {\n            \"uid\": \"WS\",\n            \"passwd\": \"WS1234\"\n        }",
        "detail": "src.shared.veos",
        "documentation": {}
    },
    {
        "label": "BEARER_TOKEN",
        "kind": 5,
        "importPath": "src.shared.veos",
        "description": "src.shared.veos",
        "peekOfCode": "BEARER_TOKEN = getToken()\ndef call_api_with_data(data):\n    # Construire l'URL de l'API en utilisant la variable API_URL\n    api_url = f\"{API_URL}/boBy/list\"\n    error_message = \"Impossible de récupérer les données sur VEOS.\"\n    # dd(error_message)\n    try:\n        # refresh token\n        BEARER_TOKEN = getToken()\n        print(f\"Token : {BEARER_TOKEN}\")",
        "detail": "src.shared.veos",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "src.sinistre.management.commands.recalcule_montant_refacture_garant_client",
        "description": "src.sinistre.management.commands.recalcule_montant_refacture_garant_client",
        "peekOfCode": "class Command(BaseCommand):\n    help = 'Execution de mise à jour des montants à refacture au garants et aux clients'\n    def handle(self, *args, **options):\n        self.stdout.write(self.style.SUCCESS(f'Commande exécutée !'))\n        try:\n            sinistres = Sinistre.objects.filter(dossier_sinistre_id__isnull=False, recalcule_mt_refact_garant_client=False, type_prefinancement_id=1) #\n            nombre_update = 0\n            for sinistre in sinistres:\n                self.stdout.write(self.style.SUCCESS(f'Sinistre ' + str(sinistre.numero) + \" en cours de recalcule\"))\n                recalcule_montant_refacture_compagnie_et_client(sinistre)",
        "detail": "src.sinistre.management.commands.recalcule_montant_refacture_garant_client",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "src.sinistre.management.commands.regenerer_bordereau_paiement_rd_bn",
        "description": "src.sinistre.management.commands.regenerer_bordereau_paiement_rd_bn",
        "peekOfCode": "class Command(BaseCommand):\n    help = 'Execution de mise à jour des retenues des sinistre notamment AIB pour le benin'\n    def handle(self, *args, **options):\n        self.stdout.write(self.style.SUCCESS(f'Commande exécutée !'))\n        sinistres_concernes_ids = Sinistre.objects.filter(prestataire__bureau__code=\"BN01\", dossier_sinistre_id__isnull=False, dossier_sinistre__type_remboursement__code=\"RD\", observation='Retrait taux retenue sur les RD').values_list('bordereau_ordonnancement_id', flat=True)\n        paiement_comptables_concernees = PaiementComptable.objects.filter(bordereau_ordonnancement_id__in=sinistres_concernes_ids)\n        nombre_update = 0\n        for paiement_comptable in paiement_comptables_concernees:\n            self.stdout.write(self.style.SUCCESS(f'Mise à jour du BORDEREAU DE PAIEMENT COMPTABLE de N°' + str(paiement_comptable.numero)))\n            try:",
        "detail": "src.sinistre.management.commands.regenerer_bordereau_paiement_rd_bn",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "src.sinistre.management.commands.update_date_survenance_sinistres_avec_seance",
        "description": "src.sinistre.management.commands.update_date_survenance_sinistres_avec_seance",
        "peekOfCode": "class Command(BaseCommand):\n    help = 'Execution de mise à jour des date de soins des sinistres avec séance'\n    def handle(self, *args, **options):\n        self.stdout.write(self.style.SUCCESS('Commande exécutée !'))\n        try:\n            # Filter sinistres based on the given criteria\n            sinistres = Sinistre.objects.filter(acte__option_seance=1, dossier_sinistre_id__isnull=False)\n            # Get unique dossier_sinistre_ids\n            dossier_ids = sinistres.values_list('dossier_sinistre_id', flat=True).distinct()\n            nombre_update = 0",
        "detail": "src.sinistre.management.commands.update_date_survenance_sinistres_avec_seance",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "src.sinistre.management.commands.updateretenuesinistre_bn",
        "description": "src.sinistre.management.commands.updateretenuesinistre_bn",
        "peekOfCode": "class Command(BaseCommand):\n    help = 'Execution de mise à jour des retenues des sinistre notamment AIB pour le benin'\n    def handle(self, *args, **options):\n        self.stdout.write(self.style.SUCCESS(f'Commande exécutée !'))\n        try:\n            sinistres = Sinistre.objects.filter(prestataire__bureau__code=\"BN01\", dossier_sinistre_id__isnull=False)\n            nombre_update_new = 0\n            nombre_update = 0\n            for sinistre in sinistres:\n                self.stdout.write(self.style.SUCCESS(f'Mise à jour du sinistre N°' + str(sinistre.numero)))",
        "detail": "src.sinistre.management.commands.updateretenuesinistre_bn",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "src.sinistre.migrations.0001_initial",
        "description": "src.sinistre.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('configurations', '0001_initial'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n        ('production', '0001_initial'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='BordereauOrdonnancement',",
        "detail": "src.sinistre.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "DossierSinistreAdmin",
        "kind": 6,
        "importPath": "src.sinistre.admin",
        "description": "src.sinistre.admin",
        "peekOfCode": "class DossierSinistreAdmin(admin.ModelAdmin):\n    list_filter = ('numero',)\n    list_display = ('numero',)\n    search_field = ('numero',)\nclass SinistreAdmin(admin.ModelAdmin):\n    list_filter = ('numero',)\n    list_display = ('numero',)\n    search_field = ('numero',)\nadmin.site.register(DossierSinistre,)\n#admin.site.register(Sinistre)",
        "detail": "src.sinistre.admin",
        "documentation": {}
    },
    {
        "label": "SinistreAdmin",
        "kind": 6,
        "importPath": "src.sinistre.admin",
        "description": "src.sinistre.admin",
        "peekOfCode": "class SinistreAdmin(admin.ModelAdmin):\n    list_filter = ('numero',)\n    list_display = ('numero',)\n    search_field = ('numero',)\nadmin.site.register(DossierSinistre,)\n#admin.site.register(Sinistre)\nclass DemandeRemboursementMobileAdmin(admin.ModelAdmin):\n    list_display = (\n        'date_sinistre', 'acte', 'prestataire', 'montant_a_rembourser',\n        'beneficiaire', 'adherent_principal', 'numero_remboursement', 'statut', 'action'",
        "detail": "src.sinistre.admin",
        "documentation": {}
    },
    {
        "label": "DemandeRemboursementMobileAdmin",
        "kind": 6,
        "importPath": "src.sinistre.admin",
        "description": "src.sinistre.admin",
        "peekOfCode": "class DemandeRemboursementMobileAdmin(admin.ModelAdmin):\n    list_display = (\n        'date_sinistre', 'acte', 'prestataire', 'montant_a_rembourser',\n        'beneficiaire', 'adherent_principal', 'numero_remboursement', 'statut', 'action'\n    )\n    list_filter = ('beneficiaire', 'acte', 'bureau', 'mode_remboursement')\n    search_fields = ('beneficiaire__nom', 'acte__libelle', 'prestataire__nom', 'numero_remboursement')\n    list_per_page = 10\n    # Optimize database queries for related objects\n    def get_queryset(self, request):",
        "detail": "src.sinistre.admin",
        "documentation": {}
    },
    {
        "label": "admin.site",
        "kind": 5,
        "importPath": "src.sinistre.admin",
        "description": "src.sinistre.admin",
        "peekOfCode": "admin.site = custom_admin_site\nadmin.site.site_header = 'INOV - SINISTRE'\nclass DossierSinistreAdmin(admin.ModelAdmin):\n    list_filter = ('numero',)\n    list_display = ('numero',)\n    search_field = ('numero',)\nclass SinistreAdmin(admin.ModelAdmin):\n    list_filter = ('numero',)\n    list_display = ('numero',)\n    search_field = ('numero',)",
        "detail": "src.sinistre.admin",
        "documentation": {}
    },
    {
        "label": "admin.site.site_header",
        "kind": 5,
        "importPath": "src.sinistre.admin",
        "description": "src.sinistre.admin",
        "peekOfCode": "admin.site.site_header = 'INOV - SINISTRE'\nclass DossierSinistreAdmin(admin.ModelAdmin):\n    list_filter = ('numero',)\n    list_display = ('numero',)\n    search_field = ('numero',)\nclass SinistreAdmin(admin.ModelAdmin):\n    list_filter = ('numero',)\n    list_display = ('numero',)\n    search_field = ('numero',)\nadmin.site.register(DossierSinistre,)",
        "detail": "src.sinistre.admin",
        "documentation": {}
    },
    {
        "label": "SinistreConfig",
        "kind": 6,
        "importPath": "src.sinistre.apps",
        "description": "src.sinistre.apps",
        "peekOfCode": "class SinistreConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'sinistre'\n    verbose_name = 'Sinistre'",
        "detail": "src.sinistre.apps",
        "documentation": {}
    },
    {
        "label": "requete_liste_sinistre_ordonnancee_par_period",
        "kind": 2,
        "importPath": "src.sinistre.helper_sinistre",
        "description": "src.sinistre.helper_sinistre",
        "peekOfCode": "def requete_liste_sinistre_ordonnancee_par_period(bureau_id, date_debut, date_fin, reference_facture):\n    print(date_debut)\n    print(date_fin)\n    requete = f\"\"\"\n    SELECT\n    CONCAT(COALESCE(clt.nom),' ', COALESCE(clt.prenoms, '')) 'CLIENT',\n    doss_sin.numero 'NUMERO_DOSSIER',\n    pl.numero 'NUMERO_POLICE',\n    cart.numero 'NUMERO_CARTE',\n    alm.nom 'NOM_PATIENT',",
        "detail": "src.sinistre.helper_sinistre",
        "documentation": {}
    },
    {
        "label": "requete_liste_sinistre_ordonnancee_par_period_par_prestataire",
        "kind": 2,
        "importPath": "src.sinistre.helper_sinistre",
        "description": "src.sinistre.helper_sinistre",
        "peekOfCode": "def requete_liste_sinistre_ordonnancee_par_period_par_prestataire(bureau_id, date_debut, date_fin, prestataire_id, reference_facture):\n    requete = f\"\"\"\n    SELECT\n    CONCAT(COALESCE(clt.nom),' ', COALESCE(clt.prenoms, '')) 'CLIENT',\n    doss_sin.numero 'NUMERO_DOSSIER',\n    pl.numero 'NUMERO_POLICE',\n    cart.numero 'NUMERO_CARTE',\n    alm.nom 'NOM_PATIENT',\n    alm.prenoms 'PRENOM_PATIENT',\n    alm.matricule_employe 'MATRICULE',",
        "detail": "src.sinistre.helper_sinistre",
        "documentation": {}
    },
    {
        "label": "requete_liste_sinistre_ordonnancee_par_period_par_beneficiaire",
        "kind": 2,
        "importPath": "src.sinistre.helper_sinistre",
        "description": "src.sinistre.helper_sinistre",
        "peekOfCode": "def requete_liste_sinistre_ordonnancee_par_period_par_beneficiaire(bureau_id, date_debut, date_fin, beneficiaire_id, reference_facture):\n    requete = f\"\"\"\n    SELECT\n    CONCAT(COALESCE(clt.nom),' ', COALESCE(clt.prenoms, '')) 'CLIENT',\n    doss_sin.numero 'NUMERO_DOSSIER',\n    pl.numero 'NUMERO_POLICE',\n    cart.numero 'NUMERO_CARTE',\n    alm.nom 'NOM_PATIENT',\n    alm.prenoms 'PRENOM_PATIENT',\n    alm.matricule_employe 'MATRICULE',",
        "detail": "src.sinistre.helper_sinistre",
        "documentation": {}
    },
    {
        "label": "requete_demandes_accords_prealables_traitees_par_les_medecins_conseil",
        "kind": 2,
        "importPath": "src.sinistre.helper_sinistre",
        "description": "src.sinistre.helper_sinistre",
        "peekOfCode": "def requete_demandes_accords_prealables_traitees_par_les_medecins_conseil(bureau_id, date_debut_survenance_demandes_accords_prealables_traitees, date_fin_survenance_demandes_accords_prealables_traitees):\n    requete = f\"\"\"\n    SELECT \n    CONCAT_WS(' ', cus.first_name, cus.last_name) AS medecin_conseil,\n    CONCAT_WS(' ', COALESCE(cl.nom, ''), COALESCE(cl.prenoms, '')) AS client,\n    cie.nom AS garant,\n    po.numero AS numero_police,\n    s.numero AS numero_dossier,\n    c.numero AS numero_carte,\n    adh.nom AS nom_patient,",
        "detail": "src.sinistre.helper_sinistre",
        "documentation": {}
    },
    {
        "label": "requete_sinistres_traites_et_valides_par_les_gestionnaires",
        "kind": 2,
        "importPath": "src.sinistre.helper_sinistre",
        "description": "src.sinistre.helper_sinistre",
        "peekOfCode": "def requete_sinistres_traites_et_valides_par_les_gestionnaires(bureau_id, date_debut_survenance_sinistres_traites_par_les_gestionnaires, date_fin_survenance_sinistres_traites_par_les_gestionnaires, reference_facture):\n    requete = f\"\"\"\n    SELECT \n    br.code AS code_societe,\n    CONCAT_WS(' ', cus.first_name, cus.last_name) AS gestionnaire,\n    CONCAT_WS(' ', COALESCE(cl.nom, ''), COALESCE(cl.prenoms, '')) AS client,\n    cie.nom AS compagnie,\n    po.numero AS numero_police,\n    s.numero AS numero_dossier,\n    c.numero AS numero_carte,",
        "detail": "src.sinistre.helper_sinistre",
        "documentation": {}
    },
    {
        "label": "requete_liste_sinistre_entre_2date",
        "kind": 2,
        "importPath": "src.sinistre.helper_sinistre",
        "description": "src.sinistre.helper_sinistre",
        "peekOfCode": "def requete_liste_sinistre_entre_2date(bureau_id, date_debut, date_fin, reference_facture):\n    print(\"requete_liste_sinistre_entre_2date\")\n    print(bureau_id)\n    print(date_debut)\n    print(date_fin)\n    requete = f\"\"\"\n    With dataremb as (\n\tselect \n\t    s.id\n\t    ,DATE_FORMAT(pc.date_paiement,\"%d/%m/%Y\") as date_reg",
        "detail": "src.sinistre.helper_sinistre",
        "documentation": {}
    },
    {
        "label": "requete_analyse_prime_compta",
        "kind": 2,
        "importPath": "src.sinistre.helper_sinistre",
        "description": "src.sinistre.helper_sinistre",
        "peekOfCode": "def requete_analyse_prime_compta(request):\n    ActionLog.objects.create(done_by=request.user, action=\"execution_requete_excel_compta\",\n                             description=\"Extraction de la requete ANALYSE_PRIMES\",\n                             table=\"\",\n                             row=None, data_before=None,\n                             data_after=None)\n    # queryset = Sinistre.objects.filter(bordereau_ordonnancement__isnull=False).order_by('-id')\n    queryset = Quittance.objects.select_related('police').filter(statut_validite=StatutValidite.VALIDE,\n                                                                 bureau_id=request.user.bureau.id, import_stats=False).order_by('-id')\n    default_taux_euro = get_taux_euro_by_devise(request.user.bureau.pays.devise.code)",
        "detail": "src.sinistre.helper_sinistre",
        "documentation": {}
    },
    {
        "label": "requete_analyse_prime_compta_apporteur",
        "kind": 2,
        "importPath": "src.sinistre.helper_sinistre",
        "description": "src.sinistre.helper_sinistre",
        "peekOfCode": "def requete_analyse_prime_compta_apporteur(request):\n    ActionLog.objects.create(done_by=request.user, action=\"execution_requete_excel_compta\",\n                             description=\"Extraction de la requete ANALYSE_PRIMES\",\n                             table=\"\",\n                             row=None, data_before=None,\n                             data_after=None)\n    # queryset = Sinistre.objects.filter(bordereau_ordonnancement__isnull=False).order_by('-id')\n    queryset = Quittance.objects.select_related('police','compagnie').filter(statut_validite=StatutValidite.VALIDE,\n                                                                 bureau_id=request.user.bureau.id, import_stats=False).order_by('-id')\n    default_taux_euro = get_taux_euro_by_devise(request.user.bureau.pays.devise.code)",
        "detail": "src.sinistre.helper_sinistre",
        "documentation": {}
    },
    {
        "label": "exportation_en_excel_text_brute",
        "kind": 2,
        "importPath": "src.sinistre.helper_sinistre",
        "description": "src.sinistre.helper_sinistre",
        "peekOfCode": "def exportation_en_excel_text_brute(title, header, queryset):\n    # Exportation excel\n    response = HttpResponse(content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')\n    response['Content-Disposition'] = 'attachment; filename=\"mydata.xlsx\"'\n    workbook = openpyxl.Workbook()\n    worksheet = workbook.active\n    worksheet.title = title\n    # Appliquer un style au titre des colonnes\n    bold_font = Font(bold=True)\n    for col_num, column_title in enumerate(header, 1):",
        "detail": "src.sinistre.helper_sinistre",
        "documentation": {}
    },
    {
        "label": "exportation_en_excel_avec_style",
        "kind": 2,
        "importPath": "src.sinistre.helper_sinistre",
        "description": "src.sinistre.helper_sinistre",
        "peekOfCode": "def exportation_en_excel_avec_style(title, header, queryset):\n    # Exportation excel\n    response = HttpResponse(content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')\n    response['Content-Disposition'] = 'attachment; filename=\"mydata.xlsx\"'\n    workbook = openpyxl.Workbook()\n    worksheet = workbook.active\n    worksheet.title = \"SUIVI SP CLIENT PAR FILIALE\"\n    worksheet.title = title\n    # Personnalisation de l'entête\n    bold_font = Font(bold=True)",
        "detail": "src.sinistre.helper_sinistre",
        "documentation": {}
    },
    {
        "label": "exportation_en_excel_avec_style_background_task",
        "kind": 2,
        "importPath": "src.sinistre.helper_sinistre",
        "description": "src.sinistre.helper_sinistre",
        "peekOfCode": "def exportation_en_excel_avec_style_background_task(title, header, queryset):\n    # Exportation excel\n    # response = HttpResponse(content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')\n    # response['Content-Disposition'] = 'attachment; filename=\"mydata.xlsx\"'\n    workbook = openpyxl.Workbook()\n    worksheet = workbook.active\n    worksheet.title = title\n    for col_num, column_title in enumerate(header, 1):\n        cell = worksheet.cell(row=1, column=col_num)\n        cell.value = column_title",
        "detail": "src.sinistre.helper_sinistre",
        "documentation": {}
    },
    {
        "label": "requete_liste_des_sp_client_par_filiale",
        "kind": 2,
        "importPath": "src.sinistre.helper_sinistre",
        "description": "src.sinistre.helper_sinistre",
        "peekOfCode": "def requete_liste_des_sp_client_par_filiale(code_bureau, sp_a_la_date_du):\n    return f\"\"\"\n    SELECT \n    REQ.nom_cie as \"ASSUREUR\",\n    REQ.nom2_per as \"SOUSCRIPTEUR\",\n    REQ.num_pol as \"N° POLICE GARANT\",\n    REQ.dateEffet as \"DEBUT EFFET POLICE\",\n    REQ.proch_echeance as \"ECHEANCE POLICE\",\n    REQ.mt_regle as \"SINISTRE COURANT\",\n    CASE WHEN (REQ.Period_totale > 0 AND REQ.Period_consommee >0) THEN round((REQ.prime_net * REQ.Period_consommee /     REQ.Period_totale),2) ELSE 0 END as \"PRIME TOTALE PERIODE\",",
        "detail": "src.sinistre.helper_sinistre",
        "documentation": {}
    },
    {
        "label": "load_backgroound_request_task",
        "kind": 2,
        "importPath": "src.sinistre.helper_sinistre",
        "description": "src.sinistre.helper_sinistre",
        "peekOfCode": "def load_backgroound_request_task():\n    tasks = BackgroundQueryTask.objects.filter(status=\"ENATT\").all()\n    print(\"task\")\n    print(tasks)\n    print(len(tasks))\n    for task in tasks:\n        try:\n            # mise a jour du status de la tache\n            task.status = \"ENCOURS\"\n            task.save()",
        "detail": "src.sinistre.helper_sinistre",
        "documentation": {}
    },
    {
        "label": "requete_liste_paiement_sinistre_sante_entre_deux_dates",
        "kind": 2,
        "importPath": "src.sinistre.helper_sinistre",
        "description": "src.sinistre.helper_sinistre",
        "peekOfCode": "def requete_liste_paiement_sinistre_sante_entre_deux_dates(code_bureau, date_debut_paiment_sinisre, date_fin_paiment_sinisre, reference_facture, numero_police):\n    requete = f\"\"\"\n        select \n        concat_ws(COALESCE(cl.nom,''), ' ', COALESCE(cl.prenoms,'')) as client\n        ,s.numero as numero_dossier\n        ,po.numero as numero_police\n        ,c.numero as numero_carte\n        ,adh.nom as nom_patient\n        ,adh.prenoms as prenom_patient\n        ,(SELECT libelle from qualite_beneficiaire where id = adh.qualite_beneficiaire_id) as qualite_patient",
        "detail": "src.sinistre.helper_sinistre",
        "documentation": {}
    },
    {
        "label": "requete_liste_sinistre_saisies_entre_2date",
        "kind": 2,
        "importPath": "src.sinistre.helper_sinistre",
        "description": "src.sinistre.helper_sinistre",
        "peekOfCode": "def requete_liste_sinistre_saisies_entre_2date(bureau_id, date_debut, date_fin, reference_facture):\n    print(\"requete_liste_sinistre_saisies_entre_2date @@@@@@@@@@@@@@@@@@@@@@@@@\")\n    print(bureau_id)\n    print(date_debut)\n    print(date_fin)\n    requete = f\"\"\"\n    With dataremb as (\n\tselect \n\t    s.id\n\t    ,DATE_FORMAT(pc.date_paiement,\"%d/%m/%Y\") as date_reg",
        "detail": "src.sinistre.helper_sinistre",
        "documentation": {}
    },
    {
        "label": "extraction_des_sinistres_traites_valides",
        "kind": 2,
        "importPath": "src.sinistre.helper_sinistre",
        "description": "src.sinistre.helper_sinistre",
        "peekOfCode": "def extraction_des_sinistres_traites_valides(bureau_id, date_debut, date_fin):\n    print(\"requete_extraction_des_sinistres_traites_valides\")\n    print(bureau_id)\n    print(date_debut)\n    print(date_fin)\n    requete = f\"\"\"\n            SELECT   \n            CONCAT_WS(' ', COALESCE(cl.nom, ''), COALESCE(cl.prenoms, '')) AS client,\n            s.numero AS numero_dossier,\n            po.numero AS numero_police,",
        "detail": "src.sinistre.helper_sinistre",
        "documentation": {}
    },
    {
        "label": "extraction_demandes_accords_prealables_traitees_par_medecins_conseil",
        "kind": 2,
        "importPath": "src.sinistre.helper_sinistre",
        "description": "src.sinistre.helper_sinistre",
        "peekOfCode": "def extraction_demandes_accords_prealables_traitees_par_medecins_conseil(bureau_id, date_debut, date_fin):\n    print(\"requete_extraction_demandes_accords_prealables_traitees_par_medecins_conseil\")\n    print(bureau_id)\n    print(date_debut)\n    print(date_fin)\n    requete = f\"\"\"\n    SELECT   \n        CONCAT_WS(' ', COALESCE(cl.nom, ''), COALESCE(cl.prenoms, '')) AS client,\n        s.numero AS numero_dossier,\n        po.numero AS numero_police,",
        "detail": "src.sinistre.helper_sinistre",
        "documentation": {}
    },
    {
        "label": "get_retenue_selon_contexte",
        "kind": 2,
        "importPath": "src.sinistre.helper_sinistre",
        "description": "src.sinistre.helper_sinistre",
        "peekOfCode": "def get_retenue_selon_contexte(prestataire_id):\n    prestataire = Prestataire.objects.filter(pk=prestataire_id).first()\n    # taux_retenues = sum(retenue.taux or 0 for retenue in Retenue.objects.filter(bureau=prestataire.bureau).filter(Q(secteur=prestataire.secteur) | Q(secteur__isnull=True)).filter(Q(type_prestataire__contains=prestataire.type_prestataire)) | Q(type_prestataire__isnull=True)) if prestataire else 0\n    if not prestataire:\n        return 0\n    retenues = Retenue.objects.filter(\n        bureau=prestataire.bureau\n    ).filter(\n        Q(secteur=prestataire.secteur) | Q(secteur__isnull=True)\n    ).filter(",
        "detail": "src.sinistre.helper_sinistre",
        "documentation": {}
    },
    {
        "label": "DossierSinistre",
        "kind": 6,
        "importPath": "src.sinistre.models",
        "description": "src.sinistre.models",
        "peekOfCode": "class DossierSinistre(models.Model):\n    bureau = models.ForeignKey(Bureau, null=True, on_delete=models.RESTRICT)\n    type_remboursement = models.ForeignKey(TypeRemboursement, null=True, on_delete=models.RESTRICT)\n    mode_creation = models.ForeignKey(ModeCreation, null=True, on_delete=models.RESTRICT)\n    created_by = models.ForeignKey(User, null=True, on_delete=models.RESTRICT)\n    updated_by = models.ForeignKey(User, related_name=\"updated_by\", null=True, on_delete=models.RESTRICT)\n    type_prefinancement = models.ForeignKey(TypePrefinancement, null=True, on_delete=models.RESTRICT)\n    type_priseencharge = models.ForeignKey(TypePriseencharge, null=True, on_delete=models.RESTRICT)\n    prestataire = models.ForeignKey(Prestataire, related_name=\"dossiers_sinistres\", null=True, on_delete=models.RESTRICT)\n    centre_prescripteur = models.ForeignKey(Prestataire, related_name=\"centre_prescripteur\", null=True, on_delete=models.RESTRICT)",
        "detail": "src.sinistre.models",
        "documentation": {}
    },
    {
        "label": "FacturePrestataire",
        "kind": 6,
        "importPath": "src.sinistre.models",
        "description": "src.sinistre.models",
        "peekOfCode": "class FacturePrestataire(models.Model):\n    numero = models.CharField(max_length=255, blank=True, null=True, unique=True)\n    bureau = models.ForeignKey(Bureau, null=True, on_delete=models.RESTRICT)\n    type_remboursement = models.ForeignKey(TypeRemboursement, null=True, on_delete=models.RESTRICT)\n    prestataire = models.ForeignKey(Prestataire, null=True, on_delete=models.RESTRICT)\n    adherent_principal = models.ForeignKey(Aliment, null=True, on_delete=models.RESTRICT)\n    assure = models.ForeignKey(Client, null=True, on_delete=models.RESTRICT)\n    periode_comptable = models.ForeignKey(PeriodeComptable, null=True, on_delete=models.RESTRICT)\n    fichier = models.FileField(upload_to=upload_location_factureprestataire, blank=True, default=None, null=True)\n    observation = models.CharField(max_length=255, blank=True, null=True)",
        "detail": "src.sinistre.models",
        "documentation": {}
    },
    {
        "label": "BordereauOrdonnancement",
        "kind": 6,
        "importPath": "src.sinistre.models",
        "description": "src.sinistre.models",
        "peekOfCode": "class BordereauOrdonnancement(models.Model):\n    numero = models.CharField(max_length=255, blank=True, null=True, unique=True)\n    bureau = models.ForeignKey(Bureau, null=True, on_delete=models.RESTRICT)\n    type_remboursement = models.ForeignKey(TypeRemboursement, null=True, on_delete=models.RESTRICT)\n    prestataire = models.ForeignKey(Prestataire, null=True, on_delete=models.RESTRICT)\n    adherent_principal = models.ForeignKey(Aliment, null=True, on_delete=models.RESTRICT)\n    assure = models.ForeignKey(Client, null=True, on_delete=models.RESTRICT)\n    periode_comptable = models.ForeignKey(PeriodeComptable, null=True, on_delete=models.RESTRICT)\n    fichier = models.FileField(upload_to=upload_location_bordereauordonnancement, blank=True, default=None, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)",
        "detail": "src.sinistre.models",
        "documentation": {}
    },
    {
        "label": "PaiementComptable",
        "kind": 6,
        "importPath": "src.sinistre.models",
        "description": "src.sinistre.models",
        "peekOfCode": "class PaiementComptable(models.Model):\n    bureau = models.ForeignKey(Bureau, null=True, on_delete=models.RESTRICT)\n    created_by = models.ForeignKey(User, null=True, on_delete=models.RESTRICT)\n    adherent_principal = models.ForeignKey(Aliment, null=True, on_delete=models.RESTRICT)\n    prestataire = models.ForeignKey(Prestataire, null=True, on_delete=models.RESTRICT)\n    nom_beneficiaire = models.CharField(max_length=100, blank=True, null=True)\n    numero_iban = models.CharField(max_length=50, blank=True, null=True)\n    bordereau_ordonnancement = models.ForeignKey(BordereauOrdonnancement, null=True, on_delete=models.RESTRICT)\n    compagnie = models.ForeignKey(Compagnie, null=True, on_delete=models.RESTRICT)\n    mode_reglement = models.ForeignKey(ModeReglement, null=True, on_delete=models.RESTRICT)",
        "detail": "src.sinistre.models",
        "documentation": {}
    },
    {
        "label": "FactureCompagnie",
        "kind": 6,
        "importPath": "src.sinistre.models",
        "description": "src.sinistre.models",
        "peekOfCode": "class FactureCompagnie(models.Model):\n    bureau = models.ForeignKey(Bureau, null=True, on_delete=models.RESTRICT)\n    created_by = models.ForeignKey(User, null=True, on_delete=models.RESTRICT)\n    compagnie = models.ForeignKey(Compagnie, null=True, on_delete=models.RESTRICT)\n    devise = models.ForeignKey(Devise, null=True, on_delete=models.RESTRICT)\n    numero = models.CharField(max_length=20, blank=True, default=generate_random_invoice_number, unique=True)\n    montant_total = models.BigIntegerField(null=False)\n    montant_regle = models.BigIntegerField(null=True, default=0)\n    montant_restant = models.BigIntegerField(null=True)\n    date_emission = models.DateField(blank=True, null=True)",
        "detail": "src.sinistre.models",
        "documentation": {}
    },
    {
        "label": "ReglementCompagnie",
        "kind": 6,
        "importPath": "src.sinistre.models",
        "description": "src.sinistre.models",
        "peekOfCode": "class ReglementCompagnie(models.Model):\n    bureau = models.ForeignKey(Bureau, null=True, on_delete=models.RESTRICT)\n    created_by = models.ForeignKey(User, null=True, on_delete=models.RESTRICT)\n    compagnie = models.ForeignKey(Compagnie, null=True, on_delete=models.RESTRICT)\n    numero = models.CharField(max_length=50, blank=True, null=True)\n    numero_piece = models.CharField(max_length=50, blank=True, null=True)\n    banque_emettrice = models.CharField(max_length=255, blank=True, null=True)\n    mode_reglement = models.ForeignKey(ModeReglement, null=True, on_delete=models.RESTRICT)\n    banque = models.ForeignKey(Banque, null=True, on_delete=models.RESTRICT)\n    compte_tresorerie = models.ForeignKey(CompteTresorerie, null=True, on_delete=models.RESTRICT)",
        "detail": "src.sinistre.models",
        "documentation": {}
    },
    {
        "label": "ReglementFactureCompagnie",
        "kind": 6,
        "importPath": "src.sinistre.models",
        "description": "src.sinistre.models",
        "peekOfCode": "class ReglementFactureCompagnie(models.Model):\n    bureau = models.ForeignKey(Bureau, null=True, on_delete=models.RESTRICT)\n    created_by = models.ForeignKey(User, null=True, on_delete=models.RESTRICT)\n    reglement_compagnie = models.ForeignKey(ReglementCompagnie, on_delete=models.RESTRICT)\n    facture_compagnie = models.ForeignKey(FactureCompagnie, on_delete=models.RESTRICT)\n    montant_regle = models.DecimalField(max_digits=20, decimal_places=0, blank=True, null=True)\n    observation = models.CharField(max_length=255, null=True)\n    statut_validite = models.fields.CharField(choices=StatutValidite.choices, default=StatutValidite.VALIDE, max_length=15, null=True)\n    created_at = models.DateTimeField(auto_now=True)\n    updated_at = models.DateTimeField(auto_now=True)",
        "detail": "src.sinistre.models",
        "documentation": {}
    },
    {
        "label": "Sinistre",
        "kind": 6,
        "importPath": "src.sinistre.models",
        "description": "src.sinistre.models",
        "peekOfCode": "class Sinistre(models.Model):\n    #\n    veos_id_sin = models.CharField(max_length=50, blank=True, null=True)\n    veos_numero_sin = models.CharField(max_length=50, unique=True, blank=True, null=True)\n    veos_id_npol = models.CharField(max_length=50, blank=True, null=True)\n    veos_code_aliment = models.CharField(max_length=50, blank=True, null=True)\n    veos_code_cie = models.CharField(max_length=50, blank=True, null=True)\n    veos_code_acte = models.CharField(max_length=50, blank=True, null=True)\n    veos_code_affection = models.CharField(max_length=50, blank=True, null=True)\n    veos_code_prestataire = models.CharField(max_length=50, blank=True, null=True)",
        "detail": "src.sinistre.models",
        "documentation": {}
    },
    {
        "label": "RemboursementSinistre",
        "kind": 6,
        "importPath": "src.sinistre.models",
        "description": "src.sinistre.models",
        "peekOfCode": "class RemboursementSinistre(models.Model):\n    created_by = models.ForeignKey(User, related_name=\"remboursements_crees\", null=True, on_delete=models.RESTRICT)\n    designation = models.CharField(max_length=255, blank=True, null=True)\n    sinistre = models.ForeignKey(Sinistre, related_name=\"remboursements\", on_delete=models.RESTRICT)\n    montant = models.DecimalField(max_digits=50, decimal_places=16, null=True)\n    motif = models.CharField(max_length=255, blank=True, null=True)\n    observation = models.CharField(max_length=255, blank=True, null=True)\n    statut = models.fields.CharField(choices=StatutRemboursementSinistre.choices, default=StatutRemboursementSinistre.REFUSE, max_length=15, null=True)\n    option_refacturation = models.fields.CharField(choices=OptionRefacturation.choices, default=OptionRefacturation.NON_REFACTURABLE, max_length=20, null=True)\n    is_invalid = models.BooleanField(default=False)",
        "detail": "src.sinistre.models",
        "documentation": {}
    },
    {
        "label": "ProrogationSinistre",
        "kind": 6,
        "importPath": "src.sinistre.models",
        "description": "src.sinistre.models",
        "peekOfCode": "class ProrogationSinistre(models.Model):\n    created_by = models.ForeignKey(User, null=True, on_delete=models.RESTRICT)\n    reviewed_by = models.ForeignKey(User, null=True, related_name='reviewed_by', on_delete=models.RESTRICT)\n    sinistre = models.ForeignKey(Sinistre, related_name=\"prorogations\", on_delete=models.RESTRICT)\n    motif_demande = models.CharField(max_length=255, blank=True, null=True)\n    motif_rejet = models.CharField(max_length=255, blank=True, null=True)\n    jour_demande = models.IntegerField(default=0)\n    jour_accorde = models.IntegerField(default=0)\n    date_entree = models.DateTimeField(null=True)\n    date_sortie = models.DateTimeField(null=True)",
        "detail": "src.sinistre.models",
        "documentation": {}
    },
    {
        "label": "HistoriqueOrdonnancementSinistre",
        "kind": 6,
        "importPath": "src.sinistre.models",
        "description": "src.sinistre.models",
        "peekOfCode": "class HistoriqueOrdonnancementSinistre(models.Model):\n    created_by = models.ForeignKey(User, null=True, on_delete=models.RESTRICT)\n    bordereau_ordonnancement = models.ForeignKey(BordereauOrdonnancement, on_delete=models.RESTRICT)\n    sinistre = models.ForeignKey(Sinistre, on_delete=models.RESTRICT)\n    montant_ordonnance = models.DecimalField(max_digits=50, decimal_places=16, null=True)\n    observation = models.CharField(max_length=255, blank=True, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    class Meta:\n        db_table = 'historique_ordonnancement_sinistre'",
        "detail": "src.sinistre.models",
        "documentation": {}
    },
    {
        "label": "DocumentDossierSinistre",
        "kind": 6,
        "importPath": "src.sinistre.models",
        "description": "src.sinistre.models",
        "peekOfCode": "class DocumentDossierSinistre(models.Model):\n    dossier_sinistre = models.ForeignKey(DossierSinistre, related_name=\"documents\", on_delete=models.RESTRICT)\n    type_document = models.ForeignKey(TypeDocument, on_delete=models.RESTRICT)\n    nom = models.CharField(max_length=255, blank=True, null=True)\n    fichier = models.FileField(upload_to=upload_location_documentdossiersinistre, blank=True, default=None, null=True)\n    commentaire = models.CharField(max_length=255, blank=True, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    statut = models.fields.CharField(choices=Statut.choices, default=Statut.ACTIF, max_length=15, null=True)\n    def __str__(self):",
        "detail": "src.sinistre.models",
        "documentation": {}
    },
    {
        "label": "ControlePlafond",
        "kind": 6,
        "importPath": "src.sinistre.models",
        "description": "src.sinistre.models",
        "peekOfCode": "class ControlePlafond(models.Model):\n    session_pec = models.CharField(max_length=255, blank=True, null=True)\n    plafond_conso_famille = models.CharField(max_length=255, blank=True, null=True)\n    plafond_conso_individuel = models.CharField(max_length=255, blank=True, null=True)\n    plafond_conso_sous_rubrique = models.CharField(max_length=255, blank=True, null=True)\n    plafond_conso_regroupement_acte = models.CharField(max_length=255, blank=True, null=True)\n    plafond_conso_acte = models.CharField(max_length=255, blank=True, null=True)\n    rubrique = models.ForeignKey(Rubrique, on_delete=models.RESTRICT)\n    sous_rubrique = models.ForeignKey(SousRubrique, null=True, on_delete=models.RESTRICT)\n    regroupement_acte = models.ForeignKey(RegroupementActe, null=True, on_delete=models.RESTRICT)",
        "detail": "src.sinistre.models",
        "documentation": {}
    },
    {
        "label": "SinistreTemporaire",
        "kind": 6,
        "importPath": "src.sinistre.models",
        "description": "src.sinistre.models",
        "peekOfCode": "class SinistreTemporaire(models.Model):\n    session_pec = models.CharField(max_length=100, blank=True, null=True)\n    observation = models.CharField(max_length=255, blank=True, null=True)\n    created_by = models.ForeignKey(User, null=True, on_delete=models.RESTRICT)\n    updated_price_by = models.ForeignKey(User, related_name=\"st_updated_price_by\", null=True, on_delete=models.RESTRICT)\n    approuved_by = models.ForeignKey(User, related_name=\"st_approbateur\", null=True, on_delete=models.RESTRICT)\n    served_by = models.ForeignKey(User, related_name=\"st_serveur\", null=True, on_delete=models.RESTRICT)\n    dossier_sinistre = models.ForeignKey(DossierSinistre, related_name=\"st_sinistres\", null=True, on_delete=models.RESTRICT)\n    aliment = models.ForeignKey(Aliment, null=True, on_delete=models.RESTRICT)\n    adherent_principal = models.ForeignKey(Aliment, related_name=\"st_famille\", null=True, on_delete=models.RESTRICT)",
        "detail": "src.sinistre.models",
        "documentation": {}
    },
    {
        "label": "DemandeRemboursementMobile",
        "kind": 6,
        "importPath": "src.sinistre.models",
        "description": "src.sinistre.models",
        "peekOfCode": "class DemandeRemboursementMobile(models.Model):\n    date_sinistre = models.DateField(blank=True)\n    acte = models.ForeignKey(Acte, on_delete=models.RESTRICT)\n    prestataire = models.ForeignKey(Prestataire, on_delete=models.RESTRICT)\n    beneficiaire = models.ForeignKey(Aliment, related_name='beneficiaire_remboursements', on_delete=models.RESTRICT)\n    adherent_principal = models.ForeignKey(Aliment, null=True, on_delete=models.RESTRICT)\n    bureau = models.ForeignKey(Bureau,  null=True, on_delete=models.RESTRICT)\n    montant_a_rembourser = models.DecimalField(max_digits=20, decimal_places=2)\n    mode_remboursement = models.ForeignKey(ModeReglement, on_delete=models.RESTRICT)\n    numero_remboursement = models.CharField(max_length=100, null=True, blank=True)",
        "detail": "src.sinistre.models",
        "documentation": {}
    },
    {
        "label": "TrackFacture",
        "kind": 6,
        "importPath": "src.sinistre.models",
        "description": "src.sinistre.models",
        "peekOfCode": "class TrackFacture(models.Model):\n    created_by = models.ForeignKey(User, null=True, on_delete=models.RESTRICT)\n    prestataire = models.ForeignKey(Prestataire, null=True, on_delete=models.RESTRICT)\n    code_systeme = models.CharField(max_length=255, blank=True, null=True)\n    reference_facture_prestataire = models.CharField(max_length=255, blank=True, null=True)\n    montant_facture = models.DecimalField(max_digits=20, decimal_places=6, null=True)\n    nombre_feuilles_soins = models.DecimalField(max_digits=20, decimal_places=6, null=True)\n    date_reception = models.CharField(max_length=255, blank=True, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)",
        "detail": "src.sinistre.models",
        "documentation": {}
    },
    {
        "label": "TrackEtape",
        "kind": 6,
        "importPath": "src.sinistre.models",
        "description": "src.sinistre.models",
        "peekOfCode": "class TrackEtape(models.Model):\n    code = models.CharField(max_length=50, blank=True, null=True)\n    libelle = models.CharField(max_length=255, blank=True, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    class Meta:\n        db_table = 'track_etape'\n        verbose_name = 'Etape'\n        verbose_name_plural = 'Etape'\nclass TrackEtapeFacture(models.Model):",
        "detail": "src.sinistre.models",
        "documentation": {}
    },
    {
        "label": "TrackEtapeFacture",
        "kind": 6,
        "importPath": "src.sinistre.models",
        "description": "src.sinistre.models",
        "peekOfCode": "class TrackEtapeFacture(models.Model):\n    created_by = models.ForeignKey(User, null=True, on_delete=models.RESTRICT)\n    track_facture = models.ForeignKey(TrackFacture, on_delete=models.RESTRICT)\n    etape = models.ForeignKey(TrackEtape, null=True, on_delete=models.RESTRICT)\n    observation = models.CharField(max_length=255, blank=True, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    class Meta:\n        db_table = 'track_etape_facture'\n        verbose_name = 'Etape Facture'",
        "detail": "src.sinistre.models",
        "documentation": {}
    },
    {
        "label": "HistoriquePaiementComptableSinistre",
        "kind": 6,
        "importPath": "src.sinistre.models",
        "description": "src.sinistre.models",
        "peekOfCode": "class HistoriquePaiementComptableSinistre(models.Model):\n    created_by = models.ForeignKey(User, null=True, on_delete=models.RESTRICT)\n    paiement_comptable = models.ForeignKey(PaiementComptable, on_delete=models.RESTRICT)\n    sinistre = models.ForeignKey(Sinistre, on_delete=models.RESTRICT)\n    montant_paye = models.DecimalField(max_digits=50, decimal_places=16, null=True)\n    observation = models.CharField(max_length=255, blank=True, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    class Meta:\n        db_table = 'historique_paiement_comptable_sinistre'",
        "detail": "src.sinistre.models",
        "documentation": {}
    },
    {
        "label": "upload_location_factureprestataire",
        "kind": 2,
        "importPath": "src.sinistre.models",
        "description": "src.sinistre.models",
        "peekOfCode": "def upload_location_factureprestataire(instance, filename):\n    filebase, extension = filename.rsplit('.', 1)\n    file_name = datetime.datetime.now().strftime('%Y%m%d%H%M%S')\n    return 'dossiers_sinistres/bordereaux/%s.%s' % (file_name, extension)\nclass FacturePrestataire(models.Model):\n    numero = models.CharField(max_length=255, blank=True, null=True, unique=True)\n    bureau = models.ForeignKey(Bureau, null=True, on_delete=models.RESTRICT)\n    type_remboursement = models.ForeignKey(TypeRemboursement, null=True, on_delete=models.RESTRICT)\n    prestataire = models.ForeignKey(Prestataire, null=True, on_delete=models.RESTRICT)\n    adherent_principal = models.ForeignKey(Aliment, null=True, on_delete=models.RESTRICT)",
        "detail": "src.sinistre.models",
        "documentation": {}
    },
    {
        "label": "upload_location_bordereauordonnancement",
        "kind": 2,
        "importPath": "src.sinistre.models",
        "description": "src.sinistre.models",
        "peekOfCode": "def upload_location_bordereauordonnancement(instance, filename):\n    filebase, extension = filename.rsplit('.', 1)\n    file_name = datetime.datetime.now().strftime('%Y%m%d%H%M%S')\n    return 'dossiers_sinistres/bordereaux/%s.%s' % (file_name, extension)\nclass BordereauOrdonnancement(models.Model):\n    numero = models.CharField(max_length=255, blank=True, null=True, unique=True)\n    bureau = models.ForeignKey(Bureau, null=True, on_delete=models.RESTRICT)\n    type_remboursement = models.ForeignKey(TypeRemboursement, null=True, on_delete=models.RESTRICT)\n    prestataire = models.ForeignKey(Prestataire, null=True, on_delete=models.RESTRICT)\n    adherent_principal = models.ForeignKey(Aliment, null=True, on_delete=models.RESTRICT)",
        "detail": "src.sinistre.models",
        "documentation": {}
    },
    {
        "label": "upload_location_paiementcomptable",
        "kind": 2,
        "importPath": "src.sinistre.models",
        "description": "src.sinistre.models",
        "peekOfCode": "def upload_location_paiementcomptable(instance, filename):\n    filebase, extension = filename.rsplit('.', 1)\n    file_name = datetime.datetime.now().strftime('%Y%m%d%H%M%S')\n    return 'dossiers_sinistres/bordereaux_paiements_comptables/%s.%s' % (file_name, extension)\nclass PaiementComptable(models.Model):\n    bureau = models.ForeignKey(Bureau, null=True, on_delete=models.RESTRICT)\n    created_by = models.ForeignKey(User, null=True, on_delete=models.RESTRICT)\n    adherent_principal = models.ForeignKey(Aliment, null=True, on_delete=models.RESTRICT)\n    prestataire = models.ForeignKey(Prestataire, null=True, on_delete=models.RESTRICT)\n    nom_beneficiaire = models.CharField(max_length=100, blank=True, null=True)",
        "detail": "src.sinistre.models",
        "documentation": {}
    },
    {
        "label": "generate_random_invoice_number",
        "kind": 2,
        "importPath": "src.sinistre.models",
        "description": "src.sinistre.models",
        "peekOfCode": "def generate_random_invoice_number():\n    return ''.join(random.choices('0123456789', k=8))\nclass FactureCompagnie(models.Model):\n    bureau = models.ForeignKey(Bureau, null=True, on_delete=models.RESTRICT)\n    created_by = models.ForeignKey(User, null=True, on_delete=models.RESTRICT)\n    compagnie = models.ForeignKey(Compagnie, null=True, on_delete=models.RESTRICT)\n    devise = models.ForeignKey(Devise, null=True, on_delete=models.RESTRICT)\n    numero = models.CharField(max_length=20, blank=True, default=generate_random_invoice_number, unique=True)\n    montant_total = models.BigIntegerField(null=False)\n    montant_regle = models.BigIntegerField(null=True, default=0)",
        "detail": "src.sinistre.models",
        "documentation": {}
    },
    {
        "label": "upload_location_documentdossiersinistre",
        "kind": 2,
        "importPath": "src.sinistre.models",
        "description": "src.sinistre.models",
        "peekOfCode": "def upload_location_documentdossiersinistre(instance, filename):\n    filebase, extension = filename.rsplit('.', 1)\n    file_name = datetime.datetime.now().strftime('%Y%m%d%H%M%S')\n    return 'dossiers_sinistres/documents/%s.%s' % (file_name, extension)\nclass DocumentDossierSinistre(models.Model):\n    dossier_sinistre = models.ForeignKey(DossierSinistre, related_name=\"documents\", on_delete=models.RESTRICT)\n    type_document = models.ForeignKey(TypeDocument, on_delete=models.RESTRICT)\n    nom = models.CharField(max_length=255, blank=True, null=True)\n    fichier = models.FileField(upload_to=upload_location_documentdossiersinistre, blank=True, default=None, null=True)\n    commentaire = models.CharField(max_length=255, blank=True, null=True)",
        "detail": "src.sinistre.models",
        "documentation": {}
    },
    {
        "label": "'''content_type",
        "kind": 5,
        "importPath": "src.sinistre.models",
        "description": "src.sinistre.models",
        "peekOfCode": "'''content_type = ContentType.objects.get_for_model(Sinistre)\npermission = Permission.objects.create(\n    codename='review_sinistre',\n    name='Can review sinistre',\n    content_type=content_type,\n)'''\nclass ControlePlafond(models.Model):\n    session_pec = models.CharField(max_length=255, blank=True, null=True)\n    plafond_conso_famille = models.CharField(max_length=255, blank=True, null=True)\n    plafond_conso_individuel = models.CharField(max_length=255, blank=True, null=True)",
        "detail": "src.sinistre.models",
        "documentation": {}
    },
    {
        "label": "permission",
        "kind": 5,
        "importPath": "src.sinistre.models",
        "description": "src.sinistre.models",
        "peekOfCode": "permission = Permission.objects.create(\n    codename='review_sinistre',\n    name='Can review sinistre',\n    content_type=content_type,\n)'''\nclass ControlePlafond(models.Model):\n    session_pec = models.CharField(max_length=255, blank=True, null=True)\n    plafond_conso_famille = models.CharField(max_length=255, blank=True, null=True)\n    plafond_conso_individuel = models.CharField(max_length=255, blank=True, null=True)\n    plafond_conso_sous_rubrique = models.CharField(max_length=255, blank=True, null=True)",
        "detail": "src.sinistre.models",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "src.sinistre.urls",
        "description": "src.sinistre.urls",
        "peekOfCode": "urlpatterns = [\n    path('dossiersinistre/', DossierSinistresView.as_view(), name='dossiersinistre'),\n    path('dossiersinistre_datatable/', views.dossiersinistre_datatable, name='dossiersinistre_datatable'),\n    path('ententes_prealables/', EntentesPrealablesView.as_view(), name='ententes_prealables'),\n    path('ententes_prealables_datatable/', views.dossiersinistre_datatable, name='ententes_prealables_datatable'),\n    path('dossierstraites/', DossierSinistresTraitesView.as_view(), name='dossierstraites'),\n    path('dossiersinistre_traites_datatable/', views.dossiersinistre_traites_datatable, name='dossiersinistre_traites_datatable'),\n    path('popup_choose_prestataire/', views.popup_choose_prestataire, name='popup_choose_prestataire'),\n    #\n    path('search_benef_by_name_datatable/', views.search_benef_by_name_datatable, name='search_benef_by_name_datatable'),",
        "detail": "src.sinistre.urls",
        "documentation": {}
    },
    {
        "label": "DossierSinistresView",
        "kind": 6,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "class DossierSinistresView(TemplateView):\n    template_name = 'liste_dossiers_sinistres.html'\n    model = Sinistre\n    def get(self, request, *args, **kwargs):\n        context = self.get_context_data(**kwargs)\n        prestataires = Prestataire.objects.filter(\n            bureau=request.user.bureau,\n            status=True,\n            id__in=DossierSinistre.objects.filter(\n                statut_validite=\"VALIDE\"",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "EntentesPrealablesView",
        "kind": 6,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "class EntentesPrealablesView(TemplateView):\n    template_name = 'liste_ententes_prealables.html'\n    model = Sinistre\n    def get(self, request, *args, **kwargs):\n        context = self.get_context_data(**kwargs)\n        prestataires = Prestataire.objects.filter(\n            bureau=request.user.bureau,\n            status=True,\n            id__in=DossierSinistre.objects.filter(\n                statut_validite=\"VALIDE\"",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "DossierSinistresTraitesView",
        "kind": 6,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "class DossierSinistresTraitesView(TemplateView):\n    template_name = 'liste_dossiers_traites.html'\n    model = Sinistre\n    def get(self, request, *args, **kwargs):\n        context = self.get_context_data(**kwargs)\n        prestataires = Prestataire.objects.filter(\n            bureau=request.user.bureau,\n            status=True,\n            id__in=DossierSinistre.objects.filter(\n                statut_validite=\"VALIDE\"",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "DossiersSinistresPhysiquesGestionnairesView",
        "kind": 6,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "class DossiersSinistresPhysiquesGestionnairesView(TemplateView):\n    template_name = 'liste_dossiers_sinistres_physiques_gestionnaires.html'\n    model = Sinistre\n    def get(self, request, *args, **kwargs):\n        context = self.get_context_data(**kwargs)\n        sinistres = []\n        prestataires = Prestataire.objects.filter(bureau=request.user.bureau, status=True).exclude(\n            type_prestataire__code=\"PRES02\").exclude(type_prestataire__code__isnull=True)  # exclure les pharmacies\n        centres_prescripteurs = Prestataire.objects.filter(type_prestataire__code=\"PRES01\", bureau=request.user.bureau, status=True)\n        prescripteurs = [p for p in Prescripteur.objects.filter(statut=True) if",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "AnnulerSinistreGestionnairesView",
        "kind": 6,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "class AnnulerSinistreGestionnairesView(TemplateView):\n    template_name = 'annuler_sinistre.html'\n    model = Sinistre\n    #traitement à l'appel du lien en get\n    def get(self, request, *args, **kwargs):\n        context = self.get_context_data(**kwargs)\n        context['breadcrumbs'] = [\n            {'title': 'Sinistres', 'url': ''},\n            {'title': 'Annulation', 'url': ''},\n        ]",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "AnnulerFactureGestionnairesView",
        "kind": 6,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "class AnnulerFactureGestionnairesView(TemplateView):\n    template_name = 'annuler_facture.html'\n    model = Sinistre\n    #traitement à l'appel du lien en get\n    def get(self, request, *args, **kwargs):\n        context = self.get_context_data(**kwargs)\n        context['breadcrumbs'] = [\n            {'title': 'Factures', 'url': ''},\n            {'title': 'Annulation', 'url': ''},\n        ]",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "AnnulerBordereauOrdonnancementView",
        "kind": 6,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "class AnnulerBordereauOrdonnancementView(TemplateView):\n    template_name = 'annuler_bordereau_ordonnancement.html'\n    model = BordereauOrdonnancement\n    # traitement à l'appel du lien en get\n    def get(self, request, *args, **kwargs):\n        context = self.get_context_data(**kwargs)\n        context['breadcrumbs'] = [\n            {'title': 'Factures', 'url': ''},\n            {'title': 'Annulation', 'url': ''},\n        ]",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "SaisiePrestationGestionnairesView",
        "kind": 6,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "class SaisiePrestationGestionnairesView(TemplateView):\n    template_name = 'form_saisie_prestation_gestionnaires.html'\n    model = Sinistre\n    def get(self, request, prestataire_id=None, *args, **kwargs):\n        context = self.get_context_data(**kwargs)\n        prestataires_executants = Prestataire.objects.filter(id=prestataire_id)\n        prestataire_executant = prestataires_executants.first() if prestataires_executants else None\n        prestataires = Prestataire.objects.filter(bureau=request.user.bureau, status=True).exclude(\n            type_prestataire__code=\"PRES02\").exclude(type_prestataire__code__isnull=True)  # exclure les pharmacies\n        centres_prescripteurs = Prestataire.objects.filter(bureau=request.user.bureau, type_prestataire__code__in=[\"PRES01\", \"PRES04\"], status=True)",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "FacturesPrestataireView",
        "kind": 6,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "class FacturesPrestataireView(TemplateView):\n    template_name = 'liste_factures_prestataires.html'\n    model = Sinistre\n    def get(self, request, *args, **kwargs):\n        user = User.objects.get(id=request.user.id)\n        type_remboursements = TypeRemboursement.objects.filter(status=True).order_by('libelle')\n        adherent_principal_ids = FacturePrestataire.objects.filter(bureau=request.user.bureau, statut__in=[SatutBordereauDossierSinistres.ATTENTE, SatutBordereauDossierSinistres.REJETE]).values_list('adherent_principal_id', flat=True).order_by('-id')\n        adhs = Aliment.objects.filter(id__in=adherent_principal_ids)\n        #prestataires = [x.prestataire for x in FacturePrestataire.objects.filter(prestataire__bureau=request.user.bureau, statut__in=[SatutBordereauDossierSinistres.ATTENTE, SatutBordereauDossierSinistres.REJETE])]\n        prestataires_ids = FacturePrestataire.objects.filter(bureau=request.user.bureau, statut__in=[SatutBordereauDossierSinistres.ATTENTE, SatutBordereauDossierSinistres.REJETE]).values_list('prestataire_id', flat=True).distinct()",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "FacturesPrestataireTraiteView",
        "kind": 6,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "class FacturesPrestataireTraiteView(TemplateView):\n    template_name = 'liste_factures_prestataires_traitees.html'\n    model = Sinistre\n    def get(self, request, *args, **kwargs):\n        user = User.objects.get(id=request.user.id)\n        type_remboursements = TypeRemboursement.objects.filter(status=True).order_by('libelle')\n        adherent_principal_ids = FacturePrestataire.objects.filter(bureau=request.user.bureau, statut=SatutBordereauDossierSinistres.VALIDE).values_list('adherent_principal_id', flat=True).order_by('-id')\n        adhs = Aliment.objects.filter(id__in=adherent_principal_ids)\n        #prestataires = [x.prestataire for x in FacturePrestataire.objects.filter(prestataire__bureau=request.user.bureau, statut=SatutBordereauDossierSinistres.VALIDE)]\n        #prestataires_ids = FacturePrestataire.objects.filter(prestataire__bureau=request.user.bureau, statut=SatutBordereauDossierSinistres.VALIDE).values_list('prestataire_id', flat=True).distinct()",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "RemboursementAppliMobile",
        "kind": 6,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "class RemboursementAppliMobile(TemplateView):\n    template_name = 'liste_dossiers_remboursement_direct_appli_mobile.html'\n    model = Sinistre\n    def get(self, request, *args, **kwargs):\n        user = User.objects.get(id=request.user.id)\n        dossiers_sinistres = [x for x in\n                              DossierSinistre.objects.filter(statut_validite=StatutValidite.VALIDE).order_by('id') if\n                              x.sinistres.filter(approuved_by__bureau=request.user.bureau).exists()]\n        pprint(dossiers_sinistres)\n        prestataires = Prestataire.objects.filter(bureau=request.user.bureau, status=True)",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "DetailsDossierSinistreView",
        "kind": 6,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "class DetailsDossierSinistreView(TemplateView):\n    # permission_required = \"sinistre.view_sinistre\"\n    template_name = 'details_dossier_sinistre.html'\n    model = Sinistre\n    def get(self, request, dossier_sinistre_id, *args, **kwargs):\n        if request.user.is_pres or request.user.is_imag or request.user.is_optic or request.user.is_labo or request.user.is_dentaire:\n            dossier_sinistre = DossierSinistre.objects.filter(id=dossier_sinistre_id, prestataire=request.user.prestataire, bureau=request.user.bureau).first()\n        elif request.user.is_pharm:\n            dossier_sinistre = DossierSinistre.objects.filter(id=dossier_sinistre_id, type_priseencharge__code=\"CONSULT\", bureau=request.user.bureau).first()\n            # print(f'@@ ville by prestataire : {dossier_sinistre.prestataire.ville} @@')",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "GenerateFactureView",
        "kind": 6,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "class GenerateFactureView(ListView):\n    model = DossierSinistre\n    template_name = 'generation_bordereau.html'\n    context_object_name = 'dossiers_sinistres'\n    def get_queryset(self):\n        # print(self.request.user.prestataire)\n        return []\n    def get_context_data(self, **kwargs):\n        # curent_data = datetime.datetime.now(tz=timezone.utc)\n        # print(curent_data.month)",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "ListeBordereauView",
        "kind": 6,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "class ListeBordereauView(TemplateView):\n    model = FacturePrestataire\n    template_name = 'liste_bordereau.html'\n    #context_object_name = 'bordereaux'\n    def get(self, request, *args, **kwargs):\n        factures = FacturePrestataire.objects.filter(prestataire__isnull=False, prestataire=self.request.user.prestataire, statut_validite=StatutValidite.VALIDE).exclude(statut=\"ANNULER\")\n        context = self.get_context_data(**kwargs)\n        context['factures_non_payees'] = factures.exclude(statut=SatutBordereauDossierSinistres.PAYE)\n        context['factures_payees'] = factures.filter(statut=SatutBordereauDossierSinistres.PAYE)\n        context['annees_comptables'] = PeriodeComptable.objects.values_list('annee', flat=True).distinct().order_by('-annee')",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "DetailBordereauView",
        "kind": 6,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "class DetailBordereauView(TemplateView):\n    # permission_required = \"sinistre.view_sinistre\"\n    template_name = 'detail_bordereau.html'\n    model = Sinistre\n    def get(self, request, bordereau_id, *args, **kwargs):\n        bordereau = FacturePrestataire.objects.filter(id=bordereau_id, bureau=request.user.bureau).first()\n        if not bordereau:\n            raise ValueError(\"Bordereau non trouvé.\")\n        # Récupération de l'ordonnancement à partir du sinistre quelconque\n        sinistre = Sinistre.objects.filter(facture_prestataire=bordereau).first()",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "GenerationBrValidationView",
        "kind": 6,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "class GenerationBrValidationView(TemplateView):\n    # permission_required = \"sinistre.view_sinistre\"\n    template_name = 'generation_br_validation.html'\n    model = Sinistre\n    def get(self, request, *args, **kwargs):\n        bordereau = FacturePrestataire.objects.all()\n        # liste_sinistres_bordereau = [x for x in Sinistre.objects.filter(facture_prestataire__isnull=False) if x.is_processed]\n        # prestataires = [x.prestataire for x in\n        #                 FacturePrestataire.objects.filter(prestataire__bureau=request.user.bureau,\n        #                     statut__in=[SatutBordereauDossierSinistres.VALIDE, SatutBordereauDossierSinistres.REJETE])]",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "GenerationBrOrdonnancementView",
        "kind": 6,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "class GenerationBrOrdonnancementView(TemplateView):\n    # permission_required = \"sinistre.view_sinistre\"\n    template_name = 'generation_br_ordonnancement.html'\n    model = Sinistre\n    def get(self, request, *args, **kwargs):\n        bordereau = FacturePrestataire.objects.filter(bureau=request.user.bureau)\n        # liste_sinistres_bordereau = [x for x in Sinistre.objects.filter(facture_prestataire__isnull=False) if x.is_processed]\n        # prestataires = [x.prestataire for x in\n        #                 FacturePrestataire.objects.filter(bureau=request.user.bureau,\n        #                     statut__in=[SatutBordereauDossierSinistres.VALIDE, SatutBordereauDossierSinistres.REJETE])]",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "BordereauOrdonnancementView",
        "kind": 6,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "class BordereauOrdonnancementView(TemplateView):\n    template_name = 'liste_bordereau_ordonnancement.html'\n    model = Sinistre\n    def get(self, request, *args, **kwargs):\n        user = User.objects.get(id=request.user.id)\n        # dossiers_sinistres = [x for x in\n        #                       DossierSinistre.objects.filter(statut_validite=StatutValidite.VALIDE).order_by('id') if\n        #                       x.sinistres.filter(approuved_by__bureau=request.user.bureau).exists()]\n        # pprint(dossiers_sinistres)\n        prestataires = [x.prestataire for x in",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "BordereauOrdonnancementPayeView",
        "kind": 6,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "class BordereauOrdonnancementPayeView(TemplateView):\n    template_name = 'liste_bordereau_ordonnancement_paye.html'\n    model = Sinistre\n    def get(self, request, *args, **kwargs):\n        user = User.objects.get(id=request.user.id)\n        # dossiers_sinistres = [x for x in\n        #                       DossierSinistre.objects.filter(statut_validite=StatutValidite.VALIDE).order_by('id') if\n        #                       x.sinistres.filter(approuved_by__bureau=request.user.bureau).exists()]\n        # pprint(dossiers_sinistres)\n        prestataires = [x.prestataire for x in",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "DetailBordereauOrdonnancementView",
        "kind": 6,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "class DetailBordereauOrdonnancementView(TemplateView):\n    # permission_required = \"sinistre.view_sinistre\"\n    template_name = 'detail_bordereau_ordonnancement.html'\n    model = Sinistre\n    def get(self, request, bordereau_id, *args, **kwargs):\n        #TODO , filtrer sur le bureau : prestataire__bureau=request.user.bureau\n        bordereau = BordereauOrdonnancement.objects.get(id=bordereau_id)\n        liste_sinistres_bordereau = Sinistre.objects.filter(bordereau_ordonnancement=bordereau)\n        montant_remb_total = bordereau.montant_remb_total\n        montant_rejet_total = bordereau.montant_rejet_total",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "ExecutionRequeteExcelView",
        "kind": 6,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "class ExecutionRequeteExcelView(TemplateView):\n    template_name = 'execution_requete_excel.html'\n    model = Sinistre\n    def get(self, request, *args, **kwargs):\n        #TODO , filtrer sur le bureau : prestataire__bureau=request.user.bureau\n        periode_comptable = PeriodeComptable.objects.all()\n        query_datas = [\n            {\n                \"query_label\": \"LISTE DES SINISTRES ORDONNANCÉS\",\n                \"query_name\": \"SIN_ORDONNANCES\",",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "dossiersinistre_datatable",
        "kind": 2,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "def dossiersinistre_datatable(request):\n    items_per_page = 10\n    page_number = request.GET.get('page')\n    start = int(request.GET.get('start', 0))\n    length = int(request.GET.get('length', items_per_page))\n    sort_column_index = int(request.GET.get('order[0][column]'))\n    sort_direction = request.GET.get('order[0][dir]')\n    search_numero_assure = request.GET.get('num_assure', '')\n    search_numero_dossier_sinistre = request.GET.get('num_feuille_soins', '')\n    search_date_survenance = request.GET.get('date_prestation', '')",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "ententes_prealables_datatable",
        "kind": 2,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "def ententes_prealables_datatable(request):\n    items_per_page = 10\n    page_number = request.GET.get('page')\n    start = int(request.GET.get('start', 0))\n    length = int(request.GET.get('length', items_per_page))\n    sort_column_index = int(request.GET.get('order[0][column]'))\n    sort_direction = request.GET.get('order[0][dir]')\n    search_numero_assure = request.GET.get('num_assure', '')\n    search_numero_dossier_sinistre = request.GET.get('num_feuille_soins', '')\n    search_date_survenance = request.GET.get('date_prestation', '')",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "dossiersinistre_traites_datatable",
        "kind": 2,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "def dossiersinistre_traites_datatable(request):\n    items_per_page = 10\n    page_number = request.GET.get('page')\n    start = int(request.GET.get('start', 0))\n    length = int(request.GET.get('length', items_per_page))\n    sort_column_index = int(request.GET.get('order[0][column]'))\n    sort_direction = request.GET.get('order[0][dir]')\n    search_numero_assure = request.GET.get('num_assure', '')\n    search_numero_dossier_sinistre = request.GET.get('num_feuille_soins', '')\n    search_date_survenance = request.GET.get('date_prestation', '')",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "dossiersinistre_physique_gestionnaire_datatable",
        "kind": 2,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "def dossiersinistre_physique_gestionnaire_datatable(request):\n    items_per_page = 10\n    page_number = request.GET.get('page')\n    start = int(request.GET.get('start', 0))\n    length = int(request.GET.get('length', items_per_page))\n    sort_column_index = int(request.GET.get('order[0][column]'))\n    sort_direction = request.GET.get('order[0][dir]')\n    search_numero_assure = request.GET.get('num_assure', '')\n    search_numero_dossier_sinistre = request.GET.get('num_feuille_soins', '')\n    search_date_survenance = request.GET.get('date_prestation', '')",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "change_dossier_closing_status",
        "kind": 2,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "def change_dossier_closing_status(request, dossier_sinistre_id):\n    response = None\n    if request.method == 'POST':\n        dossier_sinistre = DossierSinistre.objects.get(id=dossier_sinistre_id)\n        if dossier_sinistre.is_closed == True:\n            dossier_sinistre.is_closed = False\n        else:\n            dossier_sinistre.is_closed = True\n        dossier_sinistre.save()\n        #gardons des traces",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "popup_add_medicament_gestionnaire",
        "kind": 2,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "def popup_add_medicament_gestionnaire(request, dossier_sinistre_id):\n    request.session['liste_medicaments2'] = []\n    liste_medicaments_in_session = request.session.get('liste_medicaments2', [])\n    dossier_sinistre = DossierSinistre.objects.get(id=dossier_sinistre_id)\n    medicaments = Acte.objects.filter(type_acte_id=2, status=True, statut_validite=StatutValidite.VALIDE)\n    pharmacies = Prestataire.objects.filter(bureau=request.user.bureau, type_prestataire__code=\"PRES02\", status=True)\n    today = datetime.datetime.now(tz=timezone.utc)\n    return render(request, 'modal_add_medicament_gestionnaire.html',\n                  {'pharmacies': pharmacies, 'liste_medicaments_in_session': liste_medicaments_in_session,\n                   'medicaments': medicaments, 'dossier_sinistre': dossier_sinistre, 'today': today})",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "add_medicament_gestionnaire_todossiersinistre",
        "kind": 2,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "def add_medicament_gestionnaire_todossiersinistre(request, dossier_sinistre_id):\n    if request.method == 'POST':\n        pprint(\"request.POST\")\n        pprint(request.POST)\n        dossier_sinistre = DossierSinistre.objects.get(id=dossier_sinistre_id)\n        if dossier_sinistre:\n            liste_medicaments = request.session.get('liste_medicaments2', [])\n            # try:\n            # vider toute la session de calcul de prise en charge pour reprendre\n            session_pec = request.user.id",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "remove_medicament_gestionnaire",
        "kind": 2,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "def remove_medicament_gestionnaire(request, medicament_id):\n    if request.method == 'POST':\n        liste_medicaments = request.session.get('liste_medicaments2', [])\n        pprint(medicament_id)\n        # Utiliser une boucle ou une compréhension de liste pour supprimer l'élément avec l'acte_id correspondant\n        liste_medicaments = [item for item in liste_medicaments if item['medicament_id'] != medicament_id]\n        pprint(liste_medicaments)\n        # Mettre à jour les données de session\n        request.session['liste_medicaments2'] = liste_medicaments\n        response = {",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "add_sinistre_medicament_gestionnaire",
        "kind": 2,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "def add_sinistre_medicament_gestionnaire(request, dossier_sinistre_id):\n    if request.method == 'POST':\n        # try:\n        pprint(\"request.POST\")\n        pprint(request.POST)\n        date_survenance = request.POST.get('date_survenance')\n        date_survenance = datetimeJsdecode.strptime(date_survenance, '%Y-%m-%d')\n        date_survenance = make_aware(date_survenance)\n        # vider toute la session de calcul de prise en charge pour reprendre\n        session_pec = request.user.id",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "popup_add_medicament_session_gestionnaire",
        "kind": 2,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "def popup_add_medicament_session_gestionnaire(request, acte_id, aliment_id, prestataire_id, prescripteur_id):\n    liste_medicaments_in_session = request.session.get('liste_medicaments', [])\n    medicaments = Acte.objects.filter(type_acte_id=2, status=True, statut_validite=StatutValidite.VALIDE)\n    pharmacies = Prestataire.objects.filter(bureau=request.user.bureau, type_prestataire__code=\"PRES02\", status=True, )\n    return render(request, 'modal_add_medicament_session_gestionnaire.html',\n                  {'pharmacies': pharmacies, 'liste_medicaments_in_session': liste_medicaments_in_session,\n                   'medicaments': medicaments, 'acte_id': acte_id, 'aliment_id': aliment_id,\n                   'prestataire_id': prestataire_id, 'prescripteur_id': prescripteur_id})\n@login_required()\ndef add_medicament_session_gestionnaire(request):",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "add_medicament_session_gestionnaire",
        "kind": 2,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "def add_medicament_session_gestionnaire(request):\n    if request.method == 'POST':\n        liste_medicaments = request.session.get('liste_medicaments', [])\n        # try:\n        # vider toute la session de calcul de prise en charge pour reprendre\n        session_pec = request.user.id\n        vider_sinistres_temporaires(session_pec)\n        pprint(\"request.POST\")\n        pprint(request.POST)\n        aliment_id = request.POST.get('aliment_id')",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "remove_medicament_session_gestionnaire",
        "kind": 2,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "def remove_medicament_session_gestionnaire(request, medicament_id):\n    if request.method == 'POST':\n        liste_medicaments = request.session.get('liste_medicaments', [])\n        pprint(medicament_id)\n        # Utiliser une boucle ou une compréhension de liste pour supprimer l'élément avec l'acte_id correspondant\n        liste_medicaments = [item for item in liste_medicaments if item['medicament_id'] != medicament_id]\n        pprint(liste_medicaments)\n        # Mettre à jour les données de session\n        request.session['liste_medicaments'] = liste_medicaments\n        response = {",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "factures_prestataire_datatable",
        "kind": 2,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "def factures_prestataire_datatable(request):\n    items_per_page = 10\n    page_number = request.GET.get('page')\n    start = int(request.GET.get('start', 0))\n    length = int(request.GET.get('length', items_per_page))\n    sort_column_index = int(request.GET.get('order[0][column]'))\n    sort_direction = request.GET.get('order[0][dir]')\n    search_numero_bordereau = request.GET.get('search_numero_bordereau', '')\n    search_periode_comptable = request.GET.get('search_periode_comptable', '')\n    search_prestataire = request.GET.get('search_prestataire', '')",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "factures_prestataires_traitees_datatable",
        "kind": 2,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "def factures_prestataires_traitees_datatable(request):\n    items_per_page = 10\n    page_number = request.GET.get('page')\n    start = int(request.GET.get('start', 0))\n    length = int(request.GET.get('length', items_per_page))\n    sort_column_index = int(request.GET.get('order[0][column]'))\n    sort_direction = request.GET.get('order[0][dir]')\n    search_numero_bordereau = request.GET.get('search_numero_bordereau', '')\n    search_periode_comptable = request.GET.get('search_periode_comptable', '')\n    search_prestataire = request.GET.get('search_prestataire', '')",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "search_assure",
        "kind": 2,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "def search_assure(request):\n    if request.method == \"POST\":\n        # Récupérer la valeur de session_pec ou générer une nouvelle UUID\n        session_pec = request.user.id\n        numero_carte = request.POST.get('numero_carte')\n        type_prise_en_charge_id = request.POST.get('type_prise_en_charge_id')\n        type_prise_en_charge = TypePriseencharge.objects.get(id=type_prise_en_charge_id)\n        #quand on va commencer le TP Multipays, on enlevera le filtre bureau\n        carte = Carte.objects.filter(numero=numero_carte, statut=Statut.ACTIF, aliment__bureau=request.user.bureau).first()\n        if request.user.is_prestataire:",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "search_assure_bygestionnaire",
        "kind": 2,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "def search_assure_bygestionnaire(request, prestataire_id):  # _bygestionnaire\n    if request.method == \"POST\":\n        # Récupérer la valeur de session_pec ou générer une nouvelle UUID\n        session_pec = request.user.id\n        numero_carte = request.POST.get('numero_carte')\n        type_prise_en_charge_id = request.POST.get('type_prise_en_charge_id')\n        type_prise_en_charge_code = None\n        if type_prise_en_charge_id:\n            type_prise_en_charges = TypePriseencharge.objects.filter(id=type_prise_en_charge_id)\n            type_prise_en_charge_code = type_prise_en_charges.first().code if type_prise_en_charges else None",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "pharmacie_details",
        "kind": 2,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "def pharmacie_details(request, aliment_id):\n    aliment = Aliment.objects.get(id=aliment_id)\n    if aliment and aliment.formule:\n        dossiers_sinistres = DossierSinistre.objects.filter(aliment_id=aliment.id, type_priseencharge__code=\"CONSULT\", is_closed=False)\n        # Added on 11102023: Permettre au pharmacien d'utiliser la v2 même si la consultation a été faite sur la v2\n        if not dossiers_sinistres:\n            # Added on 05102023: add tm préfinancé\n            type_prefinancement = aliment.formule.police.type_prefinancement if aliment.formule.police.type_prefinancement else None\n            # dd(dossiers_sinistres)\n            prestataires_ph_direct = Prestataire.objects.filter(bureau=request.user.bureau, status=True, code__contains=\"PH_DIRECT\")",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "search_assure_pharmacie",
        "kind": 2,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "def search_assure_pharmacie(request):\n    if request.method == \"POST\":\n        numero_carte = request.POST.get('numero_carte')\n        # quand on va commencer le TP Multipays, on enlevera le filtre bureau\n        carte = Carte.objects.filter(numero=numero_carte, statut=Statut.ACTIF, aliment__bureau=request.user.bureau).first()\n        if carte:\n            aliment = carte.aliment\n            formule = aliment.formule\n            if formule:\n                etat_police = formule.police.etat_police",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "statuer_acte",
        "kind": 2,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "def statuer_acte(request):\n    if request.method == \"POST\":\n        # vider toute la session de calcul de prise en charge pour reprendre\n        session_pec = request.user.id\n        vider_sinistres_temporaires(session_pec)\n        sinistre_id = request.POST.get('sinistre_id')\n        type_operation = request.POST.get('type_operation')\n        nombre_accorde = request.POST.get('nombre_accorde')\n        # dd(nombre_accorde)\n        motif_rejet = request.POST.get('motif_rejet')",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "approuver_liste_acte",
        "kind": 2,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "def approuver_liste_acte(request):\n    response = {}  # Initialiser la variable response en dehors de la boucle\n    if request.method == 'POST':\n        for key in request.POST:\n            if key.startswith('acte_'):\n                sinistre_id = key.split('_')[1]\n                print(\"mise à jour du sinistre : \" + sinistre_id)\n                # Retrieve the Sinistre object based on the provided sinistre_id\n                sinistre = get_object_or_404(Sinistre, id=sinistre_id)\n                if request.POST.getlist(key) == ['on']:",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "update_statut_pec_dossier_sinistre",
        "kind": 2,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "def update_statut_pec_dossier_sinistre(dossier_sinistre):\n    pprint(\"update_statut_pec_dossier_sinistre\")\n    pprint(dossier_sinistre)\n    sinistres_en_attente = dossier_sinistre.sinistres.filter(statut=StatutSinistre.ATTENTE)\n    sinistres_accordes = dossier_sinistre.sinistres.filter(statut=StatutSinistre.ACCORDE)\n    if sinistres_en_attente:\n        dossier_sinistre.statut_pec = StatutSinistre.ATTENTE\n    else:\n        # si pas de accorde\n        if sinistres_accordes:",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "approuver_liste_acte_new",
        "kind": 2,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "def approuver_liste_acte_new(request):\n    response = {}  # Initialiser la variable response en dehors de la boucle\n    if request.method == 'POST':\n        # vider toute la session de calcul de prise en charge pour reprendre\n        session_pec = request.user.id\n        vider_sinistres_temporaires(session_pec)\n        dossier_sinistre_id = request.GET.get('dossier_sinistre_id', \"0\")\n        for key in request.POST:\n            if key.startswith('acte_'):\n                sinistre_id = key.split('_')[1]",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "rejeter_liste_acte",
        "kind": 2,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "def rejeter_liste_acte(request):\n    response = {}  # Initialiser la variable response en dehors de la boucle\n    if request.method == 'POST':\n        motif_rejet = request.GET.get('motif_rejet', \"\")\n        dossier_sinistre_id = request.GET.get('dossier_sinistre_id', \"0\")\n        pprint(\"dossier_sinistre_id\")\n        pprint(dossier_sinistre_id)\n        for key in request.POST:\n            if key.startswith('acte_'):\n                sinistre_id = key.split('_')[1]",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "update_dossier_traitement_by_med_cons",
        "kind": 2,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "def update_dossier_traitement_by_med_cons(sinistre):\n    if sinistre.dossier_sinistre.has_sinistre_traite_bymedecin is False:\n        dossier_sinistre = sinistre.dossier_sinistre\n        dossier_sinistre.has_sinistre_traite_bymedecin = True\n        dossier_sinistre.date_traitement_sinistre_bymedecin = timezone.now()\n        dossier_sinistre.save()\ndef notifier_waspito(sinistre):\n    if sinistre.prestataire.code == \"9537\":\n        # Les données que vous souhaitez envoyer\n        body = {",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "notifier_waspito",
        "kind": 2,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "def notifier_waspito(sinistre):\n    if sinistre.prestataire.code == \"9537\":\n        # Les données que vous souhaitez envoyer\n        body = {\n            \"statut_sinistre\": sinistre.statut,\n            \"code_acte\": sinistre.acte.code,\n            \"libelle_acte\": sinistre.acte.libelle,\n            \"frais_reel\": float(sinistre.frais_reel),\n            \"part_assure\": float(sinistre.part_assure),\n            \"part_assureur\": float(sinistre.part_compagnie),",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "update_date_sortie_sinistre",
        "kind": 2,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "def update_date_sortie_sinistre(request):\n    if request.method == 'POST':\n        sinistre_id = request.POST.get(\"id_sinistre\")\n        date_sortie = request.POST.get(\"date_sortie\")\n        sinistre = get_object_or_404(Sinistre, id=sinistre_id)\n        sinistre.date_sortie = date_sortie\n        sinistre.save()\n        response = {\n            'statut': 1,\n            'message': \"La date de sortie a été mise à jour !\",",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "update_date_sortie_nb_jour",
        "kind": 2,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "def update_date_sortie_nb_jour(request):\n    if request.method == 'POST':\n        sinistre_id = request.POST.get(\"id_sinistre\")\n        date_sortie_encoded = request.POST.get(\"date_sortie\")\n        date_object = datetimeJsdecode.strptime(date_sortie_encoded, '%d/%m/%Y')\n        # pri(date_sortie)\n        formatted_date = date_object.strftime('%Y-%m-%d')\n        sinistre = get_object_or_404(Sinistre, id=sinistre_id)\n        sinistre.date_sortie = formatted_date\n        sinistre.statut = StatutSinistre.ACCORDE",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "update_nombre_accorde_sinistre",
        "kind": 2,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "def update_nombre_accorde_sinistre(request):\n    if request.method == 'POST':\n        sinistre_id = request.POST.get(\"id_sinistre\")\n        nombre_accorde = request.POST.get(\"nombre_accorde\")\n        sinistre = get_object_or_404(Sinistre, id=sinistre_id)\n        sinistre.nombre_accorde = nombre_accorde\n        sinistre.save()\n        response = {\n            'statut': 1,\n            'message': \"Le nombre accordé a été mise à jour !\",",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "get_infos_selected_actes",
        "kind": 2,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "def get_infos_selected_actes(request):\n    if request.method == \"POST\":\n        # pprint(request.POST)\n        prescripteur_id = request.POST.get('prescripteur')\n        aliment_id = request.POST.get('current_searched_aliment_id')\n        type_prise_en_charge = request.POST.get('type_prise_en_charge')\n        type_prise_en_charge_code = request.POST.get('type_prise_en_charge_code')\n        actes = request.POST.getlist('selected_actes[]')\n        cout_acte = request.POST.get('cout_acte[]').replace(' ', '') if request.POST.get('cout_acte[]') else 0\n        if request.user.is_prestataire:",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "get_infos_selected_actes_consultation_ls",
        "kind": 2,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "def get_infos_selected_actes_consultation_ls(request):\n    if request.method == \"POST\":\n        # pprint(request.POST)\n        prescripteur_id = request.POST.get('prescripteur')\n        aliment_id = request.POST.get('current_searched_aliment_id')\n        type_prise_en_charge = request.POST.get('type_prise_en_charge')\n        type_prise_en_charge_code = request.POST.get('type_prise_en_charge_code')\n        actes = request.POST.getlist('selected_actes[]')\n        cout_acte = request.POST.get('cout_acte').replace(' ', '') if request.POST.get('cout_acte') else 0\n        if request.user.is_prestataire:",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "get_infos_selected_actes_soins_ambulatoires",
        "kind": 2,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "def get_infos_selected_actes_soins_ambulatoires(request):\n    if request.method == \"POST\":\n        # pprint(request.POST)\n        session_pec = request.user.id\n        pprint(session_pec)\n        # vider toute la session de calcul de prise en charge pour reprendre\n        SinistreTemporaire.objects.filter(\n            session_pec=session_pec\n        ).delete()\n        prescripteur_id = request.POST.get('prescripteur')",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "get_infos_selected_actes_hospitalisation",
        "kind": 2,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "def get_infos_selected_actes_hospitalisation(request):\n    if request.method == \"POST\":\n        # vider toute la session de calcul de prise en charge pour reprendre\n        session_pec = request.user.id\n        vider_sinistres_temporaires(session_pec)\n        pprint(request.POST)\n        prescripteur_id = request.POST.get('prescripteur')\n        aliment_id = request.POST.get('current_searched_aliment_id')\n        actes = request.POST.getlist('selected_actes[]')\n        cout_acte = request.POST.get('cout_acte').replace(' ', '')",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "get_infos_selected_actes_optiques",
        "kind": 2,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "def get_infos_selected_actes_optiques(request):\n    pprint(request)\n    if request.method == \"POST\":\n        # vider toute la session de calcul de prise en charge pour reprendre\n        session_pec = request.user.id\n        vider_sinistres_temporaires(session_pec)\n        pprint(request.POST)\n        type_priseencharge_code = request.POST.get('type_prise_en_charge_code')\n        prescripteur_id = request.POST.get('prescripteur')\n        aliment_id = request.POST.get('current_searched_aliment_id')",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "get_infos_selected_actes_optiques_search",
        "kind": 2,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "def get_infos_selected_actes_optiques_search(request):\n    pass\n@login_required\ndef get_infos_selected_actes_gestionnaire(request):\n    if request.method == \"POST\":\n        pprint(request.POST)\n        session_pec = request.user.id\n        pprint(session_pec)\n        # vider toute la session de calcul de prise en charge pour reprendre\n        SinistreTemporaire.objects.filter(",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "get_infos_selected_actes_gestionnaire",
        "kind": 2,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "def get_infos_selected_actes_gestionnaire(request):\n    if request.method == \"POST\":\n        pprint(request.POST)\n        session_pec = request.user.id\n        pprint(session_pec)\n        # vider toute la session de calcul de prise en charge pour reprendre\n        SinistreTemporaire.objects.filter(\n            session_pec=session_pec\n        ).delete()\n        # vider la session des medicaments de la consultations",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "add_sinistre",
        "kind": 2,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "def add_sinistre(request):\n    if request.method == 'POST':\n        # vider toute la session de calcul de prise en charge pour reprendre\n        session_pec = request.user.id\n        vider_sinistres_temporaires(session_pec)\n        pprint(\"DEBUT CONSULTATION\")\n        pprint(session_pec)\n        pprint(\"DEBUT CONSULTATION\")\n        pprint(request.POST)\n        type_prise_en_charge_id = request.POST.get('type_prise_en_charge_id')",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "add_sinistre_waspito",
        "kind": 2,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "def add_sinistre_waspito(sinistre):\n    # dossier_sinistre = DossierSinistre.objects.create(sinistre)\n    # dd(sinistre)\n    return sinistre\n@login_required\ndef update_sinistre_hospitalisation(request, dossier_sinistre_id):\n    if request.method == 'POST':\n        # vider toute la session de calcul de prise en charge pour reprendre\n        session_pec = request.user.id\n        vider_sinistres_temporaires(session_pec)",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "update_sinistre_hospitalisation",
        "kind": 2,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "def update_sinistre_hospitalisation(request, dossier_sinistre_id):\n    if request.method == 'POST':\n        # vider toute la session de calcul de prise en charge pour reprendre\n        session_pec = request.user.id\n        vider_sinistres_temporaires(session_pec)\n        pprint(request.POST)\n        cout_acte = request.POST.get('cout_final_sinistre')\n        dossier_sinistre = DossierSinistre.objects.get(id=dossier_sinistre_id)\n        type_prise_en_charge_code = dossier_sinistre.type_priseencharge.code\n        sinistre = Sinistre.objects.get(dossier_sinistre_id=dossier_sinistre_id)",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "demande_prorogation",
        "kind": 2,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "def demande_prorogation(request, sinistre_id):\n    if request.method == 'POST':\n        pprint(request.POST)\n        jour_demande = request.POST.get('nombre_jours_prorogation')\n        motif = request.POST.get('motif_prorogation')\n        date_entree = datetime.datetime.now(tz=timezone.utc)\n        date_sortie = datetime.datetime.now(tz=timezone.utc)\n        ProrogationSinistre.objects.create(created_by=request.user,\n                                           sinistre_id=sinistre_id,\n                                           jour_demande=jour_demande,",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "approuver_prorogation",
        "kind": 2,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "def approuver_prorogation(request):\n    if request.method == 'POST':\n        pprint(request.POST)\n        prorogation_id = request.POST.get('prorogation_id')\n        jour_accorde = request.POST.get('jour_accorde')\n        motif = request.POST.get('motif')\n        date_entree = datetime.datetime.now(tz=timezone.utc)\n        date_sortie = datetime.datetime.now(tz=timezone.utc)\n        ProrogationSinistre.objects.filter(id=prorogation_id).update(reviewed_by=request.user,\n                                                                     jour_accorde=jour_accorde,",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "rejeter_prorogation",
        "kind": 2,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "def rejeter_prorogation(request):\n    if request.method == 'POST':\n        pprint(request.POST)\n        prorogation_id = request.POST.get('prorogation_id')\n        motif = request.POST.get('motif')\n        date_entree = datetime.datetime.now(tz=timezone.utc)\n        date_sortie = datetime.datetime.now(tz=timezone.utc)\n        ProrogationSinistre.objects.filter(id=prorogation_id).update(reviewed_by=request.user,\n                                                                     jour_accorde=0,\n                                                                     motif_rejet=motif,",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "accepter_remboursement",
        "kind": 2,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "def accepter_remboursement(request, sinistre_id):\n    if request.method == 'POST':\n        pprint(request.POST)\n        sinistre = Sinistre.objects.get(id=sinistre_id)\n        motif = request.POST.get('motif')\n        montant_accepte = request.POST.get('montant_accepte').replace(' ', '')\n        montant_refuse = request.POST.get('montant_refuse').replace(' ', '')\n        # if montant_accepte == '': montant_accepte = 0\n        if montant_refuse == '': montant_refuse = '0'\n        montant_refuse = int(montant_refuse)",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "refuser_remboursement",
        "kind": 2,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "def refuser_remboursement(request, sinistre_id):\n    if request.method == 'POST':\n        pprint(request.POST)\n        motif = request.POST.get('motif')\n        sinistre = Sinistre.objects.get(id=sinistre_id)\n        if sinistre.tm_prefinanced:\n            montant_refuse = int(sinistre.frais_reel)\n        else:\n            montant_refuse = int(sinistre.part_compagnie)\n        rb_sinistre = RemboursementSinistre.objects.filter(sinistre=sinistre, is_invalid=False).first()",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "traiter_liste_remboursement",
        "kind": 2,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "def traiter_liste_remboursement(request):\n    if request.method == 'POST':\n        pprint(request.POST)\n        sinistres_ids = request.POST.getlist('sinistres_ids[]')\n        pprint(sinistres_ids)\n        for sinistre_id in sinistres_ids:\n            sinistre = Sinistre.objects.get(id=sinistre_id)\n            motif = \"RAS\"\n            if sinistre.tm_prefinanced:\n                montant_accepte = int(sinistre.frais_reel)",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "refuser_liste_remboursement",
        "kind": 2,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "def refuser_liste_remboursement(request):\n    if request.method == 'POST':\n        pprint(request.POST)\n        sinistres_ids = request.POST.getlist('sinistres_ids[]')\n        pprint(sinistres_ids)\n        motif = request.POST.get('motif')\n        pprint(motif)\n        for sinistre_id in sinistres_ids:\n            sinistre = Sinistre.objects.get(id=sinistre_id)\n            # motif = \"RAS\"",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "valider_facture_remboursement",
        "kind": 2,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "def valider_facture_remboursement(request, facture_prestataire_id):\n    if request.method == 'GET':\n        facture_prestataire = FacturePrestataire.objects.get(id=facture_prestataire_id)\n        facture_prestataire.statut = SatutBordereauDossierSinistres.VALIDE\n        facture_prestataire.save()\n        # notifier du succès\n        response = {\n            'statut': 1,\n            'message': \"Demande de remboursement acceptée avec succès !\",\n            'data': \"\"",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "add_sinistre_soins_ambulatoire",
        "kind": 2,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "def add_sinistre_soins_ambulatoire(request):\n    if request.method == 'POST':\n        # vider toute la session de calcul de prise en charge pour reprendre\n        session_pec = request.user.id\n        vider_sinistres_temporaires(session_pec)\n        pprint(request.POST)\n        type_prise_en_charge_id = request.POST.get('type_prise_en_charge_id')\n        type_prise_en_charge_code = \"AMBULAT\"\n        # date_prestation = datetime.datetime.now(tz=timezone.utc)\n        # date_survenance = datetime.datetime.now(tz=timezone.utc)",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "add_sinistre_optique",
        "kind": 2,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "def add_sinistre_optique(request):\n    if request.method == 'POST':\n        # vider toute la session de calcul de prise en charge pour reprendre\n        session_pec = request.user.id\n        vider_sinistres_temporaires(session_pec)\n        pprint(request.POST)\n        type_prise_en_charge_code = request.POST.get('type_prise_en_charge_code')\n        type_prise_en_charge_id = request.POST.get('type_prise_en_charge_id')\n        date_prestation = datetime.datetime.now(tz=timezone.utc)\n        date_survenance = datetime.datetime.now(tz=timezone.utc)",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "popup_choose_prestataire",
        "kind": 2,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "def popup_choose_prestataire(request):\n    prestataires = Prestataire.objects.filter(bureau=request.user.bureau, type_prestataire_code=\"PRES002\", status=True)\n    return render(request, 'modal_choose_prestataire.html',\n                  {'prestataires': prestataires})\n#\ndef search_benef_by_name_datatable(request):\n    items_per_page = int(request.GET.get('length', 10))\n    start = int(request.GET.get('start', 0))\n    page_number = start // items_per_page + 1  # Calculate page number correctly\n    search_beneficiaire = request.GET.get('search_beneficiaire', '')",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "search_benef_by_name_datatable",
        "kind": 2,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "def search_benef_by_name_datatable(request):\n    items_per_page = int(request.GET.get('length', 10))\n    start = int(request.GET.get('start', 0))\n    page_number = start // items_per_page + 1  # Calculate page number correctly\n    search_beneficiaire = request.GET.get('search_beneficiaire', '')\n    # Get active polices and related formule IDs\n    current_bureau = request.user.bureau\n    active_polices = Police.objects.filter(\n        bureau=current_bureau,\n        statut=StatutPolice.ACTIF,",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "add_sinistre_gestionnaire",
        "kind": 2,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "def add_sinistre_gestionnaire(request):\n    if request.method == 'POST':\n        # vider toute la session de calcul de prise en charge pour reprendre\n        session_pec = request.user.id\n        vider_sinistres_temporaires(session_pec)\n        pprint(request.POST)\n        mode_creation = ModeCreation.objects.get(code=\"SAISIE-GESTIONNAIRE\")\n        type_prise_en_charge_id = request.POST.get('type_prise_en_charge_id')\n        date_entree = request.POST.get('date_entree')\n        date_sortie = request.POST.get('date_sortie')",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "vider_sinistres_temporaires",
        "kind": 2,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "def vider_sinistres_temporaires(session_pec):\n    pprint(\"session_pec\")\n    pprint(session_pec)\n    SinistreTemporaire.objects.filter(session_pec=session_pec).delete()\n@method_decorator(login_required, name='dispatch')\nclass DetailsDossierSinistreView(TemplateView):\n    # permission_required = \"sinistre.view_sinistre\"\n    template_name = 'details_dossier_sinistre.html'\n    model = Sinistre\n    def get(self, request, dossier_sinistre_id, *args, **kwargs):",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "dossier_sinistre_add_document",
        "kind": 2,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "def dossier_sinistre_add_document(request, dossier_sinistre_id):\n    response = {\n        'statut': 0,\n        'message': \"Veuillez renseigner correctement le formulaire !\",\n        # 'errors': form.errors,\n    }\n    if request.method == \"POST\":\n        # form = DocumentForm(request.POST, request.FILES)\n        # files = request.FILES['fichiers']\n        # files = []",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "handle_uploaded_document",
        "kind": 2,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "def handle_uploaded_document(f, filename):\n    path_ot_db = '/dossiers_sinistres/documents/'\n    dirname = settings.MEDIA_URL.replace('/', '') + path_ot_db\n    path = os.path.join(dirname)\n    if not os.path.exists(path):\n        os.makedirs(path)\n    with open(dirname + '/' + filename, 'wb+') as destination:\n        for chunk in f.chunks():\n            destination.write(chunk)\n    return path_ot_db + '/' + filename",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "supprimer_document",
        "kind": 2,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "def supprimer_document(request):\n    if request.method == \"POST\":\n        document_id = request.POST.get('document_id')\n        document = DocumentDossierSinistre.objects.get(id=document_id)\n        if document.pk is not None:\n            document.delete()\n            response = {\n                'statut': 1,\n                'message': \"Document supprimé avec succès !\",\n            }",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "popup_details_sinistre",
        "kind": 2,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "def popup_details_sinistre(request, sinistre_id):\n    sinistre = Sinistre.objects.get(id=sinistre_id)\n    sinistres_historique_acte = Sinistre.objects.filter(acte_id=sinistre.acte_id,\n                                                        aliment_id=sinistre.aliment_id).exclude(\n        id=sinistre.pk).order_by('-id')[:3]\n    prorogations = ProrogationSinistre.objects.filter(sinistre_id=sinistre_id)\n    return render(request, 'modal_details_sinistre.html',\n                  {'sinistre': sinistre, 'sinistres_historique_acte': sinistres_historique_acte,\n                   'prorogations': prorogations})\ndef popup_seance_done(request, sinistre_id):",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "popup_seance_done",
        "kind": 2,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "def popup_seance_done(request, sinistre_id):\n    sinistre = Sinistre.objects.get(id=sinistre_id)\n    today = datetime.datetime.now(tz=timezone.utc)\n    if request.method == 'POST':\n        date_survenance = request.POST.get('date_survenance')\n        sinistre.statut_prestation = StatutSinistrePrestation.EFFECTUE\n        sinistre.date_survenance = date_survenance\n        sinistre.save()\n        response = {\n            \"statut\": 1,",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "popup_modifier_sinistre_medicament",
        "kind": 2,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "def popup_modifier_sinistre_medicament(request, sinistre_id):\n    sinistre = Sinistre.objects.get(id=sinistre_id)\n    return render(request, 'modal_details_sinistre.html', {'sinistre': sinistre})\n@login_required()\ndef delete_sinistre_medicament(request, sinistre_id):\n    if request.method == 'POST':\n        sinistre = Sinistre.objects.get(id=sinistre_id)\n        sinistre.statut = StatutValidite.SUPPRIME  # à analyser\n        sinistre.statut_validite = StatutValidite.SUPPRIME\n        sinistre.deleted_author = request.user",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "delete_sinistre_medicament",
        "kind": 2,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "def delete_sinistre_medicament(request, sinistre_id):\n    if request.method == 'POST':\n        sinistre = Sinistre.objects.get(id=sinistre_id)\n        sinistre.statut = StatutValidite.SUPPRIME  # à analyser\n        sinistre.statut_validite = StatutValidite.SUPPRIME\n        sinistre.deleted_author = request.user\n        sinistre.deleted_at = datetime.datetime.now(tz=timezone.utc)\n        sinistre.save()\n        response = {\n            \"statut\": 1,",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "add_sinistre_medicament",
        "kind": 2,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "def add_sinistre_medicament(request, dossier_sinistre_id):\n    if request.method == 'POST':\n        # try:\n        # vider toute la session de calcul de prise en charge pour reprendre\n        session_pec = request.user.id\n        vider_sinistres_temporaires(session_pec)\n        pprint(\"request.POST\")\n        pprint(request.POST)\n        prestataire_id = request.user.prestataire.id\n        medicament_id = request.POST.get('medicament')",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "update_medicament_sinistre",
        "kind": 2,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "def update_medicament_sinistre(request, sinistre_id):\n    if request.method == 'POST':\n        try:\n            # vider toute la session de calcul de prise en charge pour reprendre\n            session_pec = request.user.id\n            vider_sinistres_temporaires(session_pec)\n            sinistre = Sinistre.objects.get(id=sinistre_id)\n            if sinistre:\n                # dd(request.POST)\n                prestataire_id = sinistre.prestataire_id",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "update_add_affection",
        "kind": 2,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "def update_add_affection(request, dossier_sinistre_id):\n    if request.method == 'POST':\n        code_affection = request.POST.get('code_affection')\n        affection = Affection.objects.get(id=code_affection)\n        dossier_sinistre = DossierSinistre.objects.get(id=dossier_sinistre_id)\n        try:\n            dossier_sinistre.affection = affection\n            dossier_sinistre.updated_by = request.user\n            dossier_sinistre.updated_at = datetime.datetime.now(tz=timezone.utc)\n            dossier_sinistre.save()",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "close_dossier_medication",
        "kind": 2,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "def close_dossier_medication(request, dossier_sinistre_id):\n    print(dossier_sinistre_id)\n    print(\"Le dossier sinistre\")\n    if request.method == 'POST':\n        # sinistre = Sinistre.objects.get(numero=numero_sinistre)\n        dossier_sinistre_id = request.POST.get('dossier_sinistre_id')\n        try:\n            print(\"TRYING TO UPDATE\")\n            dossier_sinistre = DossierSinistre.objects.get(\n                pk=dossier_sinistre_id",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "render_pdf_view",
        "kind": 2,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "def render_pdf_view(request, id):\n    dossiers_sinistres = DossierSinistre.objects.filter(id=id, statut_validite=StatutValidite.VALIDE)\n    if dossiers_sinistres:\n        dossier_sinistre = dossiers_sinistres.first()\n        # sinistres = Sinistre.objects.filter(dossier_sinistre__id=id, statut='ACCORDE')\n        sinistres = Sinistre.objects.filter(dossier_sinistre__id=id, statut__in=('ACCORDE', 'REJETE'))\n        # Added on 05102023: add tm préfinancé\n        request_user_is_prestataire = request.user.is_prestataire\n        tm_prefinanced = False\n        if dossier_sinistre.type_prefinancement and dossier_sinistre.type_prefinancement.code == \"PREF_TOUT\":",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "render_pdf_view_general",
        "kind": 2,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "def render_pdf_view_general(request, id):\n    dossiers_sinistres = DossierSinistre.objects.filter(id=id, statut_validite=StatutValidite.VALIDE)\n    if dossiers_sinistres:\n        dossier_sinistre = dossiers_sinistres.first()\n        # sinistres = Sinistre.objects.filter(dossier_sinistre__id=id, statut='ACCORDE')\n        sinistres = Sinistre.objects.filter(dossier_sinistre__id=id, statut__in=('ACCORDE', 'REJETE'))\n        # Added on 05102023: add tm préfinancé\n        request_user_is_prestataire = request.user.is_prestataire\n        tm_prefinanced = False\n        if dossier_sinistre.type_prefinancement and dossier_sinistre.type_prefinancement.code == \"PREF_TOUT\":",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "render_pdf_view_pharmacie",
        "kind": 2,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "def render_pdf_view_pharmacie(request, id):\n    dossiers_sinistres = DossierSinistre.objects.filter(id=id, statut_validite=StatutValidite.VALIDE)\n    if dossiers_sinistres:\n        dossier_sinistre = dossiers_sinistres.first()\n        # sinistres = Sinistre.objects.filter(dossier_sinistre__id=id, statut='ACCORDE')\n        #   sinistres = Sinistre.objects.filter(dossier_sinistre__id=id, statut__in=('ACCORDE', 'REJETE'))\n        sinistres = Sinistre.objects.filter(acte__type_acte__libelle='MEDICAMENT', dossier_sinistre__id=id, statut__in=('ACCORDE', 'REJETE'))\n        # for s in sinistres:\n        #     print(s)\n        #     print('--------------')",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "get_prestataires_generate_facture",
        "kind": 2,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "def get_prestataires_generate_facture(request):\n    prestataire_ids = Sinistre.objects.filter(prestataire__bureau=request.user.bureau,dossier_sinistre__isnull=False,\n                                                            facture_prestataire__isnull=True,\n                                                            statut=StatutSinistre.ACCORDE,\n                                                            dossier_sinistre__type_remboursement__code=\"TP\",\n                                                            statut_validite=StatutValidite.VALIDE).values('prestataire_id')\n    prestataires = Prestataire.objects.filter(bureau=request.user.bureau, id__in=prestataire_ids).order_by('name')\n    data = []\n    for prestataire in prestataires:\n        data.append({\"id\": prestataire.id, \"name\": prestataire.name})",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "search_prestataires_generate_facture_by_name_datatable",
        "kind": 2,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "def search_prestataires_generate_facture_by_name_datatable(request):\n    items_per_page = int(request.GET.get('length', 10))\n    start = int(request.GET.get('start', 0))\n    page_number = start // items_per_page + 1  # Calculate page number correctly\n    search_prestataire_m = request.GET.get('search_prestataire_m', '')\n    # Filter based on search_prestataire_m\n    if search_prestataire_m:\n        # prestataire_ids = Sinistre.objects.filter(prestataire__bureau=request.user.bureau,\n        #                                           dossier_sinistre__isnull=False,\n        #                                           facture_prestataire__isnull=True,",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "search_assures_generate_facture_by_name_datatable",
        "kind": 2,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "def search_assures_generate_facture_by_name_datatable(request):\n    items_per_page = int(request.GET.get('length', 10))\n    start = int(request.GET.get('start', 0))\n    page_number = start // items_per_page + 1  # Calculate page number correctly\n    search_assure_m = request.GET.get('search_assure_m', '')\n    # Filter based on search_assure_m\n    if search_assure_m:\n        # prestataire_ids = Sinistre.objects.filter(prestataire__bureau=request.user.bureau,\n        #                                           dossier_sinistre__isnull=False,\n        #                                           facture_prestataire__isnull=True,",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "search_adherents_generate_facture_by_name_datatable",
        "kind": 2,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "def search_adherents_generate_facture_by_name_datatable(request):\n    items_per_page = int(request.GET.get('length', 10))\n    start = int(request.GET.get('start', 0))\n    page_number = start // items_per_page + 1  # Calculate page number correctly\n    search_beneficiaire = request.GET.get('search_beneficiaire', '')\n    # Filter based on search_beneficiaire\n    if search_beneficiaire:\n        # adherent_principal_ids = Sinistre.objects.filter(prestataire__bureau=request.user.bureau,\n        #                                                  dossier_sinistre__isnull=False,\n        #                                                  facture_prestataire__isnull=True,",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "generate_facture_datatable",
        "kind": 2,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "def generate_facture_datatable(request):\n    items_per_page = 25\n    page_number = request.GET.get('page')\n    start = int(request.GET.get('start', 0))\n    length = int(request.GET.get('length', items_per_page))\n    sort_column_index = request.GET.get('order[0][column]')\n    sort_direction = request.GET.get('order[0][dir]')\n    search_periode_comptable = request.GET.get('search_periode_comptable', '')\n    search_prestataire = request.GET.get('search_prestataire', '')\n    search_adh = request.GET.get('search_adh', '')",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "liste_facture_datatable",
        "kind": 2,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "def liste_facture_datatable(request):\n    items_per_page = 25\n    page_number = request.GET.get('page')\n    start = int(request.GET.get('start', 0))\n    length = int(request.GET.get('length', items_per_page))\n    sort_column_index = request.GET.get('order[0][column]')\n    sort_direction = request.GET.get('order[0][dir]')\n    search_annee_comptable = request.GET.get('search_annee_comptable', '')\n    select_all = request.GET.get('all', '')\n    search = request.GET.get('search', '')",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "details_bordereau_prestataire_datatable",
        "kind": 2,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "def details_bordereau_prestataire_datatable(request, bordereau_id, *args, **kwargs):\n    items_per_page = 10\n    page_number = request.GET.get('page')\n    # start = int(request.GET.get('start', 0))\n    length = int(request.GET.get('length', items_per_page))\n    sort_column_index = int(request.GET.get('order[0][column]'))\n    sort_direction = request.GET.get('order[0][dir]')\n    search = request.GET.get('search[value]', '')\n    select_all = request.GET.get('all', '')\n    sort = ''",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "facture_pdf",
        "kind": 2,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "def facture_pdf(request):\n    data = Sinistre.objects.filter(id__in=['1154767', '1154766', '1154765', '1154764', '1154763', '1154762', '1154761', '1154760', '1154759', '1154758', '1154757', '1154756', '1154755', '1154754', '1154753', '1154752', '1154751', '1154750', '1154749', '1154748', '1154747', '1154746',1154736, 1154735, 1154734, 1154733, 1154732])\n    facture = data.first().facture_prestataire\n    pprint(\"facture\")\n    pprint(facture)\n    net_a_payer = 0\n    part_assure = 0\n    montant_reel = 0\n    sinistes_pdf = []\n    sinistres_par_adherent = defaultdict(list)",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "submit_generate_bordereau",
        "kind": 2,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "def submit_generate_bordereau(request):\n    # TODO : CODE_PAYS_YY_MM\n    # try:\n    with transaction.atomic():\n        periode_comptable = PeriodeComptable.objects.get(id=int(request.POST.get('periode_id')))\n        #print(\"periode \" + request.POST.get('periode_id'))\n        #print(\"search adh \" + request.POST.get('search_adh'))\n        #print(\"prestataire \" + request.POST.get('prestataire_id'))\n        #print(\"selectedItems\" + request.POST.get('selectedItems'))\n        #pprint(\"ADH ID\")",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "borderau_validation_pdf_old",
        "kind": 2,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "def borderau_validation_pdf_old(request, liste_sinistre, beneficiaire, par_compagnie=False):\n    liste_compagnies_concernes = liste_sinistre.values('compagnie_id').annotate(\n        nombre_sinistres=Count('compagnie_id'),\n    )\n    results = []\n    for groupe in liste_compagnies_concernes:\n        sinistres = liste_sinistre.filter(compagnie_id=groupe['compagnie_id'])\n        compagnie = Compagnie.objects.filter(id=groupe['compagnie_id']).first()\n        # Montant net a payer est maintenant une propriété montant_remb_accepte\n        montant_remb_accepte_par_compagnie = sum(s.montant_remb_accepte for s in sinistres)",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "borderau_validation_pdf",
        "kind": 2,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "def borderau_validation_pdf(request, liste_sinistre, beneficiaire, par_compagnie=False):\n    liste_compagnies_concernes = liste_sinistre.values('compagnie_id').annotate(\n        nombre_sinistres=Count('compagnie_id'),\n    )\n    results = []\n    for groupe in liste_compagnies_concernes:\n        sinistres = liste_sinistre.filter(compagnie_id=groupe['compagnie_id'])\n        compagnie = Compagnie.objects.filter(id=groupe['compagnie_id']).first()\n        # Montant net a payer est maintenant une propriété montant_remb_accepte\n        montant_remb_accepte_par_compagnie = sum(s.montant_remb_accepte for s in sinistres)",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "borderau_ordonnancement_pdf",
        "kind": 2,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "def borderau_ordonnancement_pdf(request, liste_sinistre, prestataire, bordereau_ordonnancement):\n    from itertools import groupby\n    pprint(\"prestataire à payer\")\n    pprint(prestataire)\n    # Regrouper les sinistres par compagnie\n    sinistres_par_compagnie = {}\n    for compagnie, sinistres_groupe in groupby(liste_sinistre, key=lambda x: x.compagnie):\n        sinistres_par_compagnie[compagnie] = list(sinistres_groupe)\n    # Calculer les totaux pour chaque compagnie\n    resultats = []",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "borderau_ordonnancement_rd_pdf",
        "kind": 2,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "def borderau_ordonnancement_rd_pdf(request, liste_sinistre, adherent_principal, bordereau_ordonnancement):\n    from itertools import groupby\n    pprint(\"adherent_principal à payer\")\n    pprint(adherent_principal)\n    # Regrouper les sinistres par compagnie\n    sinistres_par_compagnie = {}\n    for compagnie, sinistres_groupe in groupby(liste_sinistre, key=lambda x: x.compagnie):\n        sinistres_par_compagnie[compagnie] = list(sinistres_groupe)\n    # Calculer les totaux pour chaque compagnie\n    resultats = []",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "borderau_ordonnancement_rd_assure_pdf",
        "kind": 2,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "def borderau_ordonnancement_rd_assure_pdf(request, liste_sinistre, assure, bordereau_ordonnancement):\n    from itertools import groupby\n    pprint(\"assure à payer\")\n    pprint(assure)\n    # Regrouper les sinistres par compagnie\n    sinistres_par_adherent = defaultdict(list)\n    for sinistre in liste_sinistre:\n        adherent_id = sinistre.adherent_principal.id\n        sinistres_par_adherent[adherent_id].append(sinistre)\n    # for compagnie, sinistres_groupe in groupby(liste_sinistre, key=lambda x: x.compagnie):",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "regenerer_borderau_ordonnancement_rd_pdf",
        "kind": 2,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "def regenerer_borderau_ordonnancement_rd_pdf(request, bordereau_ordonnancement_id):\n    from itertools import groupby\n    pprint(\"Regénération du bordereau d'ordonnancement RD\")\n    bordereau_ordonnancement = BordereauOrdonnancement.objects.get(id=bordereau_ordonnancement_id)\n    if bordereau_ordonnancement.assure:\n        liste_sinistre = Sinistre.objects.filter(bordereau_ordonnancement_id=bordereau_ordonnancement.id,\n                                                 facture_prestataire__assure__id=bordereau_ordonnancement.assure.id)\n        pdf = borderau_ordonnancement_rd_assure_pdf(request, liste_sinistre, bordereau_ordonnancement.assure)\n    else:\n        adherent_principal = bordereau_ordonnancement.adherent_principal",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "regenerer_borderau_ordonnancement_pdf",
        "kind": 2,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "def regenerer_borderau_ordonnancement_pdf(request, bordereau_ordonnancement_id):\n    bordereau_ordonnancement = BordereauOrdonnancement.objects.get(id=bordereau_ordonnancement_id)\n    prestataire = bordereau_ordonnancement.prestataire\n    liste_sinistre = Sinistre.objects.filter(bordereau_ordonnancement=bordereau_ordonnancement)\n    liste_compagnies_concernes = liste_sinistre.values('compagnie_id').annotate(\n        nombre_sinistres=Count('compagnie_id'),\n    )\n    results = []\n    for groupe in liste_compagnies_concernes:\n        sinistres = liste_sinistre.filter(compagnie_id=groupe['compagnie_id'])",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "borderau_ordonnancement_pdf_exemple",
        "kind": 2,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "def borderau_ordonnancement_pdf_exemple(request):\n    data = range(25)\n    sinistres = Sinistre.objects.filter(statut_validite=\"VALIDE\").order_by('prestataire')\n    pdf = render_pdf('courriers/borderau_ordonnancement.html', {'sinistres': data})\n    pdf_file = PyPDF2.PdfReader(pdf)\n    nombre_pages = len(pdf_file.pages)\n    pdf = render_pdf('courriers/borderau_ordonnancement.html', {'sinistres': data, 'nombre_pages': nombre_pages})\n    return HttpResponse(File(pdf), content_type='application/pdf')\n# TODO : BORDEREAU DE VALIDATION\n@method_decorator(login_required, name='dispatch')",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "generation_br_validation_datatable",
        "kind": 2,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "def generation_br_validation_datatable(request):\n    items_per_page = 10\n    page_number = request.GET.get('page')\n    # start = int(request.GET.get('start', 0))\n    length = int(request.GET.get('length', items_per_page))\n    # sort_column_index = int(request.GET.get('order[0][column]'))\n    # sort_direction = request.GET.get('order[0][dir]')\n    search = request.GET.get('search[value]', '')\n    search_numero_bordereau = request.GET.get('search_numero_bordereau', '')\n    search_reference_facture = request.GET.get('search_reference_facture', '')",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "submit_generation_br_validation",
        "kind": 2,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "def submit_generation_br_validation(request):\n    with transaction.atomic():\n        # try:\n        # RECUPERATION DES DONNEES DU FILTRE\n        print(request.POST)\n        print(request.POST.get('search_periode_comptable', 0))\n        search_numero_bordereau = request.POST.get('search_numero_bordereau')\n        search_reference_facture = request.POST.get('search_reference_facture')\n        search_periode_comptable = request.POST.get('search_periode_comptable')\n        search_type_remboursement = request.POST.get('search_type_remboursement')",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "uploaded_file_url",
        "kind": 2,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "def uploaded_file_url(file):\n    # Simulation de l'upload du fichier sur le serveur\n    fs = FileSystemStorage()\n    file_path = fs.save(file.name, file)\n    return fs.url(file_path)\n# TODO : BORDEREAU DE ORDONNANCEMENT\n@method_decorator(login_required, name='dispatch')\nclass GenerationBrOrdonnancementView(TemplateView):\n    # permission_required = \"sinistre.view_sinistre\"\n    template_name = 'generation_br_ordonnancement.html'",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "export_sinistres_ordonnancement",
        "kind": 2,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "def export_sinistres_ordonnancement(request):\n    try:\n        # Retrieve the Sinistre instances based on filters and user's bureau\n        queryset = Sinistre.objects.filter(\n            prestataire__bureau=request.user.bureau,\n            bordereau_ordonnancement__isnull=True,\n            facture_prestataire__statut__in=[SatutBordereauDossierSinistres.VALIDE, SatutBordereauDossierSinistres.REJETE],\n            is_ges_processed=True\n        ).order_by('-id')\n        # Create an Excel response",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "generation_br_ordonnancement_datatable",
        "kind": 2,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "def generation_br_ordonnancement_datatable(request):\n    items_per_page = 10\n    page_number = request.GET.get('page')\n    # start = int(request.GET.get('start', 0))\n    length = int(request.GET.get('length', items_per_page))\n    # sort_column_index = int(request.GET.get('order[0][column]'))\n    # sort_direction = request.GET.get('order[0][dir]')\n    search = request.GET.get('search[value]', '')\n    pprint(search)\n    search_numero_bordereau = request.GET.get('search_numero_bordereau', '')",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "get_facture_br_ordonnancement",
        "kind": 2,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "def get_facture_br_ordonnancement(request):\n    if request.method == 'GET':\n        prestataire_id = request.GET.get('prestataire_id')\n        assure_id = request.GET.get('assure_id')\n        adherent_principal_id = request.GET.get('adherent_principal_id')\n        periode_comptable_id = request.GET.get('periode_comptable_id')\n        factures = []\n        data_response = []\n        if assure_id:\n            factures = FacturePrestataire.objects.filter(assure_id=assure_id,",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "get_periode_br_ordonnancement",
        "kind": 2,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "def get_periode_br_ordonnancement(request):\n    if request.method == 'GET':\n        prestataire_id = request.GET.get('prestataire_id')\n        assure_id = request.GET.get('assure_id')\n        adherent_principal_id = request.GET.get('adherent_principal_id')\n        periode_comptable_ids = []\n        data_response = []\n        if assure_id:\n            periode_comptable_ids = FacturePrestataire.objects.filter(assure_id=assure_id,\n                                                         bureau=request.user.bureau,",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "popup_rejet_ordonnancement_sinistre",
        "kind": 2,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "def popup_rejet_ordonnancement_sinistre(request, sinistre_id):\n    sinistre = Sinistre.objects.get(id=sinistre_id)\n    return render(request, 'modal_rejet_ordonnancement_sinistre.html',\n                  {'sinistre': sinistre})\ndef refuser_remboursement_ordonnancement(request, sinistre_id):\n    if request.method == 'POST':\n        pprint(request.POST)\n        motif = request.POST.get('motif')\n        sinistre = Sinistre.objects.get(id=sinistre_id)\n        facture_sinistre = sinistre.facture_prestataire",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "refuser_remboursement_ordonnancement",
        "kind": 2,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "def refuser_remboursement_ordonnancement(request, sinistre_id):\n    if request.method == 'POST':\n        pprint(request.POST)\n        motif = request.POST.get('motif')\n        sinistre = Sinistre.objects.get(id=sinistre_id)\n        facture_sinistre = sinistre.facture_prestataire\n        sinistre_rembs = sinistre.remboursements.filter(is_invalid=False)\n        for remb_sinistre in sinistre_rembs:\n            remb_sinistre.is_invalid = True\n            remb_sinistre.is_invalid_by = request.user",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "annuler_remboursement_ordonnancement",
        "kind": 2,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "def annuler_remboursement_ordonnancement(request, sinistre_id):\n    if request.method == 'POST':\n        pprint(request.POST)\n        motif = request.POST.get('motif')\n        sinistre = Sinistre.objects.get(id=sinistre_id)\n        facture_sinistre = sinistre.facture_prestataire\n        sinistre_rembs = sinistre.remboursements.filter(is_invalid=False)\n        for remb_sinistre in sinistre_rembs:\n            remb_sinistre.is_invalid = True\n            remb_sinistre.is_invalid_by = request.user",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "submit_generation_br_ordonnancement",
        "kind": 2,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "def submit_generation_br_ordonnancement(request):\n    with transaction.atomic():\n        # try:\n        # RECUPERATION DES DONNEES DU FILTRE\n        pprint(\"----- fn= submit_generation_br_ordonnancement -----\")\n        print(request.POST)\n        print(request.POST.get('search_periode_comptable', 0))\n        search_numero_bordereau = request.POST.get('search_numero_bordereau')\n        search_facture = request.POST.get('search_facture')\n        search_periode_comptable = request.POST.get('search_periode_comptable')",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "bordereau_ordonnancement_pdf",
        "kind": 2,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "def bordereau_ordonnancement_pdf(request):\n    bordereau = BordereauOrdonnancement.objects.get(id=15747)\n    liste_sinistre = Sinistre.objects.filter(bordereau_ordonnancement_id=15747, facture_prestataire__assure__id=10130)\n    pdf = borderau_ordonnancement_rd_assure_pdf(request, liste_sinistre, bordereau.assure)\n    return HttpResponse(File(pdf), content_type='application/pdf')\n@method_decorator(login_required, name='dispatch')\nclass BordereauOrdonnancementView(TemplateView):\n    template_name = 'liste_bordereau_ordonnancement.html'\n    model = Sinistre\n    def get(self, request, *args, **kwargs):",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "bordereau_ordonnancement_datatable",
        "kind": 2,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "def bordereau_ordonnancement_datatable(request):\n    items_per_page = 10\n    page_number = request.GET.get('page')\n    start = int(request.GET.get('start', 0))\n    length = int(request.GET.get('length', items_per_page))\n    sort_column_index = int(request.GET.get('order[0][column]'))\n    sort_direction = request.GET.get('order[0][dir]')\n    search_numero_bordereau = request.GET.get('search_numero_bordereau', '')\n    search_periode_comptable = request.GET.get('search_periode_comptable', '')\n    search_prestataire = request.GET.get('search_prestataire', '')",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "bordereau_ordonnancement_paye_datatable",
        "kind": 2,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "def bordereau_ordonnancement_paye_datatable(request):\n    items_per_page = 10\n    page_number = request.GET.get('page')\n    start = int(request.GET.get('start', 0))\n    length = int(request.GET.get('length', items_per_page))\n    sort_column_index = int(request.GET.get('order[0][column]'))\n    sort_direction = request.GET.get('order[0][dir]')\n    search_numero_bordereau = request.GET.get('search_numero_bordereau', '')\n    search_periode_comptable = request.GET.get('search_periode_comptable', '')\n    search_prestataire = request.GET.get('search_prestataire', '')",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "verif_background_requete_excel",
        "kind": 2,
        "importPath": "src.sinistre.views",
        "description": "src.sinistre.views",
        "peekOfCode": "def verif_background_requete_excel(request):\n    task_id = request.session.get('task_id',None)\n    task_event = request.POST.get('task_event', None)\n    print(task_id)\n    if task_id:\n        try:\n            task = BackgroundQueryTask.objects.get(id=task_id)\n            if task_event:\n                task.status = \"ENCOURS\"\n                task.save()",
        "detail": "src.sinistre.views",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "src.manage",
        "description": "src.manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'inov.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "src.manage",
        "documentation": {}
    }
]